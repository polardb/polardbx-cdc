/**
 * Copyright (c) 2013-Present, Alibaba Group Holding Limited.
 * All rights reserved.
 *
 * Licensed under the Server Side Public License v1 (SSPLv1).
 */
/**
 * Autogenerated by Thrift Compiler (0.14.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.aliyun.polardbx.binlog.remote.lindorm.thrift.fileservice.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-05-26")
public class WriteFileRequest
    implements org.apache.thrift.TBase<WriteFileRequest, WriteFileRequest._Fields>, java.io.Serializable, Cloneable,
    Comparable<WriteFileRequest> {
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("WriteFileRequest");
    private static final org.apache.thrift.protocol.TField OUTPUT_STREAM_ID_FIELD_DESC =
        new org.apache.thrift.protocol.TField("outputStreamId", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC =
        new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC =
        new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC =
        new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField SRC_OFFSET_FIELD_DESC =
        new org.apache.thrift.protocol.TField("srcOffset", org.apache.thrift.protocol.TType.I32, (short) 5);
    private static final org.apache.thrift.protocol.TField SRC_LENGTH_FIELD_DESC =
        new org.apache.thrift.protocol.TField("srcLength", org.apache.thrift.protocol.TType.I32, (short) 6);
    private static final org.apache.thrift.protocol.TField FILE_OFFSET_FIELD_DESC =
        new org.apache.thrift.protocol.TField("fileOffset", org.apache.thrift.protocol.TType.I64, (short) 7);
    private static final org.apache.thrift.protocol.TField FILE_CRC64_FIELD_DESC =
        new org.apache.thrift.protocol.TField("fileCrc64", org.apache.thrift.protocol.TType.I64, (short) 8);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC =
        new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short) 9);
    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new WriteFileRequestStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new WriteFileRequestTupleSchemeFactory();
    // isset id assignments
    private static final int __SRCOFFSET_ISSET_ID = 0;
    private static final int __SRCLENGTH_ISSET_ID = 1;
    private static final int __FILEOFFSET_ISSET_ID = 2;
    private static final int __FILECRC64_ISSET_ID = 3;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
            new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.OUTPUT_STREAM_ID, new org.apache.thrift.meta_data.FieldMetaData("outputStreamId",
            org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.BUCKET_NAME,
            new org.apache.thrift.meta_data.FieldMetaData("bucketName",
                org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PATH,
            new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SRC,
            new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
        tmpMap.put(_Fields.SRC_OFFSET,
            new org.apache.thrift.meta_data.FieldMetaData("srcOffset", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.SRC_LENGTH,
            new org.apache.thrift.meta_data.FieldMetaData("srcLength", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.FILE_OFFSET,
            new org.apache.thrift.meta_data.FieldMetaData("fileOffset",
                org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.FILE_CRC64,
            new org.apache.thrift.meta_data.FieldMetaData("fileCrc64", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.AUTH,
            new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                    Authorization.class)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WriteFileRequest.class, metaDataMap);
    }

    public @org.apache.thrift.annotation.Nullable
    String outputStreamId; // required
    public @org.apache.thrift.annotation.Nullable
    String bucketName; // required
    public @org.apache.thrift.annotation.Nullable
    String path; // required
    public @org.apache.thrift.annotation.Nullable
    java.nio.ByteBuffer src; // required
    public int srcOffset; // required
    public int srcLength; // required
    public long fileOffset; // required
    public long fileCrc64; // required
    public @org.apache.thrift.annotation.Nullable
    Authorization auth; // required
    private byte __isset_bitfield = 0;

    public WriteFileRequest() {
    }

    public WriteFileRequest(
        String outputStreamId,
        String bucketName,
        String path,
        java.nio.ByteBuffer src,
        int srcOffset,
        int srcLength,
        long fileOffset,
        long fileCrc64,
        Authorization auth) {
        this();
        this.outputStreamId = outputStreamId;
        this.bucketName = bucketName;
        this.path = path;
        this.src = org.apache.thrift.TBaseHelper.copyBinary(src);
        this.srcOffset = srcOffset;
        setSrcOffsetIsSet(true);
        this.srcLength = srcLength;
        setSrcLengthIsSet(true);
        this.fileOffset = fileOffset;
        setFileOffsetIsSet(true);
        this.fileCrc64 = fileCrc64;
        setFileCrc64IsSet(true);
        this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public WriteFileRequest(WriteFileRequest other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetOutputStreamId()) {
            this.outputStreamId = other.outputStreamId;
        }
        if (other.isSetBucketName()) {
            this.bucketName = other.bucketName;
        }
        if (other.isSetPath()) {
            this.path = other.path;
        }
        if (other.isSetSrc()) {
            this.src = org.apache.thrift.TBaseHelper.copyBinary(other.src);
        }
        this.srcOffset = other.srcOffset;
        this.srcLength = other.srcLength;
        this.fileOffset = other.fileOffset;
        this.fileCrc64 = other.fileCrc64;
        if (other.isSetAuth()) {
            this.auth = new Authorization(other.auth);
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
            TUPLE_SCHEME_FACTORY).getScheme();
    }

    public WriteFileRequest deepCopy() {
        return new WriteFileRequest(this);
    }

    @Override
    public void clear() {
        this.outputStreamId = null;
        this.bucketName = null;
        this.path = null;
        this.src = null;
        setSrcOffsetIsSet(false);
        this.srcOffset = 0;
        setSrcLengthIsSet(false);
        this.srcLength = 0;
        setFileOffsetIsSet(false);
        this.fileOffset = 0;
        setFileCrc64IsSet(false);
        this.fileCrc64 = 0;
        this.auth = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getOutputStreamId() {
        return this.outputStreamId;
    }

    public WriteFileRequest setOutputStreamId(@org.apache.thrift.annotation.Nullable String outputStreamId) {
        this.outputStreamId = outputStreamId;
        return this;
    }

    public void unsetOutputStreamId() {
        this.outputStreamId = null;
    }

    /**
     * Returns true if field outputStreamId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetOutputStreamId() {
        return this.outputStreamId != null;
    }

    public void setOutputStreamIdIsSet(boolean value) {
        if (!value) {
            this.outputStreamId = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public String getBucketName() {
        return this.bucketName;
    }

    public WriteFileRequest setBucketName(@org.apache.thrift.annotation.Nullable String bucketName) {
        this.bucketName = bucketName;
        return this;
    }

    public void unsetBucketName() {
        this.bucketName = null;
    }

    /**
     * Returns true if field bucketName is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBucketName() {
        return this.bucketName != null;
    }

    public void setBucketNameIsSet(boolean value) {
        if (!value) {
            this.bucketName = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public String getPath() {
        return this.path;
    }

    public WriteFileRequest setPath(@org.apache.thrift.annotation.Nullable String path) {
        this.path = path;
        return this;
    }

    public void unsetPath() {
        this.path = null;
    }

    /**
     * Returns true if field path is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPath() {
        return this.path != null;
    }

    public void setPathIsSet(boolean value) {
        if (!value) {
            this.path = null;
        }
    }

    public byte[] getSrc() {
        setSrc(org.apache.thrift.TBaseHelper.rightSize(src));
        return src == null ? null : src.array();
    }

    public WriteFileRequest setSrc(byte[] src) {
        this.src = src == null ? (java.nio.ByteBuffer) null : java.nio.ByteBuffer.wrap(src.clone());
        return this;
    }

    public WriteFileRequest setSrc(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer src) {
        this.src = org.apache.thrift.TBaseHelper.copyBinary(src);
        return this;
    }

    public java.nio.ByteBuffer bufferForSrc() {
        return org.apache.thrift.TBaseHelper.copyBinary(src);
    }

    public void unsetSrc() {
        this.src = null;
    }

    /**
     * Returns true if field src is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSrc() {
        return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
        if (!value) {
            this.src = null;
        }
    }

    public int getSrcOffset() {
        return this.srcOffset;
    }

    public WriteFileRequest setSrcOffset(int srcOffset) {
        this.srcOffset = srcOffset;
        setSrcOffsetIsSet(true);
        return this;
    }

    public void unsetSrcOffset() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SRCOFFSET_ISSET_ID);
    }

    /**
     * Returns true if field srcOffset is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSrcOffset() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SRCOFFSET_ISSET_ID);
    }

    public void setSrcOffsetIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SRCOFFSET_ISSET_ID, value);
    }

    public int getSrcLength() {
        return this.srcLength;
    }

    public WriteFileRequest setSrcLength(int srcLength) {
        this.srcLength = srcLength;
        setSrcLengthIsSet(true);
        return this;
    }

    public void unsetSrcLength() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SRCLENGTH_ISSET_ID);
    }

    /**
     * Returns true if field srcLength is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSrcLength() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SRCLENGTH_ISSET_ID);
    }

    public void setSrcLengthIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SRCLENGTH_ISSET_ID, value);
    }

    public long getFileOffset() {
        return this.fileOffset;
    }

    public WriteFileRequest setFileOffset(long fileOffset) {
        this.fileOffset = fileOffset;
        setFileOffsetIsSet(true);
        return this;
    }

    public void unsetFileOffset() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILEOFFSET_ISSET_ID);
    }

    /**
     * Returns true if field fileOffset is set (has been assigned a value) and false otherwise
     */
    public boolean isSetFileOffset() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILEOFFSET_ISSET_ID);
    }

    public void setFileOffsetIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILEOFFSET_ISSET_ID, value);
    }

    public long getFileCrc64() {
        return this.fileCrc64;
    }

    public WriteFileRequest setFileCrc64(long fileCrc64) {
        this.fileCrc64 = fileCrc64;
        setFileCrc64IsSet(true);
        return this;
    }

    public void unsetFileCrc64() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILECRC64_ISSET_ID);
    }

    /**
     * Returns true if field fileCrc64 is set (has been assigned a value) and false otherwise
     */
    public boolean isSetFileCrc64() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILECRC64_ISSET_ID);
    }

    public void setFileCrc64IsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILECRC64_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public Authorization getAuth() {
        return this.auth;
    }

    public WriteFileRequest setAuth(@org.apache.thrift.annotation.Nullable Authorization auth) {
        this.auth = auth;
        return this;
    }

    public void unsetAuth() {
        this.auth = null;
    }

    /**
     * Returns true if field auth is set (has been assigned a value) and false otherwise
     */
    public boolean isSetAuth() {
        return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
        if (!value) {
            this.auth = null;
        }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
        switch (field) {
        case OUTPUT_STREAM_ID:
            if (value == null) {
                unsetOutputStreamId();
            } else {
                setOutputStreamId((String) value);
            }
            break;

        case BUCKET_NAME:
            if (value == null) {
                unsetBucketName();
            } else {
                setBucketName((String) value);
            }
            break;

        case PATH:
            if (value == null) {
                unsetPath();
            } else {
                setPath((String) value);
            }
            break;

        case SRC:
            if (value == null) {
                unsetSrc();
            } else {
                if (value instanceof byte[]) {
                    setSrc((byte[]) value);
                } else {
                    setSrc((java.nio.ByteBuffer) value);
                }
            }
            break;

        case SRC_OFFSET:
            if (value == null) {
                unsetSrcOffset();
            } else {
                setSrcOffset((Integer) value);
            }
            break;

        case SRC_LENGTH:
            if (value == null) {
                unsetSrcLength();
            } else {
                setSrcLength((Integer) value);
            }
            break;

        case FILE_OFFSET:
            if (value == null) {
                unsetFileOffset();
            } else {
                setFileOffset((Long) value);
            }
            break;

        case FILE_CRC64:
            if (value == null) {
                unsetFileCrc64();
            } else {
                setFileCrc64((Long) value);
            }
            break;

        case AUTH:
            if (value == null) {
                unsetAuth();
            } else {
                setAuth((Authorization) value);
            }
            break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
        switch (field) {
        case OUTPUT_STREAM_ID:
            return getOutputStreamId();

        case BUCKET_NAME:
            return getBucketName();

        case PATH:
            return getPath();

        case SRC:
            return getSrc();

        case SRC_OFFSET:
            return getSrcOffset();

        case SRC_LENGTH:
            return getSrcLength();

        case FILE_OFFSET:
            return getFileOffset();

        case FILE_CRC64:
            return getFileCrc64();

        case AUTH:
            return getAuth();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case OUTPUT_STREAM_ID:
            return isSetOutputStreamId();
        case BUCKET_NAME:
            return isSetBucketName();
        case PATH:
            return isSetPath();
        case SRC:
            return isSetSrc();
        case SRC_OFFSET:
            return isSetSrcOffset();
        case SRC_LENGTH:
            return isSetSrcLength();
        case FILE_OFFSET:
            return isSetFileOffset();
        case FILE_CRC64:
            return isSetFileCrc64();
        case AUTH:
            return isSetAuth();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that instanceof WriteFileRequest) {
            return this.equals((WriteFileRequest) that);
        }
        return false;
    }

    public boolean equals(WriteFileRequest that) {
        if (that == null) {
            return false;
        }
        if (this == that) {
            return true;
        }

        boolean this_present_outputStreamId = true && this.isSetOutputStreamId();
        boolean that_present_outputStreamId = true && that.isSetOutputStreamId();
        if (this_present_outputStreamId || that_present_outputStreamId) {
            if (!(this_present_outputStreamId && that_present_outputStreamId)) {
                return false;
            }
            if (!this.outputStreamId.equals(that.outputStreamId)) {
                return false;
            }
        }

        boolean this_present_bucketName = true && this.isSetBucketName();
        boolean that_present_bucketName = true && that.isSetBucketName();
        if (this_present_bucketName || that_present_bucketName) {
            if (!(this_present_bucketName && that_present_bucketName)) {
                return false;
            }
            if (!this.bucketName.equals(that.bucketName)) {
                return false;
            }
        }

        boolean this_present_path = true && this.isSetPath();
        boolean that_present_path = true && that.isSetPath();
        if (this_present_path || that_present_path) {
            if (!(this_present_path && that_present_path)) {
                return false;
            }
            if (!this.path.equals(that.path)) {
                return false;
            }
        }

        boolean this_present_src = true && this.isSetSrc();
        boolean that_present_src = true && that.isSetSrc();
        if (this_present_src || that_present_src) {
            if (!(this_present_src && that_present_src)) {
                return false;
            }
            if (!this.src.equals(that.src)) {
                return false;
            }
        }

        boolean this_present_srcOffset = true;
        boolean that_present_srcOffset = true;
        if (this_present_srcOffset || that_present_srcOffset) {
            if (!(this_present_srcOffset && that_present_srcOffset)) {
                return false;
            }
            if (this.srcOffset != that.srcOffset) {
                return false;
            }
        }

        boolean this_present_srcLength = true;
        boolean that_present_srcLength = true;
        if (this_present_srcLength || that_present_srcLength) {
            if (!(this_present_srcLength && that_present_srcLength)) {
                return false;
            }
            if (this.srcLength != that.srcLength) {
                return false;
            }
        }

        boolean this_present_fileOffset = true;
        boolean that_present_fileOffset = true;
        if (this_present_fileOffset || that_present_fileOffset) {
            if (!(this_present_fileOffset && that_present_fileOffset)) {
                return false;
            }
            if (this.fileOffset != that.fileOffset) {
                return false;
            }
        }

        boolean this_present_fileCrc64 = true;
        boolean that_present_fileCrc64 = true;
        if (this_present_fileCrc64 || that_present_fileCrc64) {
            if (!(this_present_fileCrc64 && that_present_fileCrc64)) {
                return false;
            }
            if (this.fileCrc64 != that.fileCrc64) {
                return false;
            }
        }

        boolean this_present_auth = true && this.isSetAuth();
        boolean that_present_auth = true && that.isSetAuth();
        if (this_present_auth || that_present_auth) {
            if (!(this_present_auth && that_present_auth)) {
                return false;
            }
            if (!this.auth.equals(that.auth)) {
                return false;
            }
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetOutputStreamId()) ? 131071 : 524287);
        if (isSetOutputStreamId()) {
            hashCode = hashCode * 8191 + outputStreamId.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetBucketName()) ? 131071 : 524287);
        if (isSetBucketName()) {
            hashCode = hashCode * 8191 + bucketName.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
        if (isSetPath()) {
            hashCode = hashCode * 8191 + path.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
        if (isSetSrc()) {
            hashCode = hashCode * 8191 + src.hashCode();
        }

        hashCode = hashCode * 8191 + srcOffset;

        hashCode = hashCode * 8191 + srcLength;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fileOffset);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fileCrc64);

        hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
        if (isSetAuth()) {
            hashCode = hashCode * 8191 + auth.hashCode();
        }

        return hashCode;
    }

    @Override
    public int compareTo(WriteFileRequest other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.compare(isSetOutputStreamId(), other.isSetOutputStreamId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOutputStreamId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputStreamId, other.outputStreamId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetBucketName(), other.isSetBucketName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBucketName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetPath(), other.isSetPath());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPath()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetSrc(), other.isSetSrc());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSrc()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetSrcOffset(), other.isSetSrcOffset());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSrcOffset()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcOffset, other.srcOffset);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetSrcLength(), other.isSetSrcLength());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSrcLength()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcLength, other.srcLength);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetFileOffset(), other.isSetFileOffset());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFileOffset()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileOffset, other.fileOffset);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetFileCrc64(), other.isSetFileCrc64());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFileCrc64()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileCrc64, other.fileCrc64);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetAuth(), other.isSetAuth());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAuth()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("WriteFileRequest(");
        boolean first = true;

        sb.append("outputStreamId:");
        if (this.outputStreamId == null) {
            sb.append("null");
        } else {
            sb.append(this.outputStreamId);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("bucketName:");
        if (this.bucketName == null) {
            sb.append("null");
        } else {
            sb.append(this.bucketName);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("path:");
        if (this.path == null) {
            sb.append("null");
        } else {
            sb.append(this.path);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("src:");
        if (this.src == null) {
            sb.append("null");
        } else {
            org.apache.thrift.TBaseHelper.toString(this.src, sb);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("srcOffset:");
        sb.append(this.srcOffset);
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("srcLength:");
        sb.append(this.srcLength);
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("fileOffset:");
        sb.append(this.fileOffset);
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("fileCrc64:");
        sb.append(this.fileCrc64);
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("auth:");
        if (this.auth == null) {
            sb.append("null");
        } else {
            sb.append(this.auth);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (outputStreamId == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'outputStreamId' was not present! Struct: " + toString());
        }
        if (bucketName == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'bucketName' was not present! Struct: " + toString());
        }
        if (path == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'path' was not present! Struct: " + toString());
        }
        if (src == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'src' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'srcOffset' because it's a primitive and you chose the non-beans generator.
        // alas, we cannot check 'srcLength' because it's a primitive and you chose the non-beans generator.
        // alas, we cannot check 'fileOffset' because it's a primitive and you chose the non-beans generator.
        // alas, we cannot check 'fileCrc64' because it's a primitive and you chose the non-beans generator.
        if (auth == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'auth' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
        if (auth != null) {
            auth.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        OUTPUT_STREAM_ID((short) 1, "outputStreamId"),
        BUCKET_NAME((short) 2, "bucketName"),
        PATH((short) 3, "path"),
        SRC((short) 4, "src"),
        SRC_OFFSET((short) 5, "srcOffset"),
        SRC_LENGTH((short) 6, "srcLength"),
        FILE_OFFSET((short) 7, "fileOffset"),
        FILE_CRC64((short) 8, "fileCrc64"),
        AUTH((short) 9, "auth");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // OUTPUT_STREAM_ID
                return OUTPUT_STREAM_ID;
            case 2: // BUCKET_NAME
                return BUCKET_NAME;
            case 3: // PATH
                return PATH;
            case 4: // SRC
                return SRC;
            case 5: // SRC_OFFSET
                return SRC_OFFSET;
            case 6: // SRC_LENGTH
                return SRC_LENGTH;
            case 7: // FILE_OFFSET
                return FILE_OFFSET;
            case 8: // FILE_CRC64
                return FILE_CRC64;
            case 9: // AUTH
                return AUTH;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) {
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class WriteFileRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public WriteFileRequestStandardScheme getScheme() {
            return new WriteFileRequestStandardScheme();
        }
    }

    private static class WriteFileRequestStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<WriteFileRequest> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, WriteFileRequest struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                case 1: // OUTPUT_STREAM_ID
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.outputStreamId = iprot.readString();
                        struct.setOutputStreamIdIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 2: // BUCKET_NAME
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.bucketName = iprot.readString();
                        struct.setBucketNameIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 3: // PATH
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.path = iprot.readString();
                        struct.setPathIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 4: // SRC
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.src = iprot.readBinary();
                        struct.setSrcIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 5: // SRC_OFFSET
                    if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                        struct.srcOffset = iprot.readI32();
                        struct.setSrcOffsetIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 6: // SRC_LENGTH
                    if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                        struct.srcLength = iprot.readI32();
                        struct.setSrcLengthIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 7: // FILE_OFFSET
                    if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                        struct.fileOffset = iprot.readI64();
                        struct.setFileOffsetIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 8: // FILE_CRC64
                    if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                        struct.fileCrc64 = iprot.readI64();
                        struct.setFileCrc64IsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 9: // AUTH
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                        struct.auth = new Authorization();
                        struct.auth.read(iprot);
                        struct.setAuthIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetSrcOffset()) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'srcOffset' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetSrcLength()) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'srcLength' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetFileOffset()) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'fileOffset' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetFileCrc64()) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'fileCrc64' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, WriteFileRequest struct)
            throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.outputStreamId != null) {
                oprot.writeFieldBegin(OUTPUT_STREAM_ID_FIELD_DESC);
                oprot.writeString(struct.outputStreamId);
                oprot.writeFieldEnd();
            }
            if (struct.bucketName != null) {
                oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
                oprot.writeString(struct.bucketName);
                oprot.writeFieldEnd();
            }
            if (struct.path != null) {
                oprot.writeFieldBegin(PATH_FIELD_DESC);
                oprot.writeString(struct.path);
                oprot.writeFieldEnd();
            }
            if (struct.src != null) {
                oprot.writeFieldBegin(SRC_FIELD_DESC);
                oprot.writeBinary(struct.src);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(SRC_OFFSET_FIELD_DESC);
            oprot.writeI32(struct.srcOffset);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(SRC_LENGTH_FIELD_DESC);
            oprot.writeI32(struct.srcLength);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(FILE_OFFSET_FIELD_DESC);
            oprot.writeI64(struct.fileOffset);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(FILE_CRC64_FIELD_DESC);
            oprot.writeI64(struct.fileCrc64);
            oprot.writeFieldEnd();
            if (struct.auth != null) {
                oprot.writeFieldBegin(AUTH_FIELD_DESC);
                struct.auth.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class WriteFileRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public WriteFileRequestTupleScheme getScheme() {
            return new WriteFileRequestTupleScheme();
        }
    }

    private static class WriteFileRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<WriteFileRequest> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, WriteFileRequest struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            oprot.writeString(struct.outputStreamId);
            oprot.writeString(struct.bucketName);
            oprot.writeString(struct.path);
            oprot.writeBinary(struct.src);
            oprot.writeI32(struct.srcOffset);
            oprot.writeI32(struct.srcLength);
            oprot.writeI64(struct.fileOffset);
            oprot.writeI64(struct.fileCrc64);
            struct.auth.write(oprot);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, WriteFileRequest struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            struct.outputStreamId = iprot.readString();
            struct.setOutputStreamIdIsSet(true);
            struct.bucketName = iprot.readString();
            struct.setBucketNameIsSet(true);
            struct.path = iprot.readString();
            struct.setPathIsSet(true);
            struct.src = iprot.readBinary();
            struct.setSrcIsSet(true);
            struct.srcOffset = iprot.readI32();
            struct.setSrcOffsetIsSet(true);
            struct.srcLength = iprot.readI32();
            struct.setSrcLengthIsSet(true);
            struct.fileOffset = iprot.readI64();
            struct.setFileOffsetIsSet(true);
            struct.fileCrc64 = iprot.readI64();
            struct.setFileCrc64IsSet(true);
            struct.auth = new Authorization();
            struct.auth.read(iprot);
            struct.setAuthIsSet(true);
        }
    }
}

