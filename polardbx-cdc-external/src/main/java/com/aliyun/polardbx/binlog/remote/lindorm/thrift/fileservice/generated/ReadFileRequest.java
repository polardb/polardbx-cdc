/**
 * Copyright (c) 2013-Present, Alibaba Group Holding Limited.
 * All rights reserved.
 *
 * Licensed under the Server Side Public License v1 (SSPLv1).
 */
/**
 * Autogenerated by Thrift Compiler (0.14.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.aliyun.polardbx.binlog.remote.lindorm.thrift.fileservice.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-05-26")
public class ReadFileRequest
    implements org.apache.thrift.TBase<ReadFileRequest, ReadFileRequest._Fields>, java.io.Serializable, Cloneable,
    Comparable<ReadFileRequest> {
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("ReadFileRequest");
    private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC =
        new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC =
        new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC =
        new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short) 3);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC =
        new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short) 4);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC =
        new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short) 5);
    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new ReadFileRequestStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new ReadFileRequestTupleSchemeFactory();
    // isset id assignments
    private static final int __OFFSET_ISSET_ID = 0;
    private static final int __SIZE_ISSET_ID = 1;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
            new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.BUCKET_NAME,
            new org.apache.thrift.meta_data.FieldMetaData("bucketName",
                org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PATH,
            new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.OFFSET,
            new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.SIZE,
            new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.AUTH,
            new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                    Authorization.class)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadFileRequest.class, metaDataMap);
    }

    public @org.apache.thrift.annotation.Nullable
    String bucketName; // required
    public @org.apache.thrift.annotation.Nullable
    String path; // required
    public long offset; // required
    public int size; // required
    public @org.apache.thrift.annotation.Nullable
    Authorization auth; // required
    private byte __isset_bitfield = 0;

    public ReadFileRequest() {
    }

    public ReadFileRequest(
        String bucketName,
        String path,
        long offset,
        int size,
        Authorization auth) {
        this();
        this.bucketName = bucketName;
        this.path = path;
        this.offset = offset;
        setOffsetIsSet(true);
        this.size = size;
        setSizeIsSet(true);
        this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadFileRequest(ReadFileRequest other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetBucketName()) {
            this.bucketName = other.bucketName;
        }
        if (other.isSetPath()) {
            this.path = other.path;
        }
        this.offset = other.offset;
        this.size = other.size;
        if (other.isSetAuth()) {
            this.auth = new Authorization(other.auth);
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
            TUPLE_SCHEME_FACTORY).getScheme();
    }

    public ReadFileRequest deepCopy() {
        return new ReadFileRequest(this);
    }

    @Override
    public void clear() {
        this.bucketName = null;
        this.path = null;
        setOffsetIsSet(false);
        this.offset = 0;
        setSizeIsSet(false);
        this.size = 0;
        this.auth = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getBucketName() {
        return this.bucketName;
    }

    public ReadFileRequest setBucketName(@org.apache.thrift.annotation.Nullable String bucketName) {
        this.bucketName = bucketName;
        return this;
    }

    public void unsetBucketName() {
        this.bucketName = null;
    }

    /**
     * Returns true if field bucketName is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBucketName() {
        return this.bucketName != null;
    }

    public void setBucketNameIsSet(boolean value) {
        if (!value) {
            this.bucketName = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public String getPath() {
        return this.path;
    }

    public ReadFileRequest setPath(@org.apache.thrift.annotation.Nullable String path) {
        this.path = path;
        return this;
    }

    public void unsetPath() {
        this.path = null;
    }

    /**
     * Returns true if field path is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPath() {
        return this.path != null;
    }

    public void setPathIsSet(boolean value) {
        if (!value) {
            this.path = null;
        }
    }

    public long getOffset() {
        return this.offset;
    }

    public ReadFileRequest setOffset(long offset) {
        this.offset = offset;
        setOffsetIsSet(true);
        return this;
    }

    public void unsetOffset() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /**
     * Returns true if field offset is set (has been assigned a value) and false otherwise
     */
    public boolean isSetOffset() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public int getSize() {
        return this.size;
    }

    public ReadFileRequest setSize(int size) {
        this.size = size;
        setSizeIsSet(true);
        return this;
    }

    public void unsetSize() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /**
     * Returns true if field size is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSize() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public Authorization getAuth() {
        return this.auth;
    }

    public ReadFileRequest setAuth(@org.apache.thrift.annotation.Nullable Authorization auth) {
        this.auth = auth;
        return this;
    }

    public void unsetAuth() {
        this.auth = null;
    }

    /**
     * Returns true if field auth is set (has been assigned a value) and false otherwise
     */
    public boolean isSetAuth() {
        return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
        if (!value) {
            this.auth = null;
        }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
        switch (field) {
        case BUCKET_NAME:
            if (value == null) {
                unsetBucketName();
            } else {
                setBucketName((String) value);
            }
            break;

        case PATH:
            if (value == null) {
                unsetPath();
            } else {
                setPath((String) value);
            }
            break;

        case OFFSET:
            if (value == null) {
                unsetOffset();
            } else {
                setOffset((Long) value);
            }
            break;

        case SIZE:
            if (value == null) {
                unsetSize();
            } else {
                setSize((Integer) value);
            }
            break;

        case AUTH:
            if (value == null) {
                unsetAuth();
            } else {
                setAuth((Authorization) value);
            }
            break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
        switch (field) {
        case BUCKET_NAME:
            return getBucketName();

        case PATH:
            return getPath();

        case OFFSET:
            return getOffset();

        case SIZE:
            return getSize();

        case AUTH:
            return getAuth();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case BUCKET_NAME:
            return isSetBucketName();
        case PATH:
            return isSetPath();
        case OFFSET:
            return isSetOffset();
        case SIZE:
            return isSetSize();
        case AUTH:
            return isSetAuth();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that instanceof ReadFileRequest) {
            return this.equals((ReadFileRequest) that);
        }
        return false;
    }

    public boolean equals(ReadFileRequest that) {
        if (that == null) {
            return false;
        }
        if (this == that) {
            return true;
        }

        boolean this_present_bucketName = true && this.isSetBucketName();
        boolean that_present_bucketName = true && that.isSetBucketName();
        if (this_present_bucketName || that_present_bucketName) {
            if (!(this_present_bucketName && that_present_bucketName)) {
                return false;
            }
            if (!this.bucketName.equals(that.bucketName)) {
                return false;
            }
        }

        boolean this_present_path = true && this.isSetPath();
        boolean that_present_path = true && that.isSetPath();
        if (this_present_path || that_present_path) {
            if (!(this_present_path && that_present_path)) {
                return false;
            }
            if (!this.path.equals(that.path)) {
                return false;
            }
        }

        boolean this_present_offset = true;
        boolean that_present_offset = true;
        if (this_present_offset || that_present_offset) {
            if (!(this_present_offset && that_present_offset)) {
                return false;
            }
            if (this.offset != that.offset) {
                return false;
            }
        }

        boolean this_present_size = true;
        boolean that_present_size = true;
        if (this_present_size || that_present_size) {
            if (!(this_present_size && that_present_size)) {
                return false;
            }
            if (this.size != that.size) {
                return false;
            }
        }

        boolean this_present_auth = true && this.isSetAuth();
        boolean that_present_auth = true && that.isSetAuth();
        if (this_present_auth || that_present_auth) {
            if (!(this_present_auth && that_present_auth)) {
                return false;
            }
            if (!this.auth.equals(that.auth)) {
                return false;
            }
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetBucketName()) ? 131071 : 524287);
        if (isSetBucketName()) {
            hashCode = hashCode * 8191 + bucketName.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
        if (isSetPath()) {
            hashCode = hashCode * 8191 + path.hashCode();
        }

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(offset);

        hashCode = hashCode * 8191 + size;

        hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
        if (isSetAuth()) {
            hashCode = hashCode * 8191 + auth.hashCode();
        }

        return hashCode;
    }

    @Override
    public int compareTo(ReadFileRequest other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.compare(isSetBucketName(), other.isSetBucketName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBucketName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetPath(), other.isSetPath());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPath()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetOffset(), other.isSetOffset());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOffset()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetSize(), other.isSetSize());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSize()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetAuth(), other.isSetAuth());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAuth()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ReadFileRequest(");
        boolean first = true;

        sb.append("bucketName:");
        if (this.bucketName == null) {
            sb.append("null");
        } else {
            sb.append(this.bucketName);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("path:");
        if (this.path == null) {
            sb.append("null");
        } else {
            sb.append(this.path);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("offset:");
        sb.append(this.offset);
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("size:");
        sb.append(this.size);
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("auth:");
        if (this.auth == null) {
            sb.append("null");
        } else {
            sb.append(this.auth);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (bucketName == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'bucketName' was not present! Struct: " + toString());
        }
        if (path == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'path' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'offset' because it's a primitive and you chose the non-beans generator.
        // alas, we cannot check 'size' because it's a primitive and you chose the non-beans generator.
        if (auth == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'auth' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
        if (auth != null) {
            auth.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        BUCKET_NAME((short) 1, "bucketName"),
        PATH((short) 2, "path"),
        OFFSET((short) 3, "offset"),
        SIZE((short) 4, "size"),
        AUTH((short) 5, "auth");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // BUCKET_NAME
                return BUCKET_NAME;
            case 2: // PATH
                return PATH;
            case 3: // OFFSET
                return OFFSET;
            case 4: // SIZE
                return SIZE;
            case 5: // AUTH
                return AUTH;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) {
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class ReadFileRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ReadFileRequestStandardScheme getScheme() {
            return new ReadFileRequestStandardScheme();
        }
    }

    private static class ReadFileRequestStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<ReadFileRequest> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ReadFileRequest struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                case 1: // BUCKET_NAME
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.bucketName = iprot.readString();
                        struct.setBucketNameIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 2: // PATH
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.path = iprot.readString();
                        struct.setPathIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 3: // OFFSET
                    if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                        struct.offset = iprot.readI64();
                        struct.setOffsetIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 4: // SIZE
                    if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                        struct.size = iprot.readI32();
                        struct.setSizeIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 5: // AUTH
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                        struct.auth = new Authorization();
                        struct.auth.read(iprot);
                        struct.setAuthIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetOffset()) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'offset' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetSize()) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'size' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ReadFileRequest struct)
            throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.bucketName != null) {
                oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
                oprot.writeString(struct.bucketName);
                oprot.writeFieldEnd();
            }
            if (struct.path != null) {
                oprot.writeFieldBegin(PATH_FIELD_DESC);
                oprot.writeString(struct.path);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(OFFSET_FIELD_DESC);
            oprot.writeI64(struct.offset);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(SIZE_FIELD_DESC);
            oprot.writeI32(struct.size);
            oprot.writeFieldEnd();
            if (struct.auth != null) {
                oprot.writeFieldBegin(AUTH_FIELD_DESC);
                struct.auth.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ReadFileRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ReadFileRequestTupleScheme getScheme() {
            return new ReadFileRequestTupleScheme();
        }
    }

    private static class ReadFileRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReadFileRequest> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ReadFileRequest struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            oprot.writeString(struct.bucketName);
            oprot.writeString(struct.path);
            oprot.writeI64(struct.offset);
            oprot.writeI32(struct.size);
            struct.auth.write(oprot);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ReadFileRequest struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            struct.bucketName = iprot.readString();
            struct.setBucketNameIsSet(true);
            struct.path = iprot.readString();
            struct.setPathIsSet(true);
            struct.offset = iprot.readI64();
            struct.setOffsetIsSet(true);
            struct.size = iprot.readI32();
            struct.setSizeIsSet(true);
            struct.auth = new Authorization();
            struct.auth.read(iprot);
            struct.setAuthIsSet(true);
        }
    }
}

