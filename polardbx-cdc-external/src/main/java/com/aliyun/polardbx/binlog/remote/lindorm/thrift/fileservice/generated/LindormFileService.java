/**
 * Copyright (c) 2013-Present, Alibaba Group Holding Limited.
 * All rights reserved.
 *
 * Licensed under the Server Side Public License v1 (SSPLv1).
 */
/**
 * Autogenerated by Thrift Compiler (0.14.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.aliyun.polardbx.binlog.remote.lindorm.thrift.fileservice.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-05-26")
public class LindormFileService {

    public interface Iface {

        /**
         * Create Bucket;
         * <p>
         * All files storage in a bucket, like namespace
         *
         * @return Bucket info
         * @throws AuthorizationException throw AuthorizationException when authorization failed
         * @throws IOException throw IOException when create bucket failed
         */
        public Bucket createBucket(CreateBucketRequest createBucketRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException;

        /**
         * List All Bucket you have;
         *
         * @return list of bucket you have
         * @throws AuthorizationException throw AuthorizationException when authorization failed
         * @throws IOException throw IOException when list buckets failed
         */
        public java.util.List<Bucket> listBuckets(ListBucketsRequest listBucketsRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException;

        /**
         * Delete Bucket;
         *
         * @throws AuthorizationException throw AuthorizationException when authorization failed
         * @throws IOException throw IOException when delete bucket failed
         */
        public void deleteBucket(DeleteBucketRequest deleteBucketRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException;

        /**
         * Create File
         * <p>
         * If you want create a large size file ,you need create file first, then write data, flush and complete
         *
         * @return create file response
         * @throws AuthorizationException throw AuthorizationException when authorization failed
         * @throws IOException throw IOException when create file failed
         */
        public CreateFileResponse createFile(CreateFileRequest createFileRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException;

        /**
         * Write File
         * <p>
         * Write new data to an opened file
         *
         * @return write file response
         * @throws AuthorizationException throw AuthorizationException when authorization failed
         * @throws IOException throw IOException when write file failed
         */
        public WriteFileResponse writeFile(WriteFileRequest writeFileRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException;

        /**
         * Flush File
         * <p>
         * By flush, make data visiable which already write into file
         *
         * @return flush file response
         * @throws AuthorizationException throw AuthorizationException when authorization failed
         * @throws IOException throw IOException when flush file failed
         */
        public FlushFileResponse flushFile(FlushFileRequest flushFileRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException;

        /**
         * Complete File
         * <p>
         * After complete, the file is immutable
         *
         * @return FileInfo
         * @throws AuthorizationException throw AuthorizationException when authorization failed
         * @throws IOException throw IOException when complete file failed
         */
        public FileInfo completeFile(CompleteFileRequest completeFileRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException;

        /**
         * Read File
         *
         * @return read file response
         * @throws AuthorizationException throw AuthorizationException when authorization failed
         * @throws IOException throw IOException when read file failed
         */
        public ReadFileResponse readFile(ReadFileRequest readFileRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException;

        /**
         * Put file use for little size file(size < 10MB)
         *
         * @throws AuthorizationException throw AuthorizationException when authorization failed
         * @throws IOException throw IOException when put fail failed
         */
        public FileInfo putFile(PutFileRequest putFileRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException;

        /**
         * Delete File
         *
         * @throws AuthorizationException throw AuthorizationException when authorization failed
         * @throws IOException throw IOException when delete file failed
         */
        public void deleteFile(DeleteFileRequest deleteFileRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException;

        /**
         * Get File Info
         *
         * @return FileInfo
         * @throws AuthorizationException throw AuthorizationException when authorization failed
         * @throws IOException throw IOException when get file info failed
         */
        public FileInfo getFileInfo(GetFileInfoRequest getFileInfoRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException;

        /**
         * List File Infos
         *
         * @return list of file info
         * @throws AuthorizationException throw AuthorizationException when authorization failed
         * @throws IOException throw IOException when list file infos failed
         */
        public java.util.List<FileInfo> listFileInfos(ListFileInfosRequest listFileInfosRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void createBucket(CreateBucketRequest createBucketRequest,
                                 org.apache.thrift.async.AsyncMethodCallback<Bucket> resultHandler)
            throws org.apache.thrift.TException;

        public void listBuckets(ListBucketsRequest listBucketsRequest,
                                org.apache.thrift.async.AsyncMethodCallback<java.util.List<Bucket>> resultHandler)
            throws org.apache.thrift.TException;

        public void deleteBucket(DeleteBucketRequest deleteBucketRequest,
                                 org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
            throws org.apache.thrift.TException;

        public void createFile(CreateFileRequest createFileRequest,
                               org.apache.thrift.async.AsyncMethodCallback<CreateFileResponse> resultHandler)
            throws org.apache.thrift.TException;

        public void writeFile(WriteFileRequest writeFileRequest,
                              org.apache.thrift.async.AsyncMethodCallback<WriteFileResponse> resultHandler)
            throws org.apache.thrift.TException;

        public void flushFile(FlushFileRequest flushFileRequest,
                              org.apache.thrift.async.AsyncMethodCallback<FlushFileResponse> resultHandler)
            throws org.apache.thrift.TException;

        public void completeFile(CompleteFileRequest completeFileRequest,
                                 org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler)
            throws org.apache.thrift.TException;

        public void readFile(ReadFileRequest readFileRequest,
                             org.apache.thrift.async.AsyncMethodCallback<ReadFileResponse> resultHandler)
            throws org.apache.thrift.TException;

        public void putFile(PutFileRequest putFileRequest,
                            org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler)
            throws org.apache.thrift.TException;

        public void deleteFile(DeleteFileRequest deleteFileRequest,
                               org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
            throws org.apache.thrift.TException;

        public void getFileInfo(GetFileInfoRequest getFileInfoRequest,
                                org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler)
            throws org.apache.thrift.TException;

        public void listFileInfos(ListFileInfosRequest listFileInfosRequest,
                                  org.apache.thrift.async.AsyncMethodCallback<java.util.List<FileInfo>> resultHandler)
            throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public Bucket createBucket(CreateBucketRequest createBucketRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException {
            send_createBucket(createBucketRequest);
            return recv_createBucket();
        }

        public void send_createBucket(CreateBucketRequest createBucketRequest) throws org.apache.thrift.TException {
            createBucket_args args = new createBucket_args();
            args.setCreateBucketRequest(createBucketRequest);
            sendBase("createBucket", args);
        }

        public Bucket recv_createBucket() throws AuthorizationError, IOError, org.apache.thrift.TException {
            createBucket_result result = new createBucket_result();
            receiveBase(result, "createBucket");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.authError != null) {
                throw result.authError;
            }
            if (result.io != null) {
                throw result.io;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                "createBucket failed: unknown result");
        }

        public java.util.List<Bucket> listBuckets(ListBucketsRequest listBucketsRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException {
            send_listBuckets(listBucketsRequest);
            return recv_listBuckets();
        }

        public void send_listBuckets(ListBucketsRequest listBucketsRequest) throws org.apache.thrift.TException {
            listBuckets_args args = new listBuckets_args();
            args.setListBucketsRequest(listBucketsRequest);
            sendBase("listBuckets", args);
        }

        public java.util.List<Bucket> recv_listBuckets()
            throws AuthorizationError, IOError, org.apache.thrift.TException {
            listBuckets_result result = new listBuckets_result();
            receiveBase(result, "listBuckets");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.authError != null) {
                throw result.authError;
            }
            if (result.io != null) {
                throw result.io;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                "listBuckets failed: unknown result");
        }

        public void deleteBucket(DeleteBucketRequest deleteBucketRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException {
            send_deleteBucket(deleteBucketRequest);
            recv_deleteBucket();
        }

        public void send_deleteBucket(DeleteBucketRequest deleteBucketRequest) throws org.apache.thrift.TException {
            deleteBucket_args args = new deleteBucket_args();
            args.setDeleteBucketRequest(deleteBucketRequest);
            sendBase("deleteBucket", args);
        }

        public void recv_deleteBucket() throws AuthorizationError, IOError, org.apache.thrift.TException {
            deleteBucket_result result = new deleteBucket_result();
            receiveBase(result, "deleteBucket");
            if (result.authError != null) {
                throw result.authError;
            }
            if (result.io != null) {
                throw result.io;
            }
            return;
        }

        public CreateFileResponse createFile(CreateFileRequest createFileRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException {
            send_createFile(createFileRequest);
            return recv_createFile();
        }

        public void send_createFile(CreateFileRequest createFileRequest) throws org.apache.thrift.TException {
            createFile_args args = new createFile_args();
            args.setCreateFileRequest(createFileRequest);
            sendBase("createFile", args);
        }

        public CreateFileResponse recv_createFile() throws AuthorizationError, IOError, org.apache.thrift.TException {
            createFile_result result = new createFile_result();
            receiveBase(result, "createFile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.authError != null) {
                throw result.authError;
            }
            if (result.io != null) {
                throw result.io;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                "createFile failed: unknown result");
        }

        public WriteFileResponse writeFile(WriteFileRequest writeFileRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException {
            send_writeFile(writeFileRequest);
            return recv_writeFile();
        }

        public void send_writeFile(WriteFileRequest writeFileRequest) throws org.apache.thrift.TException {
            writeFile_args args = new writeFile_args();
            args.setWriteFileRequest(writeFileRequest);
            sendBase("writeFile", args);
        }

        public WriteFileResponse recv_writeFile() throws AuthorizationError, IOError, org.apache.thrift.TException {
            writeFile_result result = new writeFile_result();
            receiveBase(result, "writeFile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.authError != null) {
                throw result.authError;
            }
            if (result.io != null) {
                throw result.io;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                "writeFile failed: unknown result");
        }

        public FlushFileResponse flushFile(FlushFileRequest flushFileRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException {
            send_flushFile(flushFileRequest);
            return recv_flushFile();
        }

        public void send_flushFile(FlushFileRequest flushFileRequest) throws org.apache.thrift.TException {
            flushFile_args args = new flushFile_args();
            args.setFlushFileRequest(flushFileRequest);
            sendBase("flushFile", args);
        }

        public FlushFileResponse recv_flushFile() throws AuthorizationError, IOError, org.apache.thrift.TException {
            flushFile_result result = new flushFile_result();
            receiveBase(result, "flushFile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.authError != null) {
                throw result.authError;
            }
            if (result.io != null) {
                throw result.io;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                "flushFile failed: unknown result");
        }

        public FileInfo completeFile(CompleteFileRequest completeFileRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException {
            send_completeFile(completeFileRequest);
            return recv_completeFile();
        }

        public void send_completeFile(CompleteFileRequest completeFileRequest) throws org.apache.thrift.TException {
            completeFile_args args = new completeFile_args();
            args.setCompleteFileRequest(completeFileRequest);
            sendBase("completeFile", args);
        }

        public FileInfo recv_completeFile() throws AuthorizationError, IOError, org.apache.thrift.TException {
            completeFile_result result = new completeFile_result();
            receiveBase(result, "completeFile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.authError != null) {
                throw result.authError;
            }
            if (result.io != null) {
                throw result.io;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                "completeFile failed: unknown result");
        }

        public ReadFileResponse readFile(ReadFileRequest readFileRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException {
            send_readFile(readFileRequest);
            return recv_readFile();
        }

        public void send_readFile(ReadFileRequest readFileRequest) throws org.apache.thrift.TException {
            readFile_args args = new readFile_args();
            args.setReadFileRequest(readFileRequest);
            sendBase("readFile", args);
        }

        public ReadFileResponse recv_readFile() throws AuthorizationError, IOError, org.apache.thrift.TException {
            readFile_result result = new readFile_result();
            receiveBase(result, "readFile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.authError != null) {
                throw result.authError;
            }
            if (result.io != null) {
                throw result.io;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                "readFile failed: unknown result");
        }

        public FileInfo putFile(PutFileRequest putFileRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException {
            send_putFile(putFileRequest);
            return recv_putFile();
        }

        public void send_putFile(PutFileRequest putFileRequest) throws org.apache.thrift.TException {
            putFile_args args = new putFile_args();
            args.setPutFileRequest(putFileRequest);
            sendBase("putFile", args);
        }

        public FileInfo recv_putFile() throws AuthorizationError, IOError, org.apache.thrift.TException {
            putFile_result result = new putFile_result();
            receiveBase(result, "putFile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.authError != null) {
                throw result.authError;
            }
            if (result.io != null) {
                throw result.io;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                "putFile failed: unknown result");
        }

        public void deleteFile(DeleteFileRequest deleteFileRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException {
            send_deleteFile(deleteFileRequest);
            recv_deleteFile();
        }

        public void send_deleteFile(DeleteFileRequest deleteFileRequest) throws org.apache.thrift.TException {
            deleteFile_args args = new deleteFile_args();
            args.setDeleteFileRequest(deleteFileRequest);
            sendBase("deleteFile", args);
        }

        public void recv_deleteFile() throws AuthorizationError, IOError, org.apache.thrift.TException {
            deleteFile_result result = new deleteFile_result();
            receiveBase(result, "deleteFile");
            if (result.authError != null) {
                throw result.authError;
            }
            if (result.io != null) {
                throw result.io;
            }
            return;
        }

        public FileInfo getFileInfo(GetFileInfoRequest getFileInfoRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException {
            send_getFileInfo(getFileInfoRequest);
            return recv_getFileInfo();
        }

        public void send_getFileInfo(GetFileInfoRequest getFileInfoRequest) throws org.apache.thrift.TException {
            getFileInfo_args args = new getFileInfo_args();
            args.setGetFileInfoRequest(getFileInfoRequest);
            sendBase("getFileInfo", args);
        }

        public FileInfo recv_getFileInfo() throws AuthorizationError, IOError, org.apache.thrift.TException {
            getFileInfo_result result = new getFileInfo_result();
            receiveBase(result, "getFileInfo");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.authError != null) {
                throw result.authError;
            }
            if (result.io != null) {
                throw result.io;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                "getFileInfo failed: unknown result");
        }

        public java.util.List<FileInfo> listFileInfos(ListFileInfosRequest listFileInfosRequest)
            throws AuthorizationError, IOError, org.apache.thrift.TException {
            send_listFileInfos(listFileInfosRequest);
            return recv_listFileInfos();
        }

        public void send_listFileInfos(ListFileInfosRequest listFileInfosRequest) throws org.apache.thrift.TException {
            listFileInfos_args args = new listFileInfos_args();
            args.setListFileInfosRequest(listFileInfosRequest);
            sendBase("listFileInfos", args);
        }

        public java.util.List<FileInfo> recv_listFileInfos()
            throws AuthorizationError, IOError, org.apache.thrift.TException {
            listFileInfos_result result = new listFileInfos_result();
            receiveBase(result, "listFileInfos");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.authError != null) {
                throw result.authError;
            }
            if (result.io != null) {
                throw result.io;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                "listFileInfos failed: unknown result");
        }

        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
                                    org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                           org.apache.thrift.async.TAsyncClientManager clientManager,
                           org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void createBucket(CreateBucketRequest createBucketRequest,
                                 org.apache.thrift.async.AsyncMethodCallback<Bucket> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            createBucket_call method_call =
                new createBucket_call(createBucketRequest, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void listBuckets(ListBucketsRequest listBucketsRequest,
                                org.apache.thrift.async.AsyncMethodCallback<java.util.List<Bucket>> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            listBuckets_call method_call =
                new listBuckets_call(listBucketsRequest, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void deleteBucket(DeleteBucketRequest deleteBucketRequest,
                                 org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            deleteBucket_call method_call =
                new deleteBucket_call(deleteBucketRequest, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void createFile(CreateFileRequest createFileRequest,
                               org.apache.thrift.async.AsyncMethodCallback<CreateFileResponse> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            createFile_call method_call =
                new createFile_call(createFileRequest, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void writeFile(WriteFileRequest writeFileRequest,
                              org.apache.thrift.async.AsyncMethodCallback<WriteFileResponse> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            writeFile_call method_call =
                new writeFile_call(writeFileRequest, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void flushFile(FlushFileRequest flushFileRequest,
                              org.apache.thrift.async.AsyncMethodCallback<FlushFileResponse> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            flushFile_call method_call =
                new flushFile_call(flushFileRequest, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void completeFile(CompleteFileRequest completeFileRequest,
                                 org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            completeFile_call method_call =
                new completeFile_call(completeFileRequest, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void readFile(ReadFileRequest readFileRequest,
                             org.apache.thrift.async.AsyncMethodCallback<ReadFileResponse> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            readFile_call method_call =
                new readFile_call(readFileRequest, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void putFile(PutFileRequest putFileRequest,
                            org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            putFile_call method_call =
                new putFile_call(putFileRequest, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void deleteFile(DeleteFileRequest deleteFileRequest,
                               org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            deleteFile_call method_call =
                new deleteFile_call(deleteFileRequest, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void getFileInfo(GetFileInfoRequest getFileInfoRequest,
                                org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            getFileInfo_call method_call =
                new getFileInfo_call(getFileInfoRequest, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void listFileInfos(ListFileInfosRequest listFileInfosRequest,
                                  org.apache.thrift.async.AsyncMethodCallback<java.util.List<FileInfo>> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            listFileInfos_call method_call =
                new listFileInfos_call(listFileInfosRequest, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
                           org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public static class createBucket_call extends org.apache.thrift.async.TAsyncMethodCall<Bucket> {
            private CreateBucketRequest createBucketRequest;

            public createBucket_call(CreateBucketRequest createBucketRequest,
                                     org.apache.thrift.async.AsyncMethodCallback<Bucket> resultHandler,
                                     org.apache.thrift.async.TAsyncClient client,
                                     org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                                     org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.createBucketRequest = createBucketRequest;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage("createBucket",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                createBucket_args args = new createBucket_args();
                args.setCreateBucketRequest(createBucketRequest);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Bucket getResult() throws AuthorizationError, IOError, org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_createBucket();
            }
        }

        public static class listBuckets_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Bucket>> {
            private ListBucketsRequest listBucketsRequest;

            public listBuckets_call(ListBucketsRequest listBucketsRequest,
                                    org.apache.thrift.async.AsyncMethodCallback<java.util.List<Bucket>> resultHandler,
                                    org.apache.thrift.async.TAsyncClient client,
                                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                                    org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.listBucketsRequest = listBucketsRequest;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage("listBuckets", org.apache.thrift.protocol.TMessageType.CALL,
                        0));
                listBuckets_args args = new listBuckets_args();
                args.setListBucketsRequest(listBucketsRequest);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<Bucket> getResult() throws AuthorizationError, IOError, org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_listBuckets();
            }
        }

        public static class deleteBucket_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private DeleteBucketRequest deleteBucketRequest;

            public deleteBucket_call(DeleteBucketRequest deleteBucketRequest,
                                     org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler,
                                     org.apache.thrift.async.TAsyncClient client,
                                     org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                                     org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.deleteBucketRequest = deleteBucketRequest;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage("deleteBucket",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                deleteBucket_args args = new deleteBucket_args();
                args.setDeleteBucketRequest(deleteBucketRequest);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws AuthorizationError, IOError, org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public static class createFile_call extends org.apache.thrift.async.TAsyncMethodCall<CreateFileResponse> {
            private CreateFileRequest createFileRequest;

            public createFile_call(CreateFileRequest createFileRequest,
                                   org.apache.thrift.async.AsyncMethodCallback<CreateFileResponse> resultHandler,
                                   org.apache.thrift.async.TAsyncClient client,
                                   org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                                   org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.createFileRequest = createFileRequest;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage("createFile", org.apache.thrift.protocol.TMessageType.CALL,
                        0));
                createFile_args args = new createFile_args();
                args.setCreateFileRequest(createFileRequest);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public CreateFileResponse getResult() throws AuthorizationError, IOError, org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_createFile();
            }
        }

        public static class writeFile_call extends org.apache.thrift.async.TAsyncMethodCall<WriteFileResponse> {
            private WriteFileRequest writeFileRequest;

            public writeFile_call(WriteFileRequest writeFileRequest,
                                  org.apache.thrift.async.AsyncMethodCallback<WriteFileResponse> resultHandler,
                                  org.apache.thrift.async.TAsyncClient client,
                                  org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                                  org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.writeFileRequest = writeFileRequest;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage("writeFile", org.apache.thrift.protocol.TMessageType.CALL,
                        0));
                writeFile_args args = new writeFile_args();
                args.setWriteFileRequest(writeFileRequest);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public WriteFileResponse getResult() throws AuthorizationError, IOError, org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_writeFile();
            }
        }

        public static class flushFile_call extends org.apache.thrift.async.TAsyncMethodCall<FlushFileResponse> {
            private FlushFileRequest flushFileRequest;

            public flushFile_call(FlushFileRequest flushFileRequest,
                                  org.apache.thrift.async.AsyncMethodCallback<FlushFileResponse> resultHandler,
                                  org.apache.thrift.async.TAsyncClient client,
                                  org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                                  org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.flushFileRequest = flushFileRequest;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage("flushFile", org.apache.thrift.protocol.TMessageType.CALL,
                        0));
                flushFile_args args = new flushFile_args();
                args.setFlushFileRequest(flushFileRequest);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public FlushFileResponse getResult() throws AuthorizationError, IOError, org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_flushFile();
            }
        }

        public static class completeFile_call extends org.apache.thrift.async.TAsyncMethodCall<FileInfo> {
            private CompleteFileRequest completeFileRequest;

            public completeFile_call(CompleteFileRequest completeFileRequest,
                                     org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler,
                                     org.apache.thrift.async.TAsyncClient client,
                                     org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                                     org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.completeFileRequest = completeFileRequest;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage("completeFile",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                completeFile_args args = new completeFile_args();
                args.setCompleteFileRequest(completeFileRequest);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public FileInfo getResult() throws AuthorizationError, IOError, org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_completeFile();
            }
        }

        public static class readFile_call extends org.apache.thrift.async.TAsyncMethodCall<ReadFileResponse> {
            private ReadFileRequest readFileRequest;

            public readFile_call(ReadFileRequest readFileRequest,
                                 org.apache.thrift.async.AsyncMethodCallback<ReadFileResponse> resultHandler,
                                 org.apache.thrift.async.TAsyncClient client,
                                 org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                                 org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.readFileRequest = readFileRequest;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage("readFile", org.apache.thrift.protocol.TMessageType.CALL,
                        0));
                readFile_args args = new readFile_args();
                args.setReadFileRequest(readFileRequest);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public ReadFileResponse getResult() throws AuthorizationError, IOError, org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_readFile();
            }
        }

        public static class putFile_call extends org.apache.thrift.async.TAsyncMethodCall<FileInfo> {
            private PutFileRequest putFileRequest;

            public putFile_call(PutFileRequest putFileRequest,
                                org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler,
                                org.apache.thrift.async.TAsyncClient client,
                                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.putFileRequest = putFileRequest;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage("putFile", org.apache.thrift.protocol.TMessageType.CALL,
                        0));
                putFile_args args = new putFile_args();
                args.setPutFileRequest(putFileRequest);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public FileInfo getResult() throws AuthorizationError, IOError, org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_putFile();
            }
        }

        public static class deleteFile_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private DeleteFileRequest deleteFileRequest;

            public deleteFile_call(DeleteFileRequest deleteFileRequest,
                                   org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler,
                                   org.apache.thrift.async.TAsyncClient client,
                                   org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                                   org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.deleteFileRequest = deleteFileRequest;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage("deleteFile", org.apache.thrift.protocol.TMessageType.CALL,
                        0));
                deleteFile_args args = new deleteFile_args();
                args.setDeleteFileRequest(deleteFileRequest);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws AuthorizationError, IOError, org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public static class getFileInfo_call extends org.apache.thrift.async.TAsyncMethodCall<FileInfo> {
            private GetFileInfoRequest getFileInfoRequest;

            public getFileInfo_call(GetFileInfoRequest getFileInfoRequest,
                                    org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler,
                                    org.apache.thrift.async.TAsyncClient client,
                                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                                    org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.getFileInfoRequest = getFileInfoRequest;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage("getFileInfo", org.apache.thrift.protocol.TMessageType.CALL,
                        0));
                getFileInfo_args args = new getFileInfo_args();
                args.setGetFileInfoRequest(getFileInfoRequest);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public FileInfo getResult() throws AuthorizationError, IOError, org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getFileInfo();
            }
        }

        public static class listFileInfos_call
            extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<FileInfo>> {
            private ListFileInfosRequest listFileInfosRequest;

            public listFileInfos_call(ListFileInfosRequest listFileInfosRequest,
                                      org.apache.thrift.async.AsyncMethodCallback<java.util.List<FileInfo>> resultHandler,
                                      org.apache.thrift.async.TAsyncClient client,
                                      org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                                      org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.listFileInfosRequest = listFileInfosRequest;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage("listFileInfos",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                listFileInfos_args args = new listFileInfos_args();
                args.setListFileInfosRequest(listFileInfosRequest);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<FileInfo> getResult()
                throws AuthorizationError, IOError, org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_listFileInfos();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
        implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(
                new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface,
                            java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
            java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("createBucket", new createBucket());
            processMap.put("listBuckets", new listBuckets());
            processMap.put("deleteBucket", new deleteBucket());
            processMap.put("createFile", new createFile());
            processMap.put("writeFile", new writeFile());
            processMap.put("flushFile", new flushFile());
            processMap.put("completeFile", new completeFile());
            processMap.put("readFile", new readFile());
            processMap.put("putFile", new putFile());
            processMap.put("deleteFile", new deleteFile());
            processMap.put("getFileInfo", new getFileInfo());
            processMap.put("listFileInfos", new listFileInfos());
            return processMap;
        }

        public static class createBucket<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, createBucket_args> {
            public createBucket() {
                super("createBucket");
            }

            public createBucket_args getEmptyArgsInstance() {
                return new createBucket_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public createBucket_result getResult(I iface, createBucket_args args) throws org.apache.thrift.TException {
                createBucket_result result = new createBucket_result();
                try {
                    result.success = iface.createBucket(args.createBucketRequest);
                } catch (AuthorizationError authError) {
                    result.authError = authError;
                } catch (IOError io) {
                    result.io = io;
                }
                return result;
            }
        }

        public static class listBuckets<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, listBuckets_args> {
            public listBuckets() {
                super("listBuckets");
            }

            public listBuckets_args getEmptyArgsInstance() {
                return new listBuckets_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public listBuckets_result getResult(I iface, listBuckets_args args) throws org.apache.thrift.TException {
                listBuckets_result result = new listBuckets_result();
                try {
                    result.success = iface.listBuckets(args.listBucketsRequest);
                } catch (AuthorizationError authError) {
                    result.authError = authError;
                } catch (IOError io) {
                    result.io = io;
                }
                return result;
            }
        }

        public static class deleteBucket<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, deleteBucket_args> {
            public deleteBucket() {
                super("deleteBucket");
            }

            public deleteBucket_args getEmptyArgsInstance() {
                return new deleteBucket_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public deleteBucket_result getResult(I iface, deleteBucket_args args) throws org.apache.thrift.TException {
                deleteBucket_result result = new deleteBucket_result();
                try {
                    iface.deleteBucket(args.deleteBucketRequest);
                } catch (AuthorizationError authError) {
                    result.authError = authError;
                } catch (IOError io) {
                    result.io = io;
                }
                return result;
            }
        }

        public static class createFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createFile_args> {
            public createFile() {
                super("createFile");
            }

            public createFile_args getEmptyArgsInstance() {
                return new createFile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public createFile_result getResult(I iface, createFile_args args) throws org.apache.thrift.TException {
                createFile_result result = new createFile_result();
                try {
                    result.success = iface.createFile(args.createFileRequest);
                } catch (AuthorizationError authError) {
                    result.authError = authError;
                } catch (IOError io) {
                    result.io = io;
                }
                return result;
            }
        }

        public static class writeFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeFile_args> {
            public writeFile() {
                super("writeFile");
            }

            public writeFile_args getEmptyArgsInstance() {
                return new writeFile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public writeFile_result getResult(I iface, writeFile_args args) throws org.apache.thrift.TException {
                writeFile_result result = new writeFile_result();
                try {
                    result.success = iface.writeFile(args.writeFileRequest);
                } catch (AuthorizationError authError) {
                    result.authError = authError;
                } catch (IOError io) {
                    result.io = io;
                }
                return result;
            }
        }

        public static class flushFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, flushFile_args> {
            public flushFile() {
                super("flushFile");
            }

            public flushFile_args getEmptyArgsInstance() {
                return new flushFile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public flushFile_result getResult(I iface, flushFile_args args) throws org.apache.thrift.TException {
                flushFile_result result = new flushFile_result();
                try {
                    result.success = iface.flushFile(args.flushFileRequest);
                } catch (AuthorizationError authError) {
                    result.authError = authError;
                } catch (IOError io) {
                    result.io = io;
                }
                return result;
            }
        }

        public static class completeFile<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, completeFile_args> {
            public completeFile() {
                super("completeFile");
            }

            public completeFile_args getEmptyArgsInstance() {
                return new completeFile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public completeFile_result getResult(I iface, completeFile_args args) throws org.apache.thrift.TException {
                completeFile_result result = new completeFile_result();
                try {
                    result.success = iface.completeFile(args.completeFileRequest);
                } catch (AuthorizationError authError) {
                    result.authError = authError;
                } catch (IOError io) {
                    result.io = io;
                }
                return result;
            }
        }

        public static class readFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readFile_args> {
            public readFile() {
                super("readFile");
            }

            public readFile_args getEmptyArgsInstance() {
                return new readFile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public readFile_result getResult(I iface, readFile_args args) throws org.apache.thrift.TException {
                readFile_result result = new readFile_result();
                try {
                    result.success = iface.readFile(args.readFileRequest);
                } catch (AuthorizationError authError) {
                    result.authError = authError;
                } catch (IOError io) {
                    result.io = io;
                }
                return result;
            }
        }

        public static class putFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putFile_args> {
            public putFile() {
                super("putFile");
            }

            public putFile_args getEmptyArgsInstance() {
                return new putFile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public putFile_result getResult(I iface, putFile_args args) throws org.apache.thrift.TException {
                putFile_result result = new putFile_result();
                try {
                    result.success = iface.putFile(args.putFileRequest);
                } catch (AuthorizationError authError) {
                    result.authError = authError;
                } catch (IOError io) {
                    result.io = io;
                }
                return result;
            }
        }

        public static class deleteFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFile_args> {
            public deleteFile() {
                super("deleteFile");
            }

            public deleteFile_args getEmptyArgsInstance() {
                return new deleteFile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public deleteFile_result getResult(I iface, deleteFile_args args) throws org.apache.thrift.TException {
                deleteFile_result result = new deleteFile_result();
                try {
                    iface.deleteFile(args.deleteFileRequest);
                } catch (AuthorizationError authError) {
                    result.authError = authError;
                } catch (IOError io) {
                    result.io = io;
                }
                return result;
            }
        }

        public static class getFileInfo<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, getFileInfo_args> {
            public getFileInfo() {
                super("getFileInfo");
            }

            public getFileInfo_args getEmptyArgsInstance() {
                return new getFileInfo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public getFileInfo_result getResult(I iface, getFileInfo_args args) throws org.apache.thrift.TException {
                getFileInfo_result result = new getFileInfo_result();
                try {
                    result.success = iface.getFileInfo(args.getFileInfoRequest);
                } catch (AuthorizationError authError) {
                    result.authError = authError;
                } catch (IOError io) {
                    result.io = io;
                }
                return result;
            }
        }

        public static class listFileInfos<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, listFileInfos_args> {
            public listFileInfos() {
                super("listFileInfos");
            }

            public listFileInfos_args getEmptyArgsInstance() {
                return new listFileInfos_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public listFileInfos_result getResult(I iface, listFileInfos_args args)
                throws org.apache.thrift.TException {
                listFileInfos_result result = new listFileInfos_result();
                try {
                    result.success = iface.listFileInfos(args.listFileInfosRequest);
                } catch (AuthorizationError authError) {
                    result.authError = authError;
                } catch (IOError io) {
                    result.io = io;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER =
            org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(
                new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface,
                                 java.util.Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
            java.util.Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("createBucket", new createBucket());
            processMap.put("listBuckets", new listBuckets());
            processMap.put("deleteBucket", new deleteBucket());
            processMap.put("createFile", new createFile());
            processMap.put("writeFile", new writeFile());
            processMap.put("flushFile", new flushFile());
            processMap.put("completeFile", new completeFile());
            processMap.put("readFile", new readFile());
            processMap.put("putFile", new putFile());
            processMap.put("deleteFile", new deleteFile());
            processMap.put("getFileInfo", new getFileInfo());
            processMap.put("listFileInfos", new listFileInfos());
            return processMap;
        }

        public static class createBucket<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, createBucket_args, Bucket> {
            public createBucket() {
                super("createBucket");
            }

            public createBucket_args getEmptyArgsInstance() {
                return new createBucket_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Bucket> getResultHandler(
                final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Bucket>() {
                    public void onComplete(Bucket o) {
                        createBucket_result result = new createBucket_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        createBucket_result result = new createBucket_result();
                        if (e instanceof AuthorizationError) {
                            result.authError = (AuthorizationError) e;
                            result.setAuthErrorIsSet(true);
                            msg = result;
                        } else if (e instanceof IOError) {
                            result.io = (IOError) e;
                            result.setIoIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(
                                org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, createBucket_args args,
                              org.apache.thrift.async.AsyncMethodCallback<Bucket> resultHandler)
                throws org.apache.thrift.TException {
                iface.createBucket(args.createBucketRequest, resultHandler);
            }
        }

        public static class listBuckets<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, listBuckets_args, java.util.List<Bucket>> {
            public listBuckets() {
                super("listBuckets");
            }

            public listBuckets_args getEmptyArgsInstance() {
                return new listBuckets_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Bucket>> getResultHandler(
                final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Bucket>>() {
                    public void onComplete(java.util.List<Bucket> o) {
                        listBuckets_result result = new listBuckets_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        listBuckets_result result = new listBuckets_result();
                        if (e instanceof AuthorizationError) {
                            result.authError = (AuthorizationError) e;
                            result.setAuthErrorIsSet(true);
                            msg = result;
                        } else if (e instanceof IOError) {
                            result.io = (IOError) e;
                            result.setIoIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(
                                org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, listBuckets_args args,
                              org.apache.thrift.async.AsyncMethodCallback<java.util.List<Bucket>> resultHandler)
                throws org.apache.thrift.TException {
                iface.listBuckets(args.listBucketsRequest, resultHandler);
            }
        }

        public static class deleteBucket<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, deleteBucket_args, Void> {
            public deleteBucket() {
                super("deleteBucket");
            }

            public deleteBucket_args getEmptyArgsInstance() {
                return new deleteBucket_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(
                final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        deleteBucket_result result = new deleteBucket_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        deleteBucket_result result = new deleteBucket_result();
                        if (e instanceof AuthorizationError) {
                            result.authError = (AuthorizationError) e;
                            result.setAuthErrorIsSet(true);
                            msg = result;
                        } else if (e instanceof IOError) {
                            result.io = (IOError) e;
                            result.setIoIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(
                                org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, deleteBucket_args args,
                              org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
                throws org.apache.thrift.TException {
                iface.deleteBucket(args.deleteBucketRequest, resultHandler);
            }
        }

        public static class createFile<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, createFile_args, CreateFileResponse> {
            public createFile() {
                super("createFile");
            }

            public createFile_args getEmptyArgsInstance() {
                return new createFile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<CreateFileResponse> getResultHandler(
                final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<CreateFileResponse>() {
                    public void onComplete(CreateFileResponse o) {
                        createFile_result result = new createFile_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        createFile_result result = new createFile_result();
                        if (e instanceof AuthorizationError) {
                            result.authError = (AuthorizationError) e;
                            result.setAuthErrorIsSet(true);
                            msg = result;
                        } else if (e instanceof IOError) {
                            result.io = (IOError) e;
                            result.setIoIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(
                                org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, createFile_args args,
                              org.apache.thrift.async.AsyncMethodCallback<CreateFileResponse> resultHandler)
                throws org.apache.thrift.TException {
                iface.createFile(args.createFileRequest, resultHandler);
            }
        }

        public static class writeFile<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, writeFile_args, WriteFileResponse> {
            public writeFile() {
                super("writeFile");
            }

            public writeFile_args getEmptyArgsInstance() {
                return new writeFile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<WriteFileResponse> getResultHandler(
                final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<WriteFileResponse>() {
                    public void onComplete(WriteFileResponse o) {
                        writeFile_result result = new writeFile_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        writeFile_result result = new writeFile_result();
                        if (e instanceof AuthorizationError) {
                            result.authError = (AuthorizationError) e;
                            result.setAuthErrorIsSet(true);
                            msg = result;
                        } else if (e instanceof IOError) {
                            result.io = (IOError) e;
                            result.setIoIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(
                                org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, writeFile_args args,
                              org.apache.thrift.async.AsyncMethodCallback<WriteFileResponse> resultHandler)
                throws org.apache.thrift.TException {
                iface.writeFile(args.writeFileRequest, resultHandler);
            }
        }

        public static class flushFile<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, flushFile_args, FlushFileResponse> {
            public flushFile() {
                super("flushFile");
            }

            public flushFile_args getEmptyArgsInstance() {
                return new flushFile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<FlushFileResponse> getResultHandler(
                final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<FlushFileResponse>() {
                    public void onComplete(FlushFileResponse o) {
                        flushFile_result result = new flushFile_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        flushFile_result result = new flushFile_result();
                        if (e instanceof AuthorizationError) {
                            result.authError = (AuthorizationError) e;
                            result.setAuthErrorIsSet(true);
                            msg = result;
                        } else if (e instanceof IOError) {
                            result.io = (IOError) e;
                            result.setIoIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(
                                org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, flushFile_args args,
                              org.apache.thrift.async.AsyncMethodCallback<FlushFileResponse> resultHandler)
                throws org.apache.thrift.TException {
                iface.flushFile(args.flushFileRequest, resultHandler);
            }
        }

        public static class completeFile<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, completeFile_args, FileInfo> {
            public completeFile() {
                super("completeFile");
            }

            public completeFile_args getEmptyArgsInstance() {
                return new completeFile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<FileInfo> getResultHandler(
                final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<FileInfo>() {
                    public void onComplete(FileInfo o) {
                        completeFile_result result = new completeFile_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        completeFile_result result = new completeFile_result();
                        if (e instanceof AuthorizationError) {
                            result.authError = (AuthorizationError) e;
                            result.setAuthErrorIsSet(true);
                            msg = result;
                        } else if (e instanceof IOError) {
                            result.io = (IOError) e;
                            result.setIoIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(
                                org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, completeFile_args args,
                              org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler)
                throws org.apache.thrift.TException {
                iface.completeFile(args.completeFileRequest, resultHandler);
            }
        }

        public static class readFile<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, readFile_args, ReadFileResponse> {
            public readFile() {
                super("readFile");
            }

            public readFile_args getEmptyArgsInstance() {
                return new readFile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<ReadFileResponse> getResultHandler(
                final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<ReadFileResponse>() {
                    public void onComplete(ReadFileResponse o) {
                        readFile_result result = new readFile_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        readFile_result result = new readFile_result();
                        if (e instanceof AuthorizationError) {
                            result.authError = (AuthorizationError) e;
                            result.setAuthErrorIsSet(true);
                            msg = result;
                        } else if (e instanceof IOError) {
                            result.io = (IOError) e;
                            result.setIoIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(
                                org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, readFile_args args,
                              org.apache.thrift.async.AsyncMethodCallback<ReadFileResponse> resultHandler)
                throws org.apache.thrift.TException {
                iface.readFile(args.readFileRequest, resultHandler);
            }
        }

        public static class putFile<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, putFile_args, FileInfo> {
            public putFile() {
                super("putFile");
            }

            public putFile_args getEmptyArgsInstance() {
                return new putFile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<FileInfo> getResultHandler(
                final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<FileInfo>() {
                    public void onComplete(FileInfo o) {
                        putFile_result result = new putFile_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        putFile_result result = new putFile_result();
                        if (e instanceof AuthorizationError) {
                            result.authError = (AuthorizationError) e;
                            result.setAuthErrorIsSet(true);
                            msg = result;
                        } else if (e instanceof IOError) {
                            result.io = (IOError) e;
                            result.setIoIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(
                                org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, putFile_args args,
                              org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler)
                throws org.apache.thrift.TException {
                iface.putFile(args.putFileRequest, resultHandler);
            }
        }

        public static class deleteFile<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, deleteFile_args, Void> {
            public deleteFile() {
                super("deleteFile");
            }

            public deleteFile_args getEmptyArgsInstance() {
                return new deleteFile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(
                final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        deleteFile_result result = new deleteFile_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        deleteFile_result result = new deleteFile_result();
                        if (e instanceof AuthorizationError) {
                            result.authError = (AuthorizationError) e;
                            result.setAuthErrorIsSet(true);
                            msg = result;
                        } else if (e instanceof IOError) {
                            result.io = (IOError) e;
                            result.setIoIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(
                                org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, deleteFile_args args,
                              org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
                throws org.apache.thrift.TException {
                iface.deleteFile(args.deleteFileRequest, resultHandler);
            }
        }

        public static class getFileInfo<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, getFileInfo_args, FileInfo> {
            public getFileInfo() {
                super("getFileInfo");
            }

            public getFileInfo_args getEmptyArgsInstance() {
                return new getFileInfo_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<FileInfo> getResultHandler(
                final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<FileInfo>() {
                    public void onComplete(FileInfo o) {
                        getFileInfo_result result = new getFileInfo_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getFileInfo_result result = new getFileInfo_result();
                        if (e instanceof AuthorizationError) {
                            result.authError = (AuthorizationError) e;
                            result.setAuthErrorIsSet(true);
                            msg = result;
                        } else if (e instanceof IOError) {
                            result.io = (IOError) e;
                            result.setIoIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(
                                org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getFileInfo_args args,
                              org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler)
                throws org.apache.thrift.TException {
                iface.getFileInfo(args.getFileInfoRequest, resultHandler);
            }
        }

        public static class listFileInfos<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, listFileInfos_args, java.util.List<FileInfo>> {
            public listFileInfos() {
                super("listFileInfos");
            }

            public listFileInfos_args getEmptyArgsInstance() {
                return new listFileInfos_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<FileInfo>> getResultHandler(
                final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<FileInfo>>() {
                    public void onComplete(java.util.List<FileInfo> o) {
                        listFileInfos_result result = new listFileInfos_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        listFileInfos_result result = new listFileInfos_result();
                        if (e instanceof AuthorizationError) {
                            result.authError = (AuthorizationError) e;
                            result.setAuthErrorIsSet(true);
                            msg = result;
                        } else if (e instanceof IOError) {
                            result.io = (IOError) e;
                            result.setIoIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(
                                org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, listFileInfos_args args,
                              org.apache.thrift.async.AsyncMethodCallback<java.util.List<FileInfo>> resultHandler)
                throws org.apache.thrift.TException {
                iface.listFileInfos(args.listFileInfosRequest, resultHandler);
            }
        }

    }

    public static class createBucket_args
        implements org.apache.thrift.TBase<createBucket_args, createBucket_args._Fields>, java.io.Serializable,
        Cloneable,
        Comparable<createBucket_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("createBucket_args");
        private static final org.apache.thrift.protocol.TField CREATE_BUCKET_REQUEST_FIELD_DESC =
            new org.apache.thrift.protocol.TField("createBucketRequest", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new createBucket_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new createBucket_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap
                .put(_Fields.CREATE_BUCKET_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("createBucketRequest",
                    org.apache.thrift.TFieldRequirementType.REQUIRED,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        CreateBucketRequest.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBucket_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        CreateBucketRequest createBucketRequest; // required

        public createBucket_args() {
        }

        public createBucket_args(
            CreateBucketRequest createBucketRequest) {
            this();
            this.createBucketRequest = createBucketRequest;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createBucket_args(createBucket_args other) {
            if (other.isSetCreateBucketRequest()) {
                this.createBucketRequest = new CreateBucketRequest(other.createBucketRequest);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public createBucket_args deepCopy() {
            return new createBucket_args(this);
        }

        @Override
        public void clear() {
            this.createBucketRequest = null;
        }

        @org.apache.thrift.annotation.Nullable
        public CreateBucketRequest getCreateBucketRequest() {
            return this.createBucketRequest;
        }

        public createBucket_args setCreateBucketRequest(
            @org.apache.thrift.annotation.Nullable CreateBucketRequest createBucketRequest) {
            this.createBucketRequest = createBucketRequest;
            return this;
        }

        public void unsetCreateBucketRequest() {
            this.createBucketRequest = null;
        }

        /**
         * Returns true if field createBucketRequest is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCreateBucketRequest() {
            return this.createBucketRequest != null;
        }

        public void setCreateBucketRequestIsSet(boolean value) {
            if (!value) {
                this.createBucketRequest = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case CREATE_BUCKET_REQUEST:
                if (value == null) {
                    unsetCreateBucketRequest();
                } else {
                    setCreateBucketRequest((CreateBucketRequest) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case CREATE_BUCKET_REQUEST:
                return getCreateBucketRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case CREATE_BUCKET_REQUEST:
                return isSetCreateBucketRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof createBucket_args) {
                return this.equals((createBucket_args) that);
            }
            return false;
        }

        public boolean equals(createBucket_args that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_createBucketRequest = true && this.isSetCreateBucketRequest();
            boolean that_present_createBucketRequest = true && that.isSetCreateBucketRequest();
            if (this_present_createBucketRequest || that_present_createBucketRequest) {
                if (!(this_present_createBucketRequest && that_present_createBucketRequest)) {
                    return false;
                }
                if (!this.createBucketRequest.equals(that.createBucketRequest)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCreateBucketRequest()) ? 131071 : 524287);
            if (isSetCreateBucketRequest()) {
                hashCode = hashCode * 8191 + createBucketRequest.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(createBucket_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetCreateBucketRequest(), other.isSetCreateBucketRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCreateBucketRequest()) {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.createBucketRequest, other.createBucketRequest);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("createBucket_args(");
            boolean first = true;

            sb.append("createBucketRequest:");
            if (this.createBucketRequest == null) {
                sb.append("null");
            } else {
                sb.append(this.createBucketRequest);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            if (createBucketRequest == null) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'createBucketRequest' was not present! Struct: " + toString());
            }
            // check for sub-struct validity
            if (createBucketRequest != null) {
                createBucketRequest.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CREATE_BUCKET_REQUEST((short) 1, "createBucketRequest");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // CREATE_BUCKET_REQUEST
                    return CREATE_BUCKET_REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class createBucket_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public createBucket_argsStandardScheme getScheme() {
                return new createBucket_argsStandardScheme();
            }
        }

        private static class createBucket_argsStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<createBucket_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, createBucket_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // CREATE_BUCKET_REQUEST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.createBucketRequest = new CreateBucketRequest();
                            struct.createBucketRequest.read(iprot);
                            struct.setCreateBucketRequestIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, createBucket_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.createBucketRequest != null) {
                    oprot.writeFieldBegin(CREATE_BUCKET_REQUEST_FIELD_DESC);
                    struct.createBucketRequest.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createBucket_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public createBucket_argsTupleScheme getScheme() {
                return new createBucket_argsTupleScheme();
            }
        }

        private static class createBucket_argsTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<createBucket_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, createBucket_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.createBucketRequest.write(oprot);
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, createBucket_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.createBucketRequest = new CreateBucketRequest();
                struct.createBucketRequest.read(iprot);
                struct.setCreateBucketRequestIsSet(true);
            }
        }
    }

    public static class createBucket_result
        implements org.apache.thrift.TBase<createBucket_result, createBucket_result._Fields>, java.io.Serializable,
        Cloneable, Comparable<createBucket_result> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("createBucket_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField AUTH_ERROR_FIELD_DESC =
            new org.apache.thrift.protocol.TField("authError", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField IO_FIELD_DESC =
            new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new createBucket_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new createBucket_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        Bucket.class)));
            tmpMap.put(_Fields.AUTH_ERROR,
                new org.apache.thrift.meta_data.FieldMetaData("authError",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        AuthorizationError.class)));
            tmpMap.put(_Fields.IO,
                new org.apache.thrift.meta_data.FieldMetaData("io", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        IOError.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBucket_result.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        Bucket success; // required
        public @org.apache.thrift.annotation.Nullable
        AuthorizationError authError; // required
        public @org.apache.thrift.annotation.Nullable
        IOError io; // required

        public createBucket_result() {
        }

        public createBucket_result(
            Bucket success,
            AuthorizationError authError,
            IOError io) {
            this();
            this.success = success;
            this.authError = authError;
            this.io = io;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createBucket_result(createBucket_result other) {
            if (other.isSetSuccess()) {
                this.success = new Bucket(other.success);
            }
            if (other.isSetAuthError()) {
                this.authError = new AuthorizationError(other.authError);
            }
            if (other.isSetIo()) {
                this.io = new IOError(other.io);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public createBucket_result deepCopy() {
            return new createBucket_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.authError = null;
            this.io = null;
        }

        @org.apache.thrift.annotation.Nullable
        public Bucket getSuccess() {
            return this.success;
        }

        public createBucket_result setSuccess(@org.apache.thrift.annotation.Nullable Bucket success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public AuthorizationError getAuthError() {
            return this.authError;
        }

        public createBucket_result setAuthError(@org.apache.thrift.annotation.Nullable AuthorizationError authError) {
            this.authError = authError;
            return this;
        }

        public void unsetAuthError() {
            this.authError = null;
        }

        /**
         * Returns true if field authError is set (has been assigned a value) and false otherwise
         */
        public boolean isSetAuthError() {
            return this.authError != null;
        }

        public void setAuthErrorIsSet(boolean value) {
            if (!value) {
                this.authError = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public IOError getIo() {
            return this.io;
        }

        public createBucket_result setIo(@org.apache.thrift.annotation.Nullable IOError io) {
            this.io = io;
            return this;
        }

        public void unsetIo() {
            this.io = null;
        }

        /**
         * Returns true if field io is set (has been assigned a value) and false otherwise
         */
        public boolean isSetIo() {
            return this.io != null;
        }

        public void setIoIsSet(boolean value) {
            if (!value) {
                this.io = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((Bucket) value);
                }
                break;

            case AUTH_ERROR:
                if (value == null) {
                    unsetAuthError();
                } else {
                    setAuthError((AuthorizationError) value);
                }
                break;

            case IO:
                if (value == null) {
                    unsetIo();
                } else {
                    setIo((IOError) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case AUTH_ERROR:
                return getAuthError();

            case IO:
                return getIo();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case AUTH_ERROR:
                return isSetAuthError();
            case IO:
                return isSetIo();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof createBucket_result) {
                return this.equals((createBucket_result) that);
            }
            return false;
        }

        public boolean equals(createBucket_result that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success)) {
                    return false;
                }
                if (!this.success.equals(that.success)) {
                    return false;
                }
            }

            boolean this_present_authError = true && this.isSetAuthError();
            boolean that_present_authError = true && that.isSetAuthError();
            if (this_present_authError || that_present_authError) {
                if (!(this_present_authError && that_present_authError)) {
                    return false;
                }
                if (!this.authError.equals(that.authError)) {
                    return false;
                }
            }

            boolean this_present_io = true && this.isSetIo();
            boolean that_present_io = true && that.isSetIo();
            if (this_present_io || that_present_io) {
                if (!(this_present_io && that_present_io)) {
                    return false;
                }
                if (!this.io.equals(that.io)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess()) {
                hashCode = hashCode * 8191 + success.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetAuthError()) ? 131071 : 524287);
            if (isSetAuthError()) {
                hashCode = hashCode * 8191 + authError.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
            if (isSetIo()) {
                hashCode = hashCode * 8191 + io.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(createBucket_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetAuthError(), other.isSetAuthError());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAuthError()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authError, other.authError);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetIo(), other.isSetIo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("createBucket_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("authError:");
            if (this.authError == null) {
                sb.append("null");
            } else {
                sb.append(this.authError);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("io:");
            if (this.io == null) {
                sb.append("null");
            } else {
                sb.append(this.io);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            AUTH_ERROR((short) 1, "authError"),
            IO((short) 2, "io");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // AUTH_ERROR
                    return AUTH_ERROR;
                case 2: // IO
                    return IO;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class createBucket_resultStandardSchemeFactory
            implements org.apache.thrift.scheme.SchemeFactory {
            public createBucket_resultStandardScheme getScheme() {
                return new createBucket_resultStandardScheme();
            }
        }

        private static class createBucket_resultStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<createBucket_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, createBucket_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.success = new Bucket();
                            struct.success.read(iprot);
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // AUTH_ERROR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.authError = new AuthorizationError();
                            struct.authError.read(iprot);
                            struct.setAuthErrorIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // IO
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.io = new IOError();
                            struct.io.read(iprot);
                            struct.setIoIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, createBucket_result struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.authError != null) {
                    oprot.writeFieldBegin(AUTH_ERROR_FIELD_DESC);
                    struct.authError.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.io != null) {
                    oprot.writeFieldBegin(IO_FIELD_DESC);
                    struct.io.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createBucket_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public createBucket_resultTupleScheme getScheme() {
                return new createBucket_resultTupleScheme();
            }
        }

        private static class createBucket_resultTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<createBucket_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, createBucket_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAuthError()) {
                    optionals.set(1);
                }
                if (struct.isSetIo()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetAuthError()) {
                    struct.authError.write(oprot);
                }
                if (struct.isSetIo()) {
                    struct.io.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, createBucket_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.success = new Bucket();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.authError = new AuthorizationError();
                    struct.authError.read(iprot);
                    struct.setAuthErrorIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.io = new IOError();
                    struct.io.read(iprot);
                    struct.setIoIsSet(true);
                }
            }
        }
    }

    public static class listBuckets_args
        implements org.apache.thrift.TBase<listBuckets_args, listBuckets_args._Fields>, java.io.Serializable, Cloneable,
        Comparable<listBuckets_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("listBuckets_args");
        private static final org.apache.thrift.protocol.TField LIST_BUCKETS_REQUEST_FIELD_DESC =
            new org.apache.thrift.protocol.TField("listBucketsRequest", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new listBuckets_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new listBuckets_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIST_BUCKETS_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("listBucketsRequest",
                org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                    ListBucketsRequest.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBuckets_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        ListBucketsRequest listBucketsRequest; // required

        public listBuckets_args() {
        }

        public listBuckets_args(
            ListBucketsRequest listBucketsRequest) {
            this();
            this.listBucketsRequest = listBucketsRequest;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public listBuckets_args(listBuckets_args other) {
            if (other.isSetListBucketsRequest()) {
                this.listBucketsRequest = new ListBucketsRequest(other.listBucketsRequest);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public listBuckets_args deepCopy() {
            return new listBuckets_args(this);
        }

        @Override
        public void clear() {
            this.listBucketsRequest = null;
        }

        @org.apache.thrift.annotation.Nullable
        public ListBucketsRequest getListBucketsRequest() {
            return this.listBucketsRequest;
        }

        public listBuckets_args setListBucketsRequest(
            @org.apache.thrift.annotation.Nullable ListBucketsRequest listBucketsRequest) {
            this.listBucketsRequest = listBucketsRequest;
            return this;
        }

        public void unsetListBucketsRequest() {
            this.listBucketsRequest = null;
        }

        /**
         * Returns true if field listBucketsRequest is set (has been assigned a value) and false otherwise
         */
        public boolean isSetListBucketsRequest() {
            return this.listBucketsRequest != null;
        }

        public void setListBucketsRequestIsSet(boolean value) {
            if (!value) {
                this.listBucketsRequest = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case LIST_BUCKETS_REQUEST:
                if (value == null) {
                    unsetListBucketsRequest();
                } else {
                    setListBucketsRequest((ListBucketsRequest) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case LIST_BUCKETS_REQUEST:
                return getListBucketsRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case LIST_BUCKETS_REQUEST:
                return isSetListBucketsRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof listBuckets_args) {
                return this.equals((listBuckets_args) that);
            }
            return false;
        }

        public boolean equals(listBuckets_args that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_listBucketsRequest = true && this.isSetListBucketsRequest();
            boolean that_present_listBucketsRequest = true && that.isSetListBucketsRequest();
            if (this_present_listBucketsRequest || that_present_listBucketsRequest) {
                if (!(this_present_listBucketsRequest && that_present_listBucketsRequest)) {
                    return false;
                }
                if (!this.listBucketsRequest.equals(that.listBucketsRequest)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetListBucketsRequest()) ? 131071 : 524287);
            if (isSetListBucketsRequest()) {
                hashCode = hashCode * 8191 + listBucketsRequest.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(listBuckets_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetListBucketsRequest(), other.isSetListBucketsRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetListBucketsRequest()) {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.listBucketsRequest, other.listBucketsRequest);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("listBuckets_args(");
            boolean first = true;

            sb.append("listBucketsRequest:");
            if (this.listBucketsRequest == null) {
                sb.append("null");
            } else {
                sb.append(this.listBucketsRequest);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            if (listBucketsRequest == null) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'listBucketsRequest' was not present! Struct: " + toString());
            }
            // check for sub-struct validity
            if (listBucketsRequest != null) {
                listBucketsRequest.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            LIST_BUCKETS_REQUEST((short) 1, "listBucketsRequest");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // LIST_BUCKETS_REQUEST
                    return LIST_BUCKETS_REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class listBuckets_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public listBuckets_argsStandardScheme getScheme() {
                return new listBuckets_argsStandardScheme();
            }
        }

        private static class listBuckets_argsStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<listBuckets_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, listBuckets_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // LIST_BUCKETS_REQUEST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.listBucketsRequest = new ListBucketsRequest();
                            struct.listBucketsRequest.read(iprot);
                            struct.setListBucketsRequestIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, listBuckets_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.listBucketsRequest != null) {
                    oprot.writeFieldBegin(LIST_BUCKETS_REQUEST_FIELD_DESC);
                    struct.listBucketsRequest.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class listBuckets_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public listBuckets_argsTupleScheme getScheme() {
                return new listBuckets_argsTupleScheme();
            }
        }

        private static class listBuckets_argsTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<listBuckets_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, listBuckets_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.listBucketsRequest.write(oprot);
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, listBuckets_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.listBucketsRequest = new ListBucketsRequest();
                struct.listBucketsRequest.read(iprot);
                struct.setListBucketsRequestIsSet(true);
            }
        }
    }

    public static class listBuckets_result
        implements org.apache.thrift.TBase<listBuckets_result, listBuckets_result._Fields>, java.io.Serializable,
        Cloneable, Comparable<listBuckets_result> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("listBuckets_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);
        private static final org.apache.thrift.protocol.TField AUTH_ERROR_FIELD_DESC =
            new org.apache.thrift.protocol.TField("authError", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField IO_FIELD_DESC =
            new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new listBuckets_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new listBuckets_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                            Bucket.class))));
            tmpMap.put(_Fields.AUTH_ERROR,
                new org.apache.thrift.meta_data.FieldMetaData("authError",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        AuthorizationError.class)));
            tmpMap.put(_Fields.IO,
                new org.apache.thrift.meta_data.FieldMetaData("io", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        IOError.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBuckets_result.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        java.util.List<Bucket> success; // required
        public @org.apache.thrift.annotation.Nullable
        AuthorizationError authError; // required
        public @org.apache.thrift.annotation.Nullable
        IOError io; // required

        public listBuckets_result() {
        }

        public listBuckets_result(
            java.util.List<Bucket> success,
            AuthorizationError authError,
            IOError io) {
            this();
            this.success = success;
            this.authError = authError;
            this.io = io;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public listBuckets_result(listBuckets_result other) {
            if (other.isSetSuccess()) {
                java.util.List<Bucket> __this__success = new java.util.ArrayList<Bucket>(other.success.size());
                for (Bucket other_element : other.success) {
                    __this__success.add(new Bucket(other_element));
                }
                this.success = __this__success;
            }
            if (other.isSetAuthError()) {
                this.authError = new AuthorizationError(other.authError);
            }
            if (other.isSetIo()) {
                this.io = new IOError(other.io);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public listBuckets_result deepCopy() {
            return new listBuckets_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.authError = null;
            this.io = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.Iterator<Bucket> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(Bucket elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<Bucket>();
            }
            this.success.add(elem);
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.List<Bucket> getSuccess() {
            return this.success;
        }

        public listBuckets_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Bucket> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public AuthorizationError getAuthError() {
            return this.authError;
        }

        public listBuckets_result setAuthError(@org.apache.thrift.annotation.Nullable AuthorizationError authError) {
            this.authError = authError;
            return this;
        }

        public void unsetAuthError() {
            this.authError = null;
        }

        /**
         * Returns true if field authError is set (has been assigned a value) and false otherwise
         */
        public boolean isSetAuthError() {
            return this.authError != null;
        }

        public void setAuthErrorIsSet(boolean value) {
            if (!value) {
                this.authError = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public IOError getIo() {
            return this.io;
        }

        public listBuckets_result setIo(@org.apache.thrift.annotation.Nullable IOError io) {
            this.io = io;
            return this;
        }

        public void unsetIo() {
            this.io = null;
        }

        /**
         * Returns true if field io is set (has been assigned a value) and false otherwise
         */
        public boolean isSetIo() {
            return this.io != null;
        }

        public void setIoIsSet(boolean value) {
            if (!value) {
                this.io = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((java.util.List<Bucket>) value);
                }
                break;

            case AUTH_ERROR:
                if (value == null) {
                    unsetAuthError();
                } else {
                    setAuthError((AuthorizationError) value);
                }
                break;

            case IO:
                if (value == null) {
                    unsetIo();
                } else {
                    setIo((IOError) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case AUTH_ERROR:
                return getAuthError();

            case IO:
                return getIo();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case AUTH_ERROR:
                return isSetAuthError();
            case IO:
                return isSetIo();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof listBuckets_result) {
                return this.equals((listBuckets_result) that);
            }
            return false;
        }

        public boolean equals(listBuckets_result that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success)) {
                    return false;
                }
                if (!this.success.equals(that.success)) {
                    return false;
                }
            }

            boolean this_present_authError = true && this.isSetAuthError();
            boolean that_present_authError = true && that.isSetAuthError();
            if (this_present_authError || that_present_authError) {
                if (!(this_present_authError && that_present_authError)) {
                    return false;
                }
                if (!this.authError.equals(that.authError)) {
                    return false;
                }
            }

            boolean this_present_io = true && this.isSetIo();
            boolean that_present_io = true && that.isSetIo();
            if (this_present_io || that_present_io) {
                if (!(this_present_io && that_present_io)) {
                    return false;
                }
                if (!this.io.equals(that.io)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess()) {
                hashCode = hashCode * 8191 + success.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetAuthError()) ? 131071 : 524287);
            if (isSetAuthError()) {
                hashCode = hashCode * 8191 + authError.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
            if (isSetIo()) {
                hashCode = hashCode * 8191 + io.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(listBuckets_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetAuthError(), other.isSetAuthError());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAuthError()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authError, other.authError);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetIo(), other.isSetIo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("listBuckets_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("authError:");
            if (this.authError == null) {
                sb.append("null");
            } else {
                sb.append(this.authError);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("io:");
            if (this.io == null) {
                sb.append("null");
            } else {
                sb.append(this.io);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            AUTH_ERROR((short) 1, "authError"),
            IO((short) 2, "io");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // AUTH_ERROR
                    return AUTH_ERROR;
                case 2: // IO
                    return IO;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class listBuckets_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public listBuckets_resultStandardScheme getScheme() {
                return new listBuckets_resultStandardScheme();
            }
        }

        private static class listBuckets_resultStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<listBuckets_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, listBuckets_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                                struct.success = new java.util.ArrayList<Bucket>(_list68.size);
                                @org.apache.thrift.annotation.Nullable Bucket _elem69;
                                for (int _i70 = 0; _i70 < _list68.size; ++_i70) {
                                    _elem69 = new Bucket();
                                    _elem69.read(iprot);
                                    struct.success.add(_elem69);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // AUTH_ERROR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.authError = new AuthorizationError();
                            struct.authError.read(iprot);
                            struct.setAuthErrorIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // IO
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.io = new IOError();
                            struct.io.read(iprot);
                            struct.setIoIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, listBuckets_result struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(
                            new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,
                                struct.success.size()));
                        for (Bucket _iter71 : struct.success) {
                            _iter71.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.authError != null) {
                    oprot.writeFieldBegin(AUTH_ERROR_FIELD_DESC);
                    struct.authError.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.io != null) {
                    oprot.writeFieldBegin(IO_FIELD_DESC);
                    struct.io.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class listBuckets_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public listBuckets_resultTupleScheme getScheme() {
                return new listBuckets_resultTupleScheme();
            }
        }

        private static class listBuckets_resultTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<listBuckets_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, listBuckets_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAuthError()) {
                    optionals.set(1);
                }
                if (struct.isSetIo()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Bucket _iter72 : struct.success) {
                            _iter72.write(oprot);
                        }
                    }
                }
                if (struct.isSetAuthError()) {
                    struct.authError.write(oprot);
                }
                if (struct.isSetIo()) {
                    struct.io.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, listBuckets_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list73 =
                            iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
                        struct.success = new java.util.ArrayList<Bucket>(_list73.size);
                        @org.apache.thrift.annotation.Nullable Bucket _elem74;
                        for (int _i75 = 0; _i75 < _list73.size; ++_i75) {
                            _elem74 = new Bucket();
                            _elem74.read(iprot);
                            struct.success.add(_elem74);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.authError = new AuthorizationError();
                    struct.authError.read(iprot);
                    struct.setAuthErrorIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.io = new IOError();
                    struct.io.read(iprot);
                    struct.setIoIsSet(true);
                }
            }
        }
    }

    public static class deleteBucket_args
        implements org.apache.thrift.TBase<deleteBucket_args, deleteBucket_args._Fields>, java.io.Serializable,
        Cloneable,
        Comparable<deleteBucket_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("deleteBucket_args");
        private static final org.apache.thrift.protocol.TField DELETE_BUCKET_REQUEST_FIELD_DESC =
            new org.apache.thrift.protocol.TField("deleteBucketRequest", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new deleteBucket_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new deleteBucket_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap
                .put(_Fields.DELETE_BUCKET_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("deleteBucketRequest",
                    org.apache.thrift.TFieldRequirementType.REQUIRED,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        DeleteBucketRequest.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBucket_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        DeleteBucketRequest deleteBucketRequest; // required

        public deleteBucket_args() {
        }

        public deleteBucket_args(
            DeleteBucketRequest deleteBucketRequest) {
            this();
            this.deleteBucketRequest = deleteBucketRequest;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteBucket_args(deleteBucket_args other) {
            if (other.isSetDeleteBucketRequest()) {
                this.deleteBucketRequest = new DeleteBucketRequest(other.deleteBucketRequest);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public deleteBucket_args deepCopy() {
            return new deleteBucket_args(this);
        }

        @Override
        public void clear() {
            this.deleteBucketRequest = null;
        }

        @org.apache.thrift.annotation.Nullable
        public DeleteBucketRequest getDeleteBucketRequest() {
            return this.deleteBucketRequest;
        }

        public deleteBucket_args setDeleteBucketRequest(
            @org.apache.thrift.annotation.Nullable DeleteBucketRequest deleteBucketRequest) {
            this.deleteBucketRequest = deleteBucketRequest;
            return this;
        }

        public void unsetDeleteBucketRequest() {
            this.deleteBucketRequest = null;
        }

        /**
         * Returns true if field deleteBucketRequest is set (has been assigned a value) and false otherwise
         */
        public boolean isSetDeleteBucketRequest() {
            return this.deleteBucketRequest != null;
        }

        public void setDeleteBucketRequestIsSet(boolean value) {
            if (!value) {
                this.deleteBucketRequest = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case DELETE_BUCKET_REQUEST:
                if (value == null) {
                    unsetDeleteBucketRequest();
                } else {
                    setDeleteBucketRequest((DeleteBucketRequest) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case DELETE_BUCKET_REQUEST:
                return getDeleteBucketRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case DELETE_BUCKET_REQUEST:
                return isSetDeleteBucketRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof deleteBucket_args) {
                return this.equals((deleteBucket_args) that);
            }
            return false;
        }

        public boolean equals(deleteBucket_args that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_deleteBucketRequest = true && this.isSetDeleteBucketRequest();
            boolean that_present_deleteBucketRequest = true && that.isSetDeleteBucketRequest();
            if (this_present_deleteBucketRequest || that_present_deleteBucketRequest) {
                if (!(this_present_deleteBucketRequest && that_present_deleteBucketRequest)) {
                    return false;
                }
                if (!this.deleteBucketRequest.equals(that.deleteBucketRequest)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetDeleteBucketRequest()) ? 131071 : 524287);
            if (isSetDeleteBucketRequest()) {
                hashCode = hashCode * 8191 + deleteBucketRequest.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(deleteBucket_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetDeleteBucketRequest(), other.isSetDeleteBucketRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDeleteBucketRequest()) {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.deleteBucketRequest, other.deleteBucketRequest);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteBucket_args(");
            boolean first = true;

            sb.append("deleteBucketRequest:");
            if (this.deleteBucketRequest == null) {
                sb.append("null");
            } else {
                sb.append(this.deleteBucketRequest);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            if (deleteBucketRequest == null) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'deleteBucketRequest' was not present! Struct: " + toString());
            }
            // check for sub-struct validity
            if (deleteBucketRequest != null) {
                deleteBucketRequest.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            DELETE_BUCKET_REQUEST((short) 1, "deleteBucketRequest");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // DELETE_BUCKET_REQUEST
                    return DELETE_BUCKET_REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class deleteBucket_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteBucket_argsStandardScheme getScheme() {
                return new deleteBucket_argsStandardScheme();
            }
        }

        private static class deleteBucket_argsStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<deleteBucket_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBucket_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // DELETE_BUCKET_REQUEST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.deleteBucketRequest = new DeleteBucketRequest();
                            struct.deleteBucketRequest.read(iprot);
                            struct.setDeleteBucketRequestIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBucket_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.deleteBucketRequest != null) {
                    oprot.writeFieldBegin(DELETE_BUCKET_REQUEST_FIELD_DESC);
                    struct.deleteBucketRequest.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteBucket_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteBucket_argsTupleScheme getScheme() {
                return new deleteBucket_argsTupleScheme();
            }
        }

        private static class deleteBucket_argsTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<deleteBucket_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteBucket_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.deleteBucketRequest.write(oprot);
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteBucket_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.deleteBucketRequest = new DeleteBucketRequest();
                struct.deleteBucketRequest.read(iprot);
                struct.setDeleteBucketRequestIsSet(true);
            }
        }
    }

    public static class deleteBucket_result
        implements org.apache.thrift.TBase<deleteBucket_result, deleteBucket_result._Fields>, java.io.Serializable,
        Cloneable, Comparable<deleteBucket_result> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("deleteBucket_result");
        private static final org.apache.thrift.protocol.TField AUTH_ERROR_FIELD_DESC =
            new org.apache.thrift.protocol.TField("authError", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField IO_FIELD_DESC =
            new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new deleteBucket_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new deleteBucket_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.AUTH_ERROR,
                new org.apache.thrift.meta_data.FieldMetaData("authError",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        AuthorizationError.class)));
            tmpMap.put(_Fields.IO,
                new org.apache.thrift.meta_data.FieldMetaData("io", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        IOError.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBucket_result.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        AuthorizationError authError; // required
        public @org.apache.thrift.annotation.Nullable
        IOError io; // required

        public deleteBucket_result() {
        }

        public deleteBucket_result(
            AuthorizationError authError,
            IOError io) {
            this();
            this.authError = authError;
            this.io = io;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteBucket_result(deleteBucket_result other) {
            if (other.isSetAuthError()) {
                this.authError = new AuthorizationError(other.authError);
            }
            if (other.isSetIo()) {
                this.io = new IOError(other.io);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public deleteBucket_result deepCopy() {
            return new deleteBucket_result(this);
        }

        @Override
        public void clear() {
            this.authError = null;
            this.io = null;
        }

        @org.apache.thrift.annotation.Nullable
        public AuthorizationError getAuthError() {
            return this.authError;
        }

        public deleteBucket_result setAuthError(@org.apache.thrift.annotation.Nullable AuthorizationError authError) {
            this.authError = authError;
            return this;
        }

        public void unsetAuthError() {
            this.authError = null;
        }

        /**
         * Returns true if field authError is set (has been assigned a value) and false otherwise
         */
        public boolean isSetAuthError() {
            return this.authError != null;
        }

        public void setAuthErrorIsSet(boolean value) {
            if (!value) {
                this.authError = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public IOError getIo() {
            return this.io;
        }

        public deleteBucket_result setIo(@org.apache.thrift.annotation.Nullable IOError io) {
            this.io = io;
            return this;
        }

        public void unsetIo() {
            this.io = null;
        }

        /**
         * Returns true if field io is set (has been assigned a value) and false otherwise
         */
        public boolean isSetIo() {
            return this.io != null;
        }

        public void setIoIsSet(boolean value) {
            if (!value) {
                this.io = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case AUTH_ERROR:
                if (value == null) {
                    unsetAuthError();
                } else {
                    setAuthError((AuthorizationError) value);
                }
                break;

            case IO:
                if (value == null) {
                    unsetIo();
                } else {
                    setIo((IOError) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case AUTH_ERROR:
                return getAuthError();

            case IO:
                return getIo();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case AUTH_ERROR:
                return isSetAuthError();
            case IO:
                return isSetIo();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof deleteBucket_result) {
                return this.equals((deleteBucket_result) that);
            }
            return false;
        }

        public boolean equals(deleteBucket_result that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_authError = true && this.isSetAuthError();
            boolean that_present_authError = true && that.isSetAuthError();
            if (this_present_authError || that_present_authError) {
                if (!(this_present_authError && that_present_authError)) {
                    return false;
                }
                if (!this.authError.equals(that.authError)) {
                    return false;
                }
            }

            boolean this_present_io = true && this.isSetIo();
            boolean that_present_io = true && that.isSetIo();
            if (this_present_io || that_present_io) {
                if (!(this_present_io && that_present_io)) {
                    return false;
                }
                if (!this.io.equals(that.io)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetAuthError()) ? 131071 : 524287);
            if (isSetAuthError()) {
                hashCode = hashCode * 8191 + authError.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
            if (isSetIo()) {
                hashCode = hashCode * 8191 + io.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(deleteBucket_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetAuthError(), other.isSetAuthError());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAuthError()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authError, other.authError);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetIo(), other.isSetIo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteBucket_result(");
            boolean first = true;

            sb.append("authError:");
            if (this.authError == null) {
                sb.append("null");
            } else {
                sb.append(this.authError);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("io:");
            if (this.io == null) {
                sb.append("null");
            } else {
                sb.append(this.io);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            AUTH_ERROR((short) 1, "authError"),
            IO((short) 2, "io");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // AUTH_ERROR
                    return AUTH_ERROR;
                case 2: // IO
                    return IO;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class deleteBucket_resultStandardSchemeFactory
            implements org.apache.thrift.scheme.SchemeFactory {
            public deleteBucket_resultStandardScheme getScheme() {
                return new deleteBucket_resultStandardScheme();
            }
        }

        private static class deleteBucket_resultStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<deleteBucket_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBucket_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // AUTH_ERROR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.authError = new AuthorizationError();
                            struct.authError.read(iprot);
                            struct.setAuthErrorIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // IO
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.io = new IOError();
                            struct.io.read(iprot);
                            struct.setIoIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBucket_result struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.authError != null) {
                    oprot.writeFieldBegin(AUTH_ERROR_FIELD_DESC);
                    struct.authError.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.io != null) {
                    oprot.writeFieldBegin(IO_FIELD_DESC);
                    struct.io.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteBucket_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteBucket_resultTupleScheme getScheme() {
                return new deleteBucket_resultTupleScheme();
            }
        }

        private static class deleteBucket_resultTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<deleteBucket_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteBucket_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetAuthError()) {
                    optionals.set(0);
                }
                if (struct.isSetIo()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetAuthError()) {
                    struct.authError.write(oprot);
                }
                if (struct.isSetIo()) {
                    struct.io.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteBucket_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.authError = new AuthorizationError();
                    struct.authError.read(iprot);
                    struct.setAuthErrorIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.io = new IOError();
                    struct.io.read(iprot);
                    struct.setIoIsSet(true);
                }
            }
        }
    }

    public static class createFile_args
        implements org.apache.thrift.TBase<createFile_args, createFile_args._Fields>, java.io.Serializable, Cloneable,
        Comparable<createFile_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("createFile_args");
        private static final org.apache.thrift.protocol.TField CREATE_FILE_REQUEST_FIELD_DESC =
            new org.apache.thrift.protocol.TField("createFileRequest", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new createFile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new createFile_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CREATE_FILE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("createFileRequest",
                org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                    CreateFileRequest.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createFile_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        CreateFileRequest createFileRequest; // required

        public createFile_args() {
        }

        public createFile_args(
            CreateFileRequest createFileRequest) {
            this();
            this.createFileRequest = createFileRequest;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createFile_args(createFile_args other) {
            if (other.isSetCreateFileRequest()) {
                this.createFileRequest = new CreateFileRequest(other.createFileRequest);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public createFile_args deepCopy() {
            return new createFile_args(this);
        }

        @Override
        public void clear() {
            this.createFileRequest = null;
        }

        @org.apache.thrift.annotation.Nullable
        public CreateFileRequest getCreateFileRequest() {
            return this.createFileRequest;
        }

        public createFile_args setCreateFileRequest(
            @org.apache.thrift.annotation.Nullable CreateFileRequest createFileRequest) {
            this.createFileRequest = createFileRequest;
            return this;
        }

        public void unsetCreateFileRequest() {
            this.createFileRequest = null;
        }

        /**
         * Returns true if field createFileRequest is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCreateFileRequest() {
            return this.createFileRequest != null;
        }

        public void setCreateFileRequestIsSet(boolean value) {
            if (!value) {
                this.createFileRequest = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case CREATE_FILE_REQUEST:
                if (value == null) {
                    unsetCreateFileRequest();
                } else {
                    setCreateFileRequest((CreateFileRequest) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case CREATE_FILE_REQUEST:
                return getCreateFileRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case CREATE_FILE_REQUEST:
                return isSetCreateFileRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof createFile_args) {
                return this.equals((createFile_args) that);
            }
            return false;
        }

        public boolean equals(createFile_args that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_createFileRequest = true && this.isSetCreateFileRequest();
            boolean that_present_createFileRequest = true && that.isSetCreateFileRequest();
            if (this_present_createFileRequest || that_present_createFileRequest) {
                if (!(this_present_createFileRequest && that_present_createFileRequest)) {
                    return false;
                }
                if (!this.createFileRequest.equals(that.createFileRequest)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCreateFileRequest()) ? 131071 : 524287);
            if (isSetCreateFileRequest()) {
                hashCode = hashCode * 8191 + createFileRequest.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(createFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetCreateFileRequest(), other.isSetCreateFileRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCreateFileRequest()) {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.createFileRequest, other.createFileRequest);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("createFile_args(");
            boolean first = true;

            sb.append("createFileRequest:");
            if (this.createFileRequest == null) {
                sb.append("null");
            } else {
                sb.append(this.createFileRequest);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            if (createFileRequest == null) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'createFileRequest' was not present! Struct: " + toString());
            }
            // check for sub-struct validity
            if (createFileRequest != null) {
                createFileRequest.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CREATE_FILE_REQUEST((short) 1, "createFileRequest");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // CREATE_FILE_REQUEST
                    return CREATE_FILE_REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class createFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public createFile_argsStandardScheme getScheme() {
                return new createFile_argsStandardScheme();
            }
        }

        private static class createFile_argsStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<createFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, createFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // CREATE_FILE_REQUEST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.createFileRequest = new CreateFileRequest();
                            struct.createFileRequest.read(iprot);
                            struct.setCreateFileRequestIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, createFile_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.createFileRequest != null) {
                    oprot.writeFieldBegin(CREATE_FILE_REQUEST_FIELD_DESC);
                    struct.createFileRequest.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public createFile_argsTupleScheme getScheme() {
                return new createFile_argsTupleScheme();
            }
        }

        private static class createFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, createFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.createFileRequest.write(oprot);
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, createFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.createFileRequest = new CreateFileRequest();
                struct.createFileRequest.read(iprot);
                struct.setCreateFileRequestIsSet(true);
            }
        }
    }

    public static class createFile_result
        implements org.apache.thrift.TBase<createFile_result, createFile_result._Fields>, java.io.Serializable,
        Cloneable,
        Comparable<createFile_result> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("createFile_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField AUTH_ERROR_FIELD_DESC =
            new org.apache.thrift.protocol.TField("authError", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField IO_FIELD_DESC =
            new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new createFile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new createFile_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        CreateFileResponse.class)));
            tmpMap.put(_Fields.AUTH_ERROR,
                new org.apache.thrift.meta_data.FieldMetaData("authError",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        AuthorizationError.class)));
            tmpMap.put(_Fields.IO,
                new org.apache.thrift.meta_data.FieldMetaData("io", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        IOError.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createFile_result.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        CreateFileResponse success; // required
        public @org.apache.thrift.annotation.Nullable
        AuthorizationError authError; // required
        public @org.apache.thrift.annotation.Nullable
        IOError io; // required

        public createFile_result() {
        }

        public createFile_result(
            CreateFileResponse success,
            AuthorizationError authError,
            IOError io) {
            this();
            this.success = success;
            this.authError = authError;
            this.io = io;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createFile_result(createFile_result other) {
            if (other.isSetSuccess()) {
                this.success = new CreateFileResponse(other.success);
            }
            if (other.isSetAuthError()) {
                this.authError = new AuthorizationError(other.authError);
            }
            if (other.isSetIo()) {
                this.io = new IOError(other.io);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public createFile_result deepCopy() {
            return new createFile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.authError = null;
            this.io = null;
        }

        @org.apache.thrift.annotation.Nullable
        public CreateFileResponse getSuccess() {
            return this.success;
        }

        public createFile_result setSuccess(@org.apache.thrift.annotation.Nullable CreateFileResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public AuthorizationError getAuthError() {
            return this.authError;
        }

        public createFile_result setAuthError(@org.apache.thrift.annotation.Nullable AuthorizationError authError) {
            this.authError = authError;
            return this;
        }

        public void unsetAuthError() {
            this.authError = null;
        }

        /**
         * Returns true if field authError is set (has been assigned a value) and false otherwise
         */
        public boolean isSetAuthError() {
            return this.authError != null;
        }

        public void setAuthErrorIsSet(boolean value) {
            if (!value) {
                this.authError = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public IOError getIo() {
            return this.io;
        }

        public createFile_result setIo(@org.apache.thrift.annotation.Nullable IOError io) {
            this.io = io;
            return this;
        }

        public void unsetIo() {
            this.io = null;
        }

        /**
         * Returns true if field io is set (has been assigned a value) and false otherwise
         */
        public boolean isSetIo() {
            return this.io != null;
        }

        public void setIoIsSet(boolean value) {
            if (!value) {
                this.io = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((CreateFileResponse) value);
                }
                break;

            case AUTH_ERROR:
                if (value == null) {
                    unsetAuthError();
                } else {
                    setAuthError((AuthorizationError) value);
                }
                break;

            case IO:
                if (value == null) {
                    unsetIo();
                } else {
                    setIo((IOError) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case AUTH_ERROR:
                return getAuthError();

            case IO:
                return getIo();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case AUTH_ERROR:
                return isSetAuthError();
            case IO:
                return isSetIo();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof createFile_result) {
                return this.equals((createFile_result) that);
            }
            return false;
        }

        public boolean equals(createFile_result that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success)) {
                    return false;
                }
                if (!this.success.equals(that.success)) {
                    return false;
                }
            }

            boolean this_present_authError = true && this.isSetAuthError();
            boolean that_present_authError = true && that.isSetAuthError();
            if (this_present_authError || that_present_authError) {
                if (!(this_present_authError && that_present_authError)) {
                    return false;
                }
                if (!this.authError.equals(that.authError)) {
                    return false;
                }
            }

            boolean this_present_io = true && this.isSetIo();
            boolean that_present_io = true && that.isSetIo();
            if (this_present_io || that_present_io) {
                if (!(this_present_io && that_present_io)) {
                    return false;
                }
                if (!this.io.equals(that.io)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess()) {
                hashCode = hashCode * 8191 + success.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetAuthError()) ? 131071 : 524287);
            if (isSetAuthError()) {
                hashCode = hashCode * 8191 + authError.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
            if (isSetIo()) {
                hashCode = hashCode * 8191 + io.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(createFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetAuthError(), other.isSetAuthError());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAuthError()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authError, other.authError);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetIo(), other.isSetIo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("createFile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("authError:");
            if (this.authError == null) {
                sb.append("null");
            } else {
                sb.append(this.authError);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("io:");
            if (this.io == null) {
                sb.append("null");
            } else {
                sb.append(this.io);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            AUTH_ERROR((short) 1, "authError"),
            IO((short) 2, "io");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // AUTH_ERROR
                    return AUTH_ERROR;
                case 2: // IO
                    return IO;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class createFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public createFile_resultStandardScheme getScheme() {
                return new createFile_resultStandardScheme();
            }
        }

        private static class createFile_resultStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<createFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, createFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.success = new CreateFileResponse();
                            struct.success.read(iprot);
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // AUTH_ERROR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.authError = new AuthorizationError();
                            struct.authError.read(iprot);
                            struct.setAuthErrorIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // IO
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.io = new IOError();
                            struct.io.read(iprot);
                            struct.setIoIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, createFile_result struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.authError != null) {
                    oprot.writeFieldBegin(AUTH_ERROR_FIELD_DESC);
                    struct.authError.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.io != null) {
                    oprot.writeFieldBegin(IO_FIELD_DESC);
                    struct.io.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public createFile_resultTupleScheme getScheme() {
                return new createFile_resultTupleScheme();
            }
        }

        private static class createFile_resultTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<createFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, createFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAuthError()) {
                    optionals.set(1);
                }
                if (struct.isSetIo()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetAuthError()) {
                    struct.authError.write(oprot);
                }
                if (struct.isSetIo()) {
                    struct.io.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, createFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.success = new CreateFileResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.authError = new AuthorizationError();
                    struct.authError.read(iprot);
                    struct.setAuthErrorIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.io = new IOError();
                    struct.io.read(iprot);
                    struct.setIoIsSet(true);
                }
            }
        }
    }

    public static class writeFile_args
        implements org.apache.thrift.TBase<writeFile_args, writeFile_args._Fields>, java.io.Serializable, Cloneable,
        Comparable<writeFile_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("writeFile_args");
        private static final org.apache.thrift.protocol.TField WRITE_FILE_REQUEST_FIELD_DESC =
            new org.apache.thrift.protocol.TField("writeFileRequest", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new writeFile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new writeFile_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.WRITE_FILE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("writeFileRequest",
                org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                    WriteFileRequest.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeFile_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        WriteFileRequest writeFileRequest; // required

        public writeFile_args() {
        }

        public writeFile_args(
            WriteFileRequest writeFileRequest) {
            this();
            this.writeFileRequest = writeFileRequest;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public writeFile_args(writeFile_args other) {
            if (other.isSetWriteFileRequest()) {
                this.writeFileRequest = new WriteFileRequest(other.writeFileRequest);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public writeFile_args deepCopy() {
            return new writeFile_args(this);
        }

        @Override
        public void clear() {
            this.writeFileRequest = null;
        }

        @org.apache.thrift.annotation.Nullable
        public WriteFileRequest getWriteFileRequest() {
            return this.writeFileRequest;
        }

        public writeFile_args setWriteFileRequest(
            @org.apache.thrift.annotation.Nullable WriteFileRequest writeFileRequest) {
            this.writeFileRequest = writeFileRequest;
            return this;
        }

        public void unsetWriteFileRequest() {
            this.writeFileRequest = null;
        }

        /**
         * Returns true if field writeFileRequest is set (has been assigned a value) and false otherwise
         */
        public boolean isSetWriteFileRequest() {
            return this.writeFileRequest != null;
        }

        public void setWriteFileRequestIsSet(boolean value) {
            if (!value) {
                this.writeFileRequest = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case WRITE_FILE_REQUEST:
                if (value == null) {
                    unsetWriteFileRequest();
                } else {
                    setWriteFileRequest((WriteFileRequest) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case WRITE_FILE_REQUEST:
                return getWriteFileRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case WRITE_FILE_REQUEST:
                return isSetWriteFileRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof writeFile_args) {
                return this.equals((writeFile_args) that);
            }
            return false;
        }

        public boolean equals(writeFile_args that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_writeFileRequest = true && this.isSetWriteFileRequest();
            boolean that_present_writeFileRequest = true && that.isSetWriteFileRequest();
            if (this_present_writeFileRequest || that_present_writeFileRequest) {
                if (!(this_present_writeFileRequest && that_present_writeFileRequest)) {
                    return false;
                }
                if (!this.writeFileRequest.equals(that.writeFileRequest)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetWriteFileRequest()) ? 131071 : 524287);
            if (isSetWriteFileRequest()) {
                hashCode = hashCode * 8191 + writeFileRequest.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(writeFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetWriteFileRequest(), other.isSetWriteFileRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetWriteFileRequest()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeFileRequest, other.writeFileRequest);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("writeFile_args(");
            boolean first = true;

            sb.append("writeFileRequest:");
            if (this.writeFileRequest == null) {
                sb.append("null");
            } else {
                sb.append(this.writeFileRequest);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            if (writeFileRequest == null) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'writeFileRequest' was not present! Struct: " + toString());
            }
            // check for sub-struct validity
            if (writeFileRequest != null) {
                writeFileRequest.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            WRITE_FILE_REQUEST((short) 1, "writeFileRequest");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // WRITE_FILE_REQUEST
                    return WRITE_FILE_REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class writeFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public writeFile_argsStandardScheme getScheme() {
                return new writeFile_argsStandardScheme();
            }
        }

        private static class writeFile_argsStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<writeFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, writeFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // WRITE_FILE_REQUEST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.writeFileRequest = new WriteFileRequest();
                            struct.writeFileRequest.read(iprot);
                            struct.setWriteFileRequestIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, writeFile_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.writeFileRequest != null) {
                    oprot.writeFieldBegin(WRITE_FILE_REQUEST_FIELD_DESC);
                    struct.writeFileRequest.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class writeFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public writeFile_argsTupleScheme getScheme() {
                return new writeFile_argsTupleScheme();
            }
        }

        private static class writeFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, writeFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.writeFileRequest.write(oprot);
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, writeFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.writeFileRequest = new WriteFileRequest();
                struct.writeFileRequest.read(iprot);
                struct.setWriteFileRequestIsSet(true);
            }
        }
    }

    public static class writeFile_result
        implements org.apache.thrift.TBase<writeFile_result, writeFile_result._Fields>, java.io.Serializable, Cloneable,
        Comparable<writeFile_result> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("writeFile_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField AUTH_ERROR_FIELD_DESC =
            new org.apache.thrift.protocol.TField("authError", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField IO_FIELD_DESC =
            new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new writeFile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new writeFile_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        WriteFileResponse.class)));
            tmpMap.put(_Fields.AUTH_ERROR,
                new org.apache.thrift.meta_data.FieldMetaData("authError",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        AuthorizationError.class)));
            tmpMap.put(_Fields.IO,
                new org.apache.thrift.meta_data.FieldMetaData("io", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        IOError.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeFile_result.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        WriteFileResponse success; // required
        public @org.apache.thrift.annotation.Nullable
        AuthorizationError authError; // required
        public @org.apache.thrift.annotation.Nullable
        IOError io; // required

        public writeFile_result() {
        }

        public writeFile_result(
            WriteFileResponse success,
            AuthorizationError authError,
            IOError io) {
            this();
            this.success = success;
            this.authError = authError;
            this.io = io;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public writeFile_result(writeFile_result other) {
            if (other.isSetSuccess()) {
                this.success = new WriteFileResponse(other.success);
            }
            if (other.isSetAuthError()) {
                this.authError = new AuthorizationError(other.authError);
            }
            if (other.isSetIo()) {
                this.io = new IOError(other.io);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public writeFile_result deepCopy() {
            return new writeFile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.authError = null;
            this.io = null;
        }

        @org.apache.thrift.annotation.Nullable
        public WriteFileResponse getSuccess() {
            return this.success;
        }

        public writeFile_result setSuccess(@org.apache.thrift.annotation.Nullable WriteFileResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public AuthorizationError getAuthError() {
            return this.authError;
        }

        public writeFile_result setAuthError(@org.apache.thrift.annotation.Nullable AuthorizationError authError) {
            this.authError = authError;
            return this;
        }

        public void unsetAuthError() {
            this.authError = null;
        }

        /**
         * Returns true if field authError is set (has been assigned a value) and false otherwise
         */
        public boolean isSetAuthError() {
            return this.authError != null;
        }

        public void setAuthErrorIsSet(boolean value) {
            if (!value) {
                this.authError = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public IOError getIo() {
            return this.io;
        }

        public writeFile_result setIo(@org.apache.thrift.annotation.Nullable IOError io) {
            this.io = io;
            return this;
        }

        public void unsetIo() {
            this.io = null;
        }

        /**
         * Returns true if field io is set (has been assigned a value) and false otherwise
         */
        public boolean isSetIo() {
            return this.io != null;
        }

        public void setIoIsSet(boolean value) {
            if (!value) {
                this.io = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((WriteFileResponse) value);
                }
                break;

            case AUTH_ERROR:
                if (value == null) {
                    unsetAuthError();
                } else {
                    setAuthError((AuthorizationError) value);
                }
                break;

            case IO:
                if (value == null) {
                    unsetIo();
                } else {
                    setIo((IOError) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case AUTH_ERROR:
                return getAuthError();

            case IO:
                return getIo();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case AUTH_ERROR:
                return isSetAuthError();
            case IO:
                return isSetIo();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof writeFile_result) {
                return this.equals((writeFile_result) that);
            }
            return false;
        }

        public boolean equals(writeFile_result that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success)) {
                    return false;
                }
                if (!this.success.equals(that.success)) {
                    return false;
                }
            }

            boolean this_present_authError = true && this.isSetAuthError();
            boolean that_present_authError = true && that.isSetAuthError();
            if (this_present_authError || that_present_authError) {
                if (!(this_present_authError && that_present_authError)) {
                    return false;
                }
                if (!this.authError.equals(that.authError)) {
                    return false;
                }
            }

            boolean this_present_io = true && this.isSetIo();
            boolean that_present_io = true && that.isSetIo();
            if (this_present_io || that_present_io) {
                if (!(this_present_io && that_present_io)) {
                    return false;
                }
                if (!this.io.equals(that.io)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess()) {
                hashCode = hashCode * 8191 + success.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetAuthError()) ? 131071 : 524287);
            if (isSetAuthError()) {
                hashCode = hashCode * 8191 + authError.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
            if (isSetIo()) {
                hashCode = hashCode * 8191 + io.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(writeFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetAuthError(), other.isSetAuthError());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAuthError()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authError, other.authError);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetIo(), other.isSetIo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("writeFile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("authError:");
            if (this.authError == null) {
                sb.append("null");
            } else {
                sb.append(this.authError);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("io:");
            if (this.io == null) {
                sb.append("null");
            } else {
                sb.append(this.io);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            AUTH_ERROR((short) 1, "authError"),
            IO((short) 2, "io");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // AUTH_ERROR
                    return AUTH_ERROR;
                case 2: // IO
                    return IO;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class writeFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public writeFile_resultStandardScheme getScheme() {
                return new writeFile_resultStandardScheme();
            }
        }

        private static class writeFile_resultStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<writeFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, writeFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.success = new WriteFileResponse();
                            struct.success.read(iprot);
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // AUTH_ERROR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.authError = new AuthorizationError();
                            struct.authError.read(iprot);
                            struct.setAuthErrorIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // IO
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.io = new IOError();
                            struct.io.read(iprot);
                            struct.setIoIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, writeFile_result struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.authError != null) {
                    oprot.writeFieldBegin(AUTH_ERROR_FIELD_DESC);
                    struct.authError.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.io != null) {
                    oprot.writeFieldBegin(IO_FIELD_DESC);
                    struct.io.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class writeFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public writeFile_resultTupleScheme getScheme() {
                return new writeFile_resultTupleScheme();
            }
        }

        private static class writeFile_resultTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<writeFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, writeFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAuthError()) {
                    optionals.set(1);
                }
                if (struct.isSetIo()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetAuthError()) {
                    struct.authError.write(oprot);
                }
                if (struct.isSetIo()) {
                    struct.io.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, writeFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.success = new WriteFileResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.authError = new AuthorizationError();
                    struct.authError.read(iprot);
                    struct.setAuthErrorIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.io = new IOError();
                    struct.io.read(iprot);
                    struct.setIoIsSet(true);
                }
            }
        }
    }

    public static class flushFile_args
        implements org.apache.thrift.TBase<flushFile_args, flushFile_args._Fields>, java.io.Serializable, Cloneable,
        Comparable<flushFile_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("flushFile_args");
        private static final org.apache.thrift.protocol.TField FLUSH_FILE_REQUEST_FIELD_DESC =
            new org.apache.thrift.protocol.TField("flushFileRequest", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new flushFile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new flushFile_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FLUSH_FILE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("flushFileRequest",
                org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                    FlushFileRequest.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(flushFile_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        FlushFileRequest flushFileRequest; // required

        public flushFile_args() {
        }

        public flushFile_args(
            FlushFileRequest flushFileRequest) {
            this();
            this.flushFileRequest = flushFileRequest;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public flushFile_args(flushFile_args other) {
            if (other.isSetFlushFileRequest()) {
                this.flushFileRequest = new FlushFileRequest(other.flushFileRequest);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public flushFile_args deepCopy() {
            return new flushFile_args(this);
        }

        @Override
        public void clear() {
            this.flushFileRequest = null;
        }

        @org.apache.thrift.annotation.Nullable
        public FlushFileRequest getFlushFileRequest() {
            return this.flushFileRequest;
        }

        public flushFile_args setFlushFileRequest(
            @org.apache.thrift.annotation.Nullable FlushFileRequest flushFileRequest) {
            this.flushFileRequest = flushFileRequest;
            return this;
        }

        public void unsetFlushFileRequest() {
            this.flushFileRequest = null;
        }

        /**
         * Returns true if field flushFileRequest is set (has been assigned a value) and false otherwise
         */
        public boolean isSetFlushFileRequest() {
            return this.flushFileRequest != null;
        }

        public void setFlushFileRequestIsSet(boolean value) {
            if (!value) {
                this.flushFileRequest = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case FLUSH_FILE_REQUEST:
                if (value == null) {
                    unsetFlushFileRequest();
                } else {
                    setFlushFileRequest((FlushFileRequest) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case FLUSH_FILE_REQUEST:
                return getFlushFileRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case FLUSH_FILE_REQUEST:
                return isSetFlushFileRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof flushFile_args) {
                return this.equals((flushFile_args) that);
            }
            return false;
        }

        public boolean equals(flushFile_args that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_flushFileRequest = true && this.isSetFlushFileRequest();
            boolean that_present_flushFileRequest = true && that.isSetFlushFileRequest();
            if (this_present_flushFileRequest || that_present_flushFileRequest) {
                if (!(this_present_flushFileRequest && that_present_flushFileRequest)) {
                    return false;
                }
                if (!this.flushFileRequest.equals(that.flushFileRequest)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetFlushFileRequest()) ? 131071 : 524287);
            if (isSetFlushFileRequest()) {
                hashCode = hashCode * 8191 + flushFileRequest.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(flushFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetFlushFileRequest(), other.isSetFlushFileRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFlushFileRequest()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flushFileRequest, other.flushFileRequest);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("flushFile_args(");
            boolean first = true;

            sb.append("flushFileRequest:");
            if (this.flushFileRequest == null) {
                sb.append("null");
            } else {
                sb.append(this.flushFileRequest);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            if (flushFileRequest == null) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'flushFileRequest' was not present! Struct: " + toString());
            }
            // check for sub-struct validity
            if (flushFileRequest != null) {
                flushFileRequest.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            FLUSH_FILE_REQUEST((short) 1, "flushFileRequest");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // FLUSH_FILE_REQUEST
                    return FLUSH_FILE_REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class flushFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public flushFile_argsStandardScheme getScheme() {
                return new flushFile_argsStandardScheme();
            }
        }

        private static class flushFile_argsStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<flushFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, flushFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // FLUSH_FILE_REQUEST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.flushFileRequest = new FlushFileRequest();
                            struct.flushFileRequest.read(iprot);
                            struct.setFlushFileRequestIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, flushFile_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.flushFileRequest != null) {
                    oprot.writeFieldBegin(FLUSH_FILE_REQUEST_FIELD_DESC);
                    struct.flushFileRequest.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class flushFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public flushFile_argsTupleScheme getScheme() {
                return new flushFile_argsTupleScheme();
            }
        }

        private static class flushFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<flushFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, flushFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.flushFileRequest.write(oprot);
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, flushFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.flushFileRequest = new FlushFileRequest();
                struct.flushFileRequest.read(iprot);
                struct.setFlushFileRequestIsSet(true);
            }
        }
    }

    public static class flushFile_result
        implements org.apache.thrift.TBase<flushFile_result, flushFile_result._Fields>, java.io.Serializable, Cloneable,
        Comparable<flushFile_result> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("flushFile_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField AUTH_ERROR_FIELD_DESC =
            new org.apache.thrift.protocol.TField("authError", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField IO_FIELD_DESC =
            new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new flushFile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new flushFile_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        FlushFileResponse.class)));
            tmpMap.put(_Fields.AUTH_ERROR,
                new org.apache.thrift.meta_data.FieldMetaData("authError",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        AuthorizationError.class)));
            tmpMap.put(_Fields.IO,
                new org.apache.thrift.meta_data.FieldMetaData("io", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        IOError.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(flushFile_result.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        FlushFileResponse success; // required
        public @org.apache.thrift.annotation.Nullable
        AuthorizationError authError; // required
        public @org.apache.thrift.annotation.Nullable
        IOError io; // required

        public flushFile_result() {
        }

        public flushFile_result(
            FlushFileResponse success,
            AuthorizationError authError,
            IOError io) {
            this();
            this.success = success;
            this.authError = authError;
            this.io = io;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public flushFile_result(flushFile_result other) {
            if (other.isSetSuccess()) {
                this.success = new FlushFileResponse(other.success);
            }
            if (other.isSetAuthError()) {
                this.authError = new AuthorizationError(other.authError);
            }
            if (other.isSetIo()) {
                this.io = new IOError(other.io);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public flushFile_result deepCopy() {
            return new flushFile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.authError = null;
            this.io = null;
        }

        @org.apache.thrift.annotation.Nullable
        public FlushFileResponse getSuccess() {
            return this.success;
        }

        public flushFile_result setSuccess(@org.apache.thrift.annotation.Nullable FlushFileResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public AuthorizationError getAuthError() {
            return this.authError;
        }

        public flushFile_result setAuthError(@org.apache.thrift.annotation.Nullable AuthorizationError authError) {
            this.authError = authError;
            return this;
        }

        public void unsetAuthError() {
            this.authError = null;
        }

        /**
         * Returns true if field authError is set (has been assigned a value) and false otherwise
         */
        public boolean isSetAuthError() {
            return this.authError != null;
        }

        public void setAuthErrorIsSet(boolean value) {
            if (!value) {
                this.authError = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public IOError getIo() {
            return this.io;
        }

        public flushFile_result setIo(@org.apache.thrift.annotation.Nullable IOError io) {
            this.io = io;
            return this;
        }

        public void unsetIo() {
            this.io = null;
        }

        /**
         * Returns true if field io is set (has been assigned a value) and false otherwise
         */
        public boolean isSetIo() {
            return this.io != null;
        }

        public void setIoIsSet(boolean value) {
            if (!value) {
                this.io = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((FlushFileResponse) value);
                }
                break;

            case AUTH_ERROR:
                if (value == null) {
                    unsetAuthError();
                } else {
                    setAuthError((AuthorizationError) value);
                }
                break;

            case IO:
                if (value == null) {
                    unsetIo();
                } else {
                    setIo((IOError) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case AUTH_ERROR:
                return getAuthError();

            case IO:
                return getIo();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case AUTH_ERROR:
                return isSetAuthError();
            case IO:
                return isSetIo();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof flushFile_result) {
                return this.equals((flushFile_result) that);
            }
            return false;
        }

        public boolean equals(flushFile_result that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success)) {
                    return false;
                }
                if (!this.success.equals(that.success)) {
                    return false;
                }
            }

            boolean this_present_authError = true && this.isSetAuthError();
            boolean that_present_authError = true && that.isSetAuthError();
            if (this_present_authError || that_present_authError) {
                if (!(this_present_authError && that_present_authError)) {
                    return false;
                }
                if (!this.authError.equals(that.authError)) {
                    return false;
                }
            }

            boolean this_present_io = true && this.isSetIo();
            boolean that_present_io = true && that.isSetIo();
            if (this_present_io || that_present_io) {
                if (!(this_present_io && that_present_io)) {
                    return false;
                }
                if (!this.io.equals(that.io)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess()) {
                hashCode = hashCode * 8191 + success.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetAuthError()) ? 131071 : 524287);
            if (isSetAuthError()) {
                hashCode = hashCode * 8191 + authError.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
            if (isSetIo()) {
                hashCode = hashCode * 8191 + io.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(flushFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetAuthError(), other.isSetAuthError());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAuthError()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authError, other.authError);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetIo(), other.isSetIo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("flushFile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("authError:");
            if (this.authError == null) {
                sb.append("null");
            } else {
                sb.append(this.authError);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("io:");
            if (this.io == null) {
                sb.append("null");
            } else {
                sb.append(this.io);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            AUTH_ERROR((short) 1, "authError"),
            IO((short) 2, "io");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // AUTH_ERROR
                    return AUTH_ERROR;
                case 2: // IO
                    return IO;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class flushFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public flushFile_resultStandardScheme getScheme() {
                return new flushFile_resultStandardScheme();
            }
        }

        private static class flushFile_resultStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<flushFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, flushFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.success = new FlushFileResponse();
                            struct.success.read(iprot);
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // AUTH_ERROR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.authError = new AuthorizationError();
                            struct.authError.read(iprot);
                            struct.setAuthErrorIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // IO
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.io = new IOError();
                            struct.io.read(iprot);
                            struct.setIoIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, flushFile_result struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.authError != null) {
                    oprot.writeFieldBegin(AUTH_ERROR_FIELD_DESC);
                    struct.authError.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.io != null) {
                    oprot.writeFieldBegin(IO_FIELD_DESC);
                    struct.io.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class flushFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public flushFile_resultTupleScheme getScheme() {
                return new flushFile_resultTupleScheme();
            }
        }

        private static class flushFile_resultTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<flushFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, flushFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAuthError()) {
                    optionals.set(1);
                }
                if (struct.isSetIo()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetAuthError()) {
                    struct.authError.write(oprot);
                }
                if (struct.isSetIo()) {
                    struct.io.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, flushFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.success = new FlushFileResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.authError = new AuthorizationError();
                    struct.authError.read(iprot);
                    struct.setAuthErrorIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.io = new IOError();
                    struct.io.read(iprot);
                    struct.setIoIsSet(true);
                }
            }
        }
    }

    public static class completeFile_args
        implements org.apache.thrift.TBase<completeFile_args, completeFile_args._Fields>, java.io.Serializable,
        Cloneable,
        Comparable<completeFile_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("completeFile_args");
        private static final org.apache.thrift.protocol.TField COMPLETE_FILE_REQUEST_FIELD_DESC =
            new org.apache.thrift.protocol.TField("completeFileRequest", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new completeFile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new completeFile_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap
                .put(_Fields.COMPLETE_FILE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("completeFileRequest",
                    org.apache.thrift.TFieldRequirementType.REQUIRED,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        CompleteFileRequest.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(completeFile_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        CompleteFileRequest completeFileRequest; // required

        public completeFile_args() {
        }

        public completeFile_args(
            CompleteFileRequest completeFileRequest) {
            this();
            this.completeFileRequest = completeFileRequest;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public completeFile_args(completeFile_args other) {
            if (other.isSetCompleteFileRequest()) {
                this.completeFileRequest = new CompleteFileRequest(other.completeFileRequest);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public completeFile_args deepCopy() {
            return new completeFile_args(this);
        }

        @Override
        public void clear() {
            this.completeFileRequest = null;
        }

        @org.apache.thrift.annotation.Nullable
        public CompleteFileRequest getCompleteFileRequest() {
            return this.completeFileRequest;
        }

        public completeFile_args setCompleteFileRequest(
            @org.apache.thrift.annotation.Nullable CompleteFileRequest completeFileRequest) {
            this.completeFileRequest = completeFileRequest;
            return this;
        }

        public void unsetCompleteFileRequest() {
            this.completeFileRequest = null;
        }

        /**
         * Returns true if field completeFileRequest is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompleteFileRequest() {
            return this.completeFileRequest != null;
        }

        public void setCompleteFileRequestIsSet(boolean value) {
            if (!value) {
                this.completeFileRequest = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case COMPLETE_FILE_REQUEST:
                if (value == null) {
                    unsetCompleteFileRequest();
                } else {
                    setCompleteFileRequest((CompleteFileRequest) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case COMPLETE_FILE_REQUEST:
                return getCompleteFileRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case COMPLETE_FILE_REQUEST:
                return isSetCompleteFileRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof completeFile_args) {
                return this.equals((completeFile_args) that);
            }
            return false;
        }

        public boolean equals(completeFile_args that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_completeFileRequest = true && this.isSetCompleteFileRequest();
            boolean that_present_completeFileRequest = true && that.isSetCompleteFileRequest();
            if (this_present_completeFileRequest || that_present_completeFileRequest) {
                if (!(this_present_completeFileRequest && that_present_completeFileRequest)) {
                    return false;
                }
                if (!this.completeFileRequest.equals(that.completeFileRequest)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompleteFileRequest()) ? 131071 : 524287);
            if (isSetCompleteFileRequest()) {
                hashCode = hashCode * 8191 + completeFileRequest.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(completeFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetCompleteFileRequest(), other.isSetCompleteFileRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompleteFileRequest()) {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.completeFileRequest, other.completeFileRequest);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("completeFile_args(");
            boolean first = true;

            sb.append("completeFileRequest:");
            if (this.completeFileRequest == null) {
                sb.append("null");
            } else {
                sb.append(this.completeFileRequest);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            if (completeFileRequest == null) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'completeFileRequest' was not present! Struct: " + toString());
            }
            // check for sub-struct validity
            if (completeFileRequest != null) {
                completeFileRequest.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPLETE_FILE_REQUEST((short) 1, "completeFileRequest");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // COMPLETE_FILE_REQUEST
                    return COMPLETE_FILE_REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class completeFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public completeFile_argsStandardScheme getScheme() {
                return new completeFile_argsStandardScheme();
            }
        }

        private static class completeFile_argsStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<completeFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, completeFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // COMPLETE_FILE_REQUEST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.completeFileRequest = new CompleteFileRequest();
                            struct.completeFileRequest.read(iprot);
                            struct.setCompleteFileRequestIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, completeFile_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.completeFileRequest != null) {
                    oprot.writeFieldBegin(COMPLETE_FILE_REQUEST_FIELD_DESC);
                    struct.completeFileRequest.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class completeFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public completeFile_argsTupleScheme getScheme() {
                return new completeFile_argsTupleScheme();
            }
        }

        private static class completeFile_argsTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<completeFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, completeFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.completeFileRequest.write(oprot);
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, completeFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.completeFileRequest = new CompleteFileRequest();
                struct.completeFileRequest.read(iprot);
                struct.setCompleteFileRequestIsSet(true);
            }
        }
    }

    public static class completeFile_result
        implements org.apache.thrift.TBase<completeFile_result, completeFile_result._Fields>, java.io.Serializable,
        Cloneable, Comparable<completeFile_result> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("completeFile_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField AUTH_ERROR_FIELD_DESC =
            new org.apache.thrift.protocol.TField("authError", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField IO_FIELD_DESC =
            new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new completeFile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new completeFile_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        FileInfo.class)));
            tmpMap.put(_Fields.AUTH_ERROR,
                new org.apache.thrift.meta_data.FieldMetaData("authError",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        AuthorizationError.class)));
            tmpMap.put(_Fields.IO,
                new org.apache.thrift.meta_data.FieldMetaData("io", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        IOError.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(completeFile_result.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        FileInfo success; // required
        public @org.apache.thrift.annotation.Nullable
        AuthorizationError authError; // required
        public @org.apache.thrift.annotation.Nullable
        IOError io; // required

        public completeFile_result() {
        }

        public completeFile_result(
            FileInfo success,
            AuthorizationError authError,
            IOError io) {
            this();
            this.success = success;
            this.authError = authError;
            this.io = io;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public completeFile_result(completeFile_result other) {
            if (other.isSetSuccess()) {
                this.success = new FileInfo(other.success);
            }
            if (other.isSetAuthError()) {
                this.authError = new AuthorizationError(other.authError);
            }
            if (other.isSetIo()) {
                this.io = new IOError(other.io);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public completeFile_result deepCopy() {
            return new completeFile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.authError = null;
            this.io = null;
        }

        @org.apache.thrift.annotation.Nullable
        public FileInfo getSuccess() {
            return this.success;
        }

        public completeFile_result setSuccess(@org.apache.thrift.annotation.Nullable FileInfo success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public AuthorizationError getAuthError() {
            return this.authError;
        }

        public completeFile_result setAuthError(@org.apache.thrift.annotation.Nullable AuthorizationError authError) {
            this.authError = authError;
            return this;
        }

        public void unsetAuthError() {
            this.authError = null;
        }

        /**
         * Returns true if field authError is set (has been assigned a value) and false otherwise
         */
        public boolean isSetAuthError() {
            return this.authError != null;
        }

        public void setAuthErrorIsSet(boolean value) {
            if (!value) {
                this.authError = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public IOError getIo() {
            return this.io;
        }

        public completeFile_result setIo(@org.apache.thrift.annotation.Nullable IOError io) {
            this.io = io;
            return this;
        }

        public void unsetIo() {
            this.io = null;
        }

        /**
         * Returns true if field io is set (has been assigned a value) and false otherwise
         */
        public boolean isSetIo() {
            return this.io != null;
        }

        public void setIoIsSet(boolean value) {
            if (!value) {
                this.io = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((FileInfo) value);
                }
                break;

            case AUTH_ERROR:
                if (value == null) {
                    unsetAuthError();
                } else {
                    setAuthError((AuthorizationError) value);
                }
                break;

            case IO:
                if (value == null) {
                    unsetIo();
                } else {
                    setIo((IOError) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case AUTH_ERROR:
                return getAuthError();

            case IO:
                return getIo();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case AUTH_ERROR:
                return isSetAuthError();
            case IO:
                return isSetIo();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof completeFile_result) {
                return this.equals((completeFile_result) that);
            }
            return false;
        }

        public boolean equals(completeFile_result that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success)) {
                    return false;
                }
                if (!this.success.equals(that.success)) {
                    return false;
                }
            }

            boolean this_present_authError = true && this.isSetAuthError();
            boolean that_present_authError = true && that.isSetAuthError();
            if (this_present_authError || that_present_authError) {
                if (!(this_present_authError && that_present_authError)) {
                    return false;
                }
                if (!this.authError.equals(that.authError)) {
                    return false;
                }
            }

            boolean this_present_io = true && this.isSetIo();
            boolean that_present_io = true && that.isSetIo();
            if (this_present_io || that_present_io) {
                if (!(this_present_io && that_present_io)) {
                    return false;
                }
                if (!this.io.equals(that.io)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess()) {
                hashCode = hashCode * 8191 + success.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetAuthError()) ? 131071 : 524287);
            if (isSetAuthError()) {
                hashCode = hashCode * 8191 + authError.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
            if (isSetIo()) {
                hashCode = hashCode * 8191 + io.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(completeFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetAuthError(), other.isSetAuthError());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAuthError()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authError, other.authError);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetIo(), other.isSetIo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("completeFile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("authError:");
            if (this.authError == null) {
                sb.append("null");
            } else {
                sb.append(this.authError);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("io:");
            if (this.io == null) {
                sb.append("null");
            } else {
                sb.append(this.io);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            AUTH_ERROR((short) 1, "authError"),
            IO((short) 2, "io");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // AUTH_ERROR
                    return AUTH_ERROR;
                case 2: // IO
                    return IO;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class completeFile_resultStandardSchemeFactory
            implements org.apache.thrift.scheme.SchemeFactory {
            public completeFile_resultStandardScheme getScheme() {
                return new completeFile_resultStandardScheme();
            }
        }

        private static class completeFile_resultStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<completeFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, completeFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.success = new FileInfo();
                            struct.success.read(iprot);
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // AUTH_ERROR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.authError = new AuthorizationError();
                            struct.authError.read(iprot);
                            struct.setAuthErrorIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // IO
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.io = new IOError();
                            struct.io.read(iprot);
                            struct.setIoIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, completeFile_result struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.authError != null) {
                    oprot.writeFieldBegin(AUTH_ERROR_FIELD_DESC);
                    struct.authError.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.io != null) {
                    oprot.writeFieldBegin(IO_FIELD_DESC);
                    struct.io.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class completeFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public completeFile_resultTupleScheme getScheme() {
                return new completeFile_resultTupleScheme();
            }
        }

        private static class completeFile_resultTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<completeFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, completeFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAuthError()) {
                    optionals.set(1);
                }
                if (struct.isSetIo()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetAuthError()) {
                    struct.authError.write(oprot);
                }
                if (struct.isSetIo()) {
                    struct.io.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, completeFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.success = new FileInfo();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.authError = new AuthorizationError();
                    struct.authError.read(iprot);
                    struct.setAuthErrorIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.io = new IOError();
                    struct.io.read(iprot);
                    struct.setIoIsSet(true);
                }
            }
        }
    }

    public static class readFile_args
        implements org.apache.thrift.TBase<readFile_args, readFile_args._Fields>, java.io.Serializable, Cloneable,
        Comparable<readFile_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("readFile_args");
        private static final org.apache.thrift.protocol.TField READ_FILE_REQUEST_FIELD_DESC =
            new org.apache.thrift.protocol.TField("readFileRequest", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new readFile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new readFile_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.READ_FILE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("readFileRequest",
                org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                    ReadFileRequest.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readFile_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        ReadFileRequest readFileRequest; // required

        public readFile_args() {
        }

        public readFile_args(
            ReadFileRequest readFileRequest) {
            this();
            this.readFileRequest = readFileRequest;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public readFile_args(readFile_args other) {
            if (other.isSetReadFileRequest()) {
                this.readFileRequest = new ReadFileRequest(other.readFileRequest);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public readFile_args deepCopy() {
            return new readFile_args(this);
        }

        @Override
        public void clear() {
            this.readFileRequest = null;
        }

        @org.apache.thrift.annotation.Nullable
        public ReadFileRequest getReadFileRequest() {
            return this.readFileRequest;
        }

        public readFile_args setReadFileRequest(
            @org.apache.thrift.annotation.Nullable ReadFileRequest readFileRequest) {
            this.readFileRequest = readFileRequest;
            return this;
        }

        public void unsetReadFileRequest() {
            this.readFileRequest = null;
        }

        /**
         * Returns true if field readFileRequest is set (has been assigned a value) and false otherwise
         */
        public boolean isSetReadFileRequest() {
            return this.readFileRequest != null;
        }

        public void setReadFileRequestIsSet(boolean value) {
            if (!value) {
                this.readFileRequest = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case READ_FILE_REQUEST:
                if (value == null) {
                    unsetReadFileRequest();
                } else {
                    setReadFileRequest((ReadFileRequest) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case READ_FILE_REQUEST:
                return getReadFileRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case READ_FILE_REQUEST:
                return isSetReadFileRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof readFile_args) {
                return this.equals((readFile_args) that);
            }
            return false;
        }

        public boolean equals(readFile_args that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_readFileRequest = true && this.isSetReadFileRequest();
            boolean that_present_readFileRequest = true && that.isSetReadFileRequest();
            if (this_present_readFileRequest || that_present_readFileRequest) {
                if (!(this_present_readFileRequest && that_present_readFileRequest)) {
                    return false;
                }
                if (!this.readFileRequest.equals(that.readFileRequest)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetReadFileRequest()) ? 131071 : 524287);
            if (isSetReadFileRequest()) {
                hashCode = hashCode * 8191 + readFileRequest.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(readFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetReadFileRequest(), other.isSetReadFileRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReadFileRequest()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readFileRequest, other.readFileRequest);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("readFile_args(");
            boolean first = true;

            sb.append("readFileRequest:");
            if (this.readFileRequest == null) {
                sb.append("null");
            } else {
                sb.append(this.readFileRequest);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            if (readFileRequest == null) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'readFileRequest' was not present! Struct: " + toString());
            }
            // check for sub-struct validity
            if (readFileRequest != null) {
                readFileRequest.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            READ_FILE_REQUEST((short) 1, "readFileRequest");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // READ_FILE_REQUEST
                    return READ_FILE_REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class readFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public readFile_argsStandardScheme getScheme() {
                return new readFile_argsStandardScheme();
            }
        }

        private static class readFile_argsStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<readFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, readFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // READ_FILE_REQUEST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.readFileRequest = new ReadFileRequest();
                            struct.readFileRequest.read(iprot);
                            struct.setReadFileRequestIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, readFile_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.readFileRequest != null) {
                    oprot.writeFieldBegin(READ_FILE_REQUEST_FIELD_DESC);
                    struct.readFileRequest.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class readFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public readFile_argsTupleScheme getScheme() {
                return new readFile_argsTupleScheme();
            }
        }

        private static class readFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, readFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.readFileRequest.write(oprot);
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, readFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.readFileRequest = new ReadFileRequest();
                struct.readFileRequest.read(iprot);
                struct.setReadFileRequestIsSet(true);
            }
        }
    }

    public static class readFile_result
        implements org.apache.thrift.TBase<readFile_result, readFile_result._Fields>, java.io.Serializable, Cloneable,
        Comparable<readFile_result> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("readFile_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField AUTH_ERROR_FIELD_DESC =
            new org.apache.thrift.protocol.TField("authError", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField IO_FIELD_DESC =
            new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new readFile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new readFile_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        ReadFileResponse.class)));
            tmpMap.put(_Fields.AUTH_ERROR,
                new org.apache.thrift.meta_data.FieldMetaData("authError",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        AuthorizationError.class)));
            tmpMap.put(_Fields.IO,
                new org.apache.thrift.meta_data.FieldMetaData("io", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        IOError.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readFile_result.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        ReadFileResponse success; // required
        public @org.apache.thrift.annotation.Nullable
        AuthorizationError authError; // required
        public @org.apache.thrift.annotation.Nullable
        IOError io; // required

        public readFile_result() {
        }

        public readFile_result(
            ReadFileResponse success,
            AuthorizationError authError,
            IOError io) {
            this();
            this.success = success;
            this.authError = authError;
            this.io = io;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public readFile_result(readFile_result other) {
            if (other.isSetSuccess()) {
                this.success = new ReadFileResponse(other.success);
            }
            if (other.isSetAuthError()) {
                this.authError = new AuthorizationError(other.authError);
            }
            if (other.isSetIo()) {
                this.io = new IOError(other.io);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public readFile_result deepCopy() {
            return new readFile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.authError = null;
            this.io = null;
        }

        @org.apache.thrift.annotation.Nullable
        public ReadFileResponse getSuccess() {
            return this.success;
        }

        public readFile_result setSuccess(@org.apache.thrift.annotation.Nullable ReadFileResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public AuthorizationError getAuthError() {
            return this.authError;
        }

        public readFile_result setAuthError(@org.apache.thrift.annotation.Nullable AuthorizationError authError) {
            this.authError = authError;
            return this;
        }

        public void unsetAuthError() {
            this.authError = null;
        }

        /**
         * Returns true if field authError is set (has been assigned a value) and false otherwise
         */
        public boolean isSetAuthError() {
            return this.authError != null;
        }

        public void setAuthErrorIsSet(boolean value) {
            if (!value) {
                this.authError = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public IOError getIo() {
            return this.io;
        }

        public readFile_result setIo(@org.apache.thrift.annotation.Nullable IOError io) {
            this.io = io;
            return this;
        }

        public void unsetIo() {
            this.io = null;
        }

        /**
         * Returns true if field io is set (has been assigned a value) and false otherwise
         */
        public boolean isSetIo() {
            return this.io != null;
        }

        public void setIoIsSet(boolean value) {
            if (!value) {
                this.io = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((ReadFileResponse) value);
                }
                break;

            case AUTH_ERROR:
                if (value == null) {
                    unsetAuthError();
                } else {
                    setAuthError((AuthorizationError) value);
                }
                break;

            case IO:
                if (value == null) {
                    unsetIo();
                } else {
                    setIo((IOError) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case AUTH_ERROR:
                return getAuthError();

            case IO:
                return getIo();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case AUTH_ERROR:
                return isSetAuthError();
            case IO:
                return isSetIo();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof readFile_result) {
                return this.equals((readFile_result) that);
            }
            return false;
        }

        public boolean equals(readFile_result that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success)) {
                    return false;
                }
                if (!this.success.equals(that.success)) {
                    return false;
                }
            }

            boolean this_present_authError = true && this.isSetAuthError();
            boolean that_present_authError = true && that.isSetAuthError();
            if (this_present_authError || that_present_authError) {
                if (!(this_present_authError && that_present_authError)) {
                    return false;
                }
                if (!this.authError.equals(that.authError)) {
                    return false;
                }
            }

            boolean this_present_io = true && this.isSetIo();
            boolean that_present_io = true && that.isSetIo();
            if (this_present_io || that_present_io) {
                if (!(this_present_io && that_present_io)) {
                    return false;
                }
                if (!this.io.equals(that.io)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess()) {
                hashCode = hashCode * 8191 + success.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetAuthError()) ? 131071 : 524287);
            if (isSetAuthError()) {
                hashCode = hashCode * 8191 + authError.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
            if (isSetIo()) {
                hashCode = hashCode * 8191 + io.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(readFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetAuthError(), other.isSetAuthError());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAuthError()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authError, other.authError);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetIo(), other.isSetIo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("readFile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("authError:");
            if (this.authError == null) {
                sb.append("null");
            } else {
                sb.append(this.authError);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("io:");
            if (this.io == null) {
                sb.append("null");
            } else {
                sb.append(this.io);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            AUTH_ERROR((short) 1, "authError"),
            IO((short) 2, "io");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // AUTH_ERROR
                    return AUTH_ERROR;
                case 2: // IO
                    return IO;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class readFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public readFile_resultStandardScheme getScheme() {
                return new readFile_resultStandardScheme();
            }
        }

        private static class readFile_resultStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<readFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, readFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.success = new ReadFileResponse();
                            struct.success.read(iprot);
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // AUTH_ERROR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.authError = new AuthorizationError();
                            struct.authError.read(iprot);
                            struct.setAuthErrorIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // IO
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.io = new IOError();
                            struct.io.read(iprot);
                            struct.setIoIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, readFile_result struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.authError != null) {
                    oprot.writeFieldBegin(AUTH_ERROR_FIELD_DESC);
                    struct.authError.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.io != null) {
                    oprot.writeFieldBegin(IO_FIELD_DESC);
                    struct.io.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class readFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public readFile_resultTupleScheme getScheme() {
                return new readFile_resultTupleScheme();
            }
        }

        private static class readFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, readFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAuthError()) {
                    optionals.set(1);
                }
                if (struct.isSetIo()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetAuthError()) {
                    struct.authError.write(oprot);
                }
                if (struct.isSetIo()) {
                    struct.io.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, readFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.success = new ReadFileResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.authError = new AuthorizationError();
                    struct.authError.read(iprot);
                    struct.setAuthErrorIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.io = new IOError();
                    struct.io.read(iprot);
                    struct.setIoIsSet(true);
                }
            }
        }
    }

    public static class putFile_args
        implements org.apache.thrift.TBase<putFile_args, putFile_args._Fields>, java.io.Serializable, Cloneable,
        Comparable<putFile_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("putFile_args");
        private static final org.apache.thrift.protocol.TField PUT_FILE_REQUEST_FIELD_DESC =
            new org.apache.thrift.protocol.TField("putFileRequest", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new putFile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new putFile_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PUT_FILE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("putFileRequest",
                org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                    PutFileRequest.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putFile_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        PutFileRequest putFileRequest; // required

        public putFile_args() {
        }

        public putFile_args(
            PutFileRequest putFileRequest) {
            this();
            this.putFileRequest = putFileRequest;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public putFile_args(putFile_args other) {
            if (other.isSetPutFileRequest()) {
                this.putFileRequest = new PutFileRequest(other.putFileRequest);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public putFile_args deepCopy() {
            return new putFile_args(this);
        }

        @Override
        public void clear() {
            this.putFileRequest = null;
        }

        @org.apache.thrift.annotation.Nullable
        public PutFileRequest getPutFileRequest() {
            return this.putFileRequest;
        }

        public putFile_args setPutFileRequest(@org.apache.thrift.annotation.Nullable PutFileRequest putFileRequest) {
            this.putFileRequest = putFileRequest;
            return this;
        }

        public void unsetPutFileRequest() {
            this.putFileRequest = null;
        }

        /**
         * Returns true if field putFileRequest is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPutFileRequest() {
            return this.putFileRequest != null;
        }

        public void setPutFileRequestIsSet(boolean value) {
            if (!value) {
                this.putFileRequest = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case PUT_FILE_REQUEST:
                if (value == null) {
                    unsetPutFileRequest();
                } else {
                    setPutFileRequest((PutFileRequest) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case PUT_FILE_REQUEST:
                return getPutFileRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case PUT_FILE_REQUEST:
                return isSetPutFileRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof putFile_args) {
                return this.equals((putFile_args) that);
            }
            return false;
        }

        public boolean equals(putFile_args that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_putFileRequest = true && this.isSetPutFileRequest();
            boolean that_present_putFileRequest = true && that.isSetPutFileRequest();
            if (this_present_putFileRequest || that_present_putFileRequest) {
                if (!(this_present_putFileRequest && that_present_putFileRequest)) {
                    return false;
                }
                if (!this.putFileRequest.equals(that.putFileRequest)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetPutFileRequest()) ? 131071 : 524287);
            if (isSetPutFileRequest()) {
                hashCode = hashCode * 8191 + putFileRequest.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(putFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetPutFileRequest(), other.isSetPutFileRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPutFileRequest()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.putFileRequest, other.putFileRequest);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("putFile_args(");
            boolean first = true;

            sb.append("putFileRequest:");
            if (this.putFileRequest == null) {
                sb.append("null");
            } else {
                sb.append(this.putFileRequest);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            if (putFileRequest == null) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'putFileRequest' was not present! Struct: " + toString());
            }
            // check for sub-struct validity
            if (putFileRequest != null) {
                putFileRequest.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PUT_FILE_REQUEST((short) 1, "putFileRequest");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // PUT_FILE_REQUEST
                    return PUT_FILE_REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class putFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public putFile_argsStandardScheme getScheme() {
                return new putFile_argsStandardScheme();
            }
        }

        private static class putFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<putFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, putFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // PUT_FILE_REQUEST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.putFileRequest = new PutFileRequest();
                            struct.putFileRequest.read(iprot);
                            struct.setPutFileRequestIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, putFile_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.putFileRequest != null) {
                    oprot.writeFieldBegin(PUT_FILE_REQUEST_FIELD_DESC);
                    struct.putFileRequest.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class putFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public putFile_argsTupleScheme getScheme() {
                return new putFile_argsTupleScheme();
            }
        }

        private static class putFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<putFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, putFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.putFileRequest.write(oprot);
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, putFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.putFileRequest = new PutFileRequest();
                struct.putFileRequest.read(iprot);
                struct.setPutFileRequestIsSet(true);
            }
        }
    }

    public static class putFile_result
        implements org.apache.thrift.TBase<putFile_result, putFile_result._Fields>, java.io.Serializable, Cloneable,
        Comparable<putFile_result> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("putFile_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField AUTH_ERROR_FIELD_DESC =
            new org.apache.thrift.protocol.TField("authError", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField IO_FIELD_DESC =
            new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new putFile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new putFile_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        FileInfo.class)));
            tmpMap.put(_Fields.AUTH_ERROR,
                new org.apache.thrift.meta_data.FieldMetaData("authError",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        AuthorizationError.class)));
            tmpMap.put(_Fields.IO,
                new org.apache.thrift.meta_data.FieldMetaData("io", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        IOError.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putFile_result.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        FileInfo success; // required
        public @org.apache.thrift.annotation.Nullable
        AuthorizationError authError; // required
        public @org.apache.thrift.annotation.Nullable
        IOError io; // required

        public putFile_result() {
        }

        public putFile_result(
            FileInfo success,
            AuthorizationError authError,
            IOError io) {
            this();
            this.success = success;
            this.authError = authError;
            this.io = io;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public putFile_result(putFile_result other) {
            if (other.isSetSuccess()) {
                this.success = new FileInfo(other.success);
            }
            if (other.isSetAuthError()) {
                this.authError = new AuthorizationError(other.authError);
            }
            if (other.isSetIo()) {
                this.io = new IOError(other.io);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public putFile_result deepCopy() {
            return new putFile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.authError = null;
            this.io = null;
        }

        @org.apache.thrift.annotation.Nullable
        public FileInfo getSuccess() {
            return this.success;
        }

        public putFile_result setSuccess(@org.apache.thrift.annotation.Nullable FileInfo success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public AuthorizationError getAuthError() {
            return this.authError;
        }

        public putFile_result setAuthError(@org.apache.thrift.annotation.Nullable AuthorizationError authError) {
            this.authError = authError;
            return this;
        }

        public void unsetAuthError() {
            this.authError = null;
        }

        /**
         * Returns true if field authError is set (has been assigned a value) and false otherwise
         */
        public boolean isSetAuthError() {
            return this.authError != null;
        }

        public void setAuthErrorIsSet(boolean value) {
            if (!value) {
                this.authError = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public IOError getIo() {
            return this.io;
        }

        public putFile_result setIo(@org.apache.thrift.annotation.Nullable IOError io) {
            this.io = io;
            return this;
        }

        public void unsetIo() {
            this.io = null;
        }

        /**
         * Returns true if field io is set (has been assigned a value) and false otherwise
         */
        public boolean isSetIo() {
            return this.io != null;
        }

        public void setIoIsSet(boolean value) {
            if (!value) {
                this.io = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((FileInfo) value);
                }
                break;

            case AUTH_ERROR:
                if (value == null) {
                    unsetAuthError();
                } else {
                    setAuthError((AuthorizationError) value);
                }
                break;

            case IO:
                if (value == null) {
                    unsetIo();
                } else {
                    setIo((IOError) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case AUTH_ERROR:
                return getAuthError();

            case IO:
                return getIo();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case AUTH_ERROR:
                return isSetAuthError();
            case IO:
                return isSetIo();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof putFile_result) {
                return this.equals((putFile_result) that);
            }
            return false;
        }

        public boolean equals(putFile_result that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success)) {
                    return false;
                }
                if (!this.success.equals(that.success)) {
                    return false;
                }
            }

            boolean this_present_authError = true && this.isSetAuthError();
            boolean that_present_authError = true && that.isSetAuthError();
            if (this_present_authError || that_present_authError) {
                if (!(this_present_authError && that_present_authError)) {
                    return false;
                }
                if (!this.authError.equals(that.authError)) {
                    return false;
                }
            }

            boolean this_present_io = true && this.isSetIo();
            boolean that_present_io = true && that.isSetIo();
            if (this_present_io || that_present_io) {
                if (!(this_present_io && that_present_io)) {
                    return false;
                }
                if (!this.io.equals(that.io)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess()) {
                hashCode = hashCode * 8191 + success.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetAuthError()) ? 131071 : 524287);
            if (isSetAuthError()) {
                hashCode = hashCode * 8191 + authError.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
            if (isSetIo()) {
                hashCode = hashCode * 8191 + io.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(putFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetAuthError(), other.isSetAuthError());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAuthError()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authError, other.authError);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetIo(), other.isSetIo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("putFile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("authError:");
            if (this.authError == null) {
                sb.append("null");
            } else {
                sb.append(this.authError);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("io:");
            if (this.io == null) {
                sb.append("null");
            } else {
                sb.append(this.io);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            AUTH_ERROR((short) 1, "authError"),
            IO((short) 2, "io");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // AUTH_ERROR
                    return AUTH_ERROR;
                case 2: // IO
                    return IO;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class putFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public putFile_resultStandardScheme getScheme() {
                return new putFile_resultStandardScheme();
            }
        }

        private static class putFile_resultStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<putFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, putFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.success = new FileInfo();
                            struct.success.read(iprot);
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // AUTH_ERROR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.authError = new AuthorizationError();
                            struct.authError.read(iprot);
                            struct.setAuthErrorIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // IO
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.io = new IOError();
                            struct.io.read(iprot);
                            struct.setIoIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, putFile_result struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.authError != null) {
                    oprot.writeFieldBegin(AUTH_ERROR_FIELD_DESC);
                    struct.authError.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.io != null) {
                    oprot.writeFieldBegin(IO_FIELD_DESC);
                    struct.io.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class putFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public putFile_resultTupleScheme getScheme() {
                return new putFile_resultTupleScheme();
            }
        }

        private static class putFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<putFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, putFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAuthError()) {
                    optionals.set(1);
                }
                if (struct.isSetIo()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetAuthError()) {
                    struct.authError.write(oprot);
                }
                if (struct.isSetIo()) {
                    struct.io.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, putFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.success = new FileInfo();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.authError = new AuthorizationError();
                    struct.authError.read(iprot);
                    struct.setAuthErrorIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.io = new IOError();
                    struct.io.read(iprot);
                    struct.setIoIsSet(true);
                }
            }
        }
    }

    public static class deleteFile_args
        implements org.apache.thrift.TBase<deleteFile_args, deleteFile_args._Fields>, java.io.Serializable, Cloneable,
        Comparable<deleteFile_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("deleteFile_args");
        private static final org.apache.thrift.protocol.TField DELETE_FILE_REQUEST_FIELD_DESC =
            new org.apache.thrift.protocol.TField("deleteFileRequest", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new deleteFile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new deleteFile_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DELETE_FILE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("deleteFileRequest",
                org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                    DeleteFileRequest.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFile_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        DeleteFileRequest deleteFileRequest; // required

        public deleteFile_args() {
        }

        public deleteFile_args(
            DeleteFileRequest deleteFileRequest) {
            this();
            this.deleteFileRequest = deleteFileRequest;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteFile_args(deleteFile_args other) {
            if (other.isSetDeleteFileRequest()) {
                this.deleteFileRequest = new DeleteFileRequest(other.deleteFileRequest);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public deleteFile_args deepCopy() {
            return new deleteFile_args(this);
        }

        @Override
        public void clear() {
            this.deleteFileRequest = null;
        }

        @org.apache.thrift.annotation.Nullable
        public DeleteFileRequest getDeleteFileRequest() {
            return this.deleteFileRequest;
        }

        public deleteFile_args setDeleteFileRequest(
            @org.apache.thrift.annotation.Nullable DeleteFileRequest deleteFileRequest) {
            this.deleteFileRequest = deleteFileRequest;
            return this;
        }

        public void unsetDeleteFileRequest() {
            this.deleteFileRequest = null;
        }

        /**
         * Returns true if field deleteFileRequest is set (has been assigned a value) and false otherwise
         */
        public boolean isSetDeleteFileRequest() {
            return this.deleteFileRequest != null;
        }

        public void setDeleteFileRequestIsSet(boolean value) {
            if (!value) {
                this.deleteFileRequest = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case DELETE_FILE_REQUEST:
                if (value == null) {
                    unsetDeleteFileRequest();
                } else {
                    setDeleteFileRequest((DeleteFileRequest) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case DELETE_FILE_REQUEST:
                return getDeleteFileRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case DELETE_FILE_REQUEST:
                return isSetDeleteFileRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof deleteFile_args) {
                return this.equals((deleteFile_args) that);
            }
            return false;
        }

        public boolean equals(deleteFile_args that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_deleteFileRequest = true && this.isSetDeleteFileRequest();
            boolean that_present_deleteFileRequest = true && that.isSetDeleteFileRequest();
            if (this_present_deleteFileRequest || that_present_deleteFileRequest) {
                if (!(this_present_deleteFileRequest && that_present_deleteFileRequest)) {
                    return false;
                }
                if (!this.deleteFileRequest.equals(that.deleteFileRequest)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetDeleteFileRequest()) ? 131071 : 524287);
            if (isSetDeleteFileRequest()) {
                hashCode = hashCode * 8191 + deleteFileRequest.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(deleteFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetDeleteFileRequest(), other.isSetDeleteFileRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDeleteFileRequest()) {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.deleteFileRequest, other.deleteFileRequest);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteFile_args(");
            boolean first = true;

            sb.append("deleteFileRequest:");
            if (this.deleteFileRequest == null) {
                sb.append("null");
            } else {
                sb.append(this.deleteFileRequest);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            if (deleteFileRequest == null) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'deleteFileRequest' was not present! Struct: " + toString());
            }
            // check for sub-struct validity
            if (deleteFileRequest != null) {
                deleteFileRequest.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            DELETE_FILE_REQUEST((short) 1, "deleteFileRequest");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // DELETE_FILE_REQUEST
                    return DELETE_FILE_REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class deleteFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteFile_argsStandardScheme getScheme() {
                return new deleteFile_argsStandardScheme();
            }
        }

        private static class deleteFile_argsStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<deleteFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // DELETE_FILE_REQUEST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.deleteFileRequest = new DeleteFileRequest();
                            struct.deleteFileRequest.read(iprot);
                            struct.setDeleteFileRequestIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFile_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.deleteFileRequest != null) {
                    oprot.writeFieldBegin(DELETE_FILE_REQUEST_FIELD_DESC);
                    struct.deleteFileRequest.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteFile_argsTupleScheme getScheme() {
                return new deleteFile_argsTupleScheme();
            }
        }

        private static class deleteFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.deleteFileRequest.write(oprot);
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteFile_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.deleteFileRequest = new DeleteFileRequest();
                struct.deleteFileRequest.read(iprot);
                struct.setDeleteFileRequestIsSet(true);
            }
        }
    }

    public static class deleteFile_result
        implements org.apache.thrift.TBase<deleteFile_result, deleteFile_result._Fields>, java.io.Serializable,
        Cloneable,
        Comparable<deleteFile_result> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("deleteFile_result");
        private static final org.apache.thrift.protocol.TField AUTH_ERROR_FIELD_DESC =
            new org.apache.thrift.protocol.TField("authError", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField IO_FIELD_DESC =
            new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new deleteFile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new deleteFile_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.AUTH_ERROR,
                new org.apache.thrift.meta_data.FieldMetaData("authError",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        AuthorizationError.class)));
            tmpMap.put(_Fields.IO,
                new org.apache.thrift.meta_data.FieldMetaData("io", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        IOError.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFile_result.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        AuthorizationError authError; // required
        public @org.apache.thrift.annotation.Nullable
        IOError io; // required

        public deleteFile_result() {
        }

        public deleteFile_result(
            AuthorizationError authError,
            IOError io) {
            this();
            this.authError = authError;
            this.io = io;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteFile_result(deleteFile_result other) {
            if (other.isSetAuthError()) {
                this.authError = new AuthorizationError(other.authError);
            }
            if (other.isSetIo()) {
                this.io = new IOError(other.io);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public deleteFile_result deepCopy() {
            return new deleteFile_result(this);
        }

        @Override
        public void clear() {
            this.authError = null;
            this.io = null;
        }

        @org.apache.thrift.annotation.Nullable
        public AuthorizationError getAuthError() {
            return this.authError;
        }

        public deleteFile_result setAuthError(@org.apache.thrift.annotation.Nullable AuthorizationError authError) {
            this.authError = authError;
            return this;
        }

        public void unsetAuthError() {
            this.authError = null;
        }

        /**
         * Returns true if field authError is set (has been assigned a value) and false otherwise
         */
        public boolean isSetAuthError() {
            return this.authError != null;
        }

        public void setAuthErrorIsSet(boolean value) {
            if (!value) {
                this.authError = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public IOError getIo() {
            return this.io;
        }

        public deleteFile_result setIo(@org.apache.thrift.annotation.Nullable IOError io) {
            this.io = io;
            return this;
        }

        public void unsetIo() {
            this.io = null;
        }

        /**
         * Returns true if field io is set (has been assigned a value) and false otherwise
         */
        public boolean isSetIo() {
            return this.io != null;
        }

        public void setIoIsSet(boolean value) {
            if (!value) {
                this.io = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case AUTH_ERROR:
                if (value == null) {
                    unsetAuthError();
                } else {
                    setAuthError((AuthorizationError) value);
                }
                break;

            case IO:
                if (value == null) {
                    unsetIo();
                } else {
                    setIo((IOError) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case AUTH_ERROR:
                return getAuthError();

            case IO:
                return getIo();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case AUTH_ERROR:
                return isSetAuthError();
            case IO:
                return isSetIo();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof deleteFile_result) {
                return this.equals((deleteFile_result) that);
            }
            return false;
        }

        public boolean equals(deleteFile_result that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_authError = true && this.isSetAuthError();
            boolean that_present_authError = true && that.isSetAuthError();
            if (this_present_authError || that_present_authError) {
                if (!(this_present_authError && that_present_authError)) {
                    return false;
                }
                if (!this.authError.equals(that.authError)) {
                    return false;
                }
            }

            boolean this_present_io = true && this.isSetIo();
            boolean that_present_io = true && that.isSetIo();
            if (this_present_io || that_present_io) {
                if (!(this_present_io && that_present_io)) {
                    return false;
                }
                if (!this.io.equals(that.io)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetAuthError()) ? 131071 : 524287);
            if (isSetAuthError()) {
                hashCode = hashCode * 8191 + authError.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
            if (isSetIo()) {
                hashCode = hashCode * 8191 + io.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(deleteFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetAuthError(), other.isSetAuthError());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAuthError()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authError, other.authError);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetIo(), other.isSetIo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteFile_result(");
            boolean first = true;

            sb.append("authError:");
            if (this.authError == null) {
                sb.append("null");
            } else {
                sb.append(this.authError);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("io:");
            if (this.io == null) {
                sb.append("null");
            } else {
                sb.append(this.io);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            AUTH_ERROR((short) 1, "authError"),
            IO((short) 2, "io");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // AUTH_ERROR
                    return AUTH_ERROR;
                case 2: // IO
                    return IO;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class deleteFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteFile_resultStandardScheme getScheme() {
                return new deleteFile_resultStandardScheme();
            }
        }

        private static class deleteFile_resultStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<deleteFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // AUTH_ERROR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.authError = new AuthorizationError();
                            struct.authError.read(iprot);
                            struct.setAuthErrorIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // IO
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.io = new IOError();
                            struct.io.read(iprot);
                            struct.setIoIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFile_result struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.authError != null) {
                    oprot.writeFieldBegin(AUTH_ERROR_FIELD_DESC);
                    struct.authError.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.io != null) {
                    oprot.writeFieldBegin(IO_FIELD_DESC);
                    struct.io.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteFile_resultTupleScheme getScheme() {
                return new deleteFile_resultTupleScheme();
            }
        }

        private static class deleteFile_resultTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<deleteFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetAuthError()) {
                    optionals.set(0);
                }
                if (struct.isSetIo()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetAuthError()) {
                    struct.authError.write(oprot);
                }
                if (struct.isSetIo()) {
                    struct.io.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteFile_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.authError = new AuthorizationError();
                    struct.authError.read(iprot);
                    struct.setAuthErrorIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.io = new IOError();
                    struct.io.read(iprot);
                    struct.setIoIsSet(true);
                }
            }
        }
    }

    public static class getFileInfo_args
        implements org.apache.thrift.TBase<getFileInfo_args, getFileInfo_args._Fields>, java.io.Serializable, Cloneable,
        Comparable<getFileInfo_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getFileInfo_args");
        private static final org.apache.thrift.protocol.TField GET_FILE_INFO_REQUEST_FIELD_DESC =
            new org.apache.thrift.protocol.TField("getFileInfoRequest", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new getFileInfo_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new getFileInfo_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap
                .put(_Fields.GET_FILE_INFO_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("getFileInfoRequest",
                    org.apache.thrift.TFieldRequirementType.REQUIRED,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        GetFileInfoRequest.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileInfo_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        GetFileInfoRequest getFileInfoRequest; // required

        public getFileInfo_args() {
        }

        public getFileInfo_args(
            GetFileInfoRequest getFileInfoRequest) {
            this();
            this.getFileInfoRequest = getFileInfoRequest;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getFileInfo_args(getFileInfo_args other) {
            if (other.isSetGetFileInfoRequest()) {
                this.getFileInfoRequest = new GetFileInfoRequest(other.getFileInfoRequest);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public getFileInfo_args deepCopy() {
            return new getFileInfo_args(this);
        }

        @Override
        public void clear() {
            this.getFileInfoRequest = null;
        }

        @org.apache.thrift.annotation.Nullable
        public GetFileInfoRequest getGetFileInfoRequest() {
            return this.getFileInfoRequest;
        }

        public getFileInfo_args setGetFileInfoRequest(
            @org.apache.thrift.annotation.Nullable GetFileInfoRequest getFileInfoRequest) {
            this.getFileInfoRequest = getFileInfoRequest;
            return this;
        }

        public void unsetGetFileInfoRequest() {
            this.getFileInfoRequest = null;
        }

        /**
         * Returns true if field getFileInfoRequest is set (has been assigned a value) and false otherwise
         */
        public boolean isSetGetFileInfoRequest() {
            return this.getFileInfoRequest != null;
        }

        public void setGetFileInfoRequestIsSet(boolean value) {
            if (!value) {
                this.getFileInfoRequest = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case GET_FILE_INFO_REQUEST:
                if (value == null) {
                    unsetGetFileInfoRequest();
                } else {
                    setGetFileInfoRequest((GetFileInfoRequest) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case GET_FILE_INFO_REQUEST:
                return getGetFileInfoRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case GET_FILE_INFO_REQUEST:
                return isSetGetFileInfoRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof getFileInfo_args) {
                return this.equals((getFileInfo_args) that);
            }
            return false;
        }

        public boolean equals(getFileInfo_args that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_getFileInfoRequest = true && this.isSetGetFileInfoRequest();
            boolean that_present_getFileInfoRequest = true && that.isSetGetFileInfoRequest();
            if (this_present_getFileInfoRequest || that_present_getFileInfoRequest) {
                if (!(this_present_getFileInfoRequest && that_present_getFileInfoRequest)) {
                    return false;
                }
                if (!this.getFileInfoRequest.equals(that.getFileInfoRequest)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetGetFileInfoRequest()) ? 131071 : 524287);
            if (isSetGetFileInfoRequest()) {
                hashCode = hashCode * 8191 + getFileInfoRequest.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(getFileInfo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetGetFileInfoRequest(), other.isSetGetFileInfoRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetGetFileInfoRequest()) {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.getFileInfoRequest, other.getFileInfoRequest);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getFileInfo_args(");
            boolean first = true;

            sb.append("getFileInfoRequest:");
            if (this.getFileInfoRequest == null) {
                sb.append("null");
            } else {
                sb.append(this.getFileInfoRequest);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            if (getFileInfoRequest == null) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'getFileInfoRequest' was not present! Struct: " + toString());
            }
            // check for sub-struct validity
            if (getFileInfoRequest != null) {
                getFileInfoRequest.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            GET_FILE_INFO_REQUEST((short) 1, "getFileInfoRequest");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // GET_FILE_INFO_REQUEST
                    return GET_FILE_INFO_REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class getFileInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getFileInfo_argsStandardScheme getScheme() {
                return new getFileInfo_argsStandardScheme();
            }
        }

        private static class getFileInfo_argsStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<getFileInfo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getFileInfo_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // GET_FILE_INFO_REQUEST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.getFileInfoRequest = new GetFileInfoRequest();
                            struct.getFileInfoRequest.read(iprot);
                            struct.setGetFileInfoRequestIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getFileInfo_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.getFileInfoRequest != null) {
                    oprot.writeFieldBegin(GET_FILE_INFO_REQUEST_FIELD_DESC);
                    struct.getFileInfoRequest.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getFileInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getFileInfo_argsTupleScheme getScheme() {
                return new getFileInfo_argsTupleScheme();
            }
        }

        private static class getFileInfo_argsTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<getFileInfo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getFileInfo_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.getFileInfoRequest.write(oprot);
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getFileInfo_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.getFileInfoRequest = new GetFileInfoRequest();
                struct.getFileInfoRequest.read(iprot);
                struct.setGetFileInfoRequestIsSet(true);
            }
        }
    }

    public static class getFileInfo_result
        implements org.apache.thrift.TBase<getFileInfo_result, getFileInfo_result._Fields>, java.io.Serializable,
        Cloneable, Comparable<getFileInfo_result> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getFileInfo_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField AUTH_ERROR_FIELD_DESC =
            new org.apache.thrift.protocol.TField("authError", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField IO_FIELD_DESC =
            new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new getFileInfo_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new getFileInfo_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        FileInfo.class)));
            tmpMap.put(_Fields.AUTH_ERROR,
                new org.apache.thrift.meta_data.FieldMetaData("authError",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        AuthorizationError.class)));
            tmpMap.put(_Fields.IO,
                new org.apache.thrift.meta_data.FieldMetaData("io", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        IOError.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileInfo_result.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        FileInfo success; // required
        public @org.apache.thrift.annotation.Nullable
        AuthorizationError authError; // required
        public @org.apache.thrift.annotation.Nullable
        IOError io; // required

        public getFileInfo_result() {
        }

        public getFileInfo_result(
            FileInfo success,
            AuthorizationError authError,
            IOError io) {
            this();
            this.success = success;
            this.authError = authError;
            this.io = io;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getFileInfo_result(getFileInfo_result other) {
            if (other.isSetSuccess()) {
                this.success = new FileInfo(other.success);
            }
            if (other.isSetAuthError()) {
                this.authError = new AuthorizationError(other.authError);
            }
            if (other.isSetIo()) {
                this.io = new IOError(other.io);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public getFileInfo_result deepCopy() {
            return new getFileInfo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.authError = null;
            this.io = null;
        }

        @org.apache.thrift.annotation.Nullable
        public FileInfo getSuccess() {
            return this.success;
        }

        public getFileInfo_result setSuccess(@org.apache.thrift.annotation.Nullable FileInfo success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public AuthorizationError getAuthError() {
            return this.authError;
        }

        public getFileInfo_result setAuthError(@org.apache.thrift.annotation.Nullable AuthorizationError authError) {
            this.authError = authError;
            return this;
        }

        public void unsetAuthError() {
            this.authError = null;
        }

        /**
         * Returns true if field authError is set (has been assigned a value) and false otherwise
         */
        public boolean isSetAuthError() {
            return this.authError != null;
        }

        public void setAuthErrorIsSet(boolean value) {
            if (!value) {
                this.authError = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public IOError getIo() {
            return this.io;
        }

        public getFileInfo_result setIo(@org.apache.thrift.annotation.Nullable IOError io) {
            this.io = io;
            return this;
        }

        public void unsetIo() {
            this.io = null;
        }

        /**
         * Returns true if field io is set (has been assigned a value) and false otherwise
         */
        public boolean isSetIo() {
            return this.io != null;
        }

        public void setIoIsSet(boolean value) {
            if (!value) {
                this.io = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((FileInfo) value);
                }
                break;

            case AUTH_ERROR:
                if (value == null) {
                    unsetAuthError();
                } else {
                    setAuthError((AuthorizationError) value);
                }
                break;

            case IO:
                if (value == null) {
                    unsetIo();
                } else {
                    setIo((IOError) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case AUTH_ERROR:
                return getAuthError();

            case IO:
                return getIo();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case AUTH_ERROR:
                return isSetAuthError();
            case IO:
                return isSetIo();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof getFileInfo_result) {
                return this.equals((getFileInfo_result) that);
            }
            return false;
        }

        public boolean equals(getFileInfo_result that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success)) {
                    return false;
                }
                if (!this.success.equals(that.success)) {
                    return false;
                }
            }

            boolean this_present_authError = true && this.isSetAuthError();
            boolean that_present_authError = true && that.isSetAuthError();
            if (this_present_authError || that_present_authError) {
                if (!(this_present_authError && that_present_authError)) {
                    return false;
                }
                if (!this.authError.equals(that.authError)) {
                    return false;
                }
            }

            boolean this_present_io = true && this.isSetIo();
            boolean that_present_io = true && that.isSetIo();
            if (this_present_io || that_present_io) {
                if (!(this_present_io && that_present_io)) {
                    return false;
                }
                if (!this.io.equals(that.io)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess()) {
                hashCode = hashCode * 8191 + success.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetAuthError()) ? 131071 : 524287);
            if (isSetAuthError()) {
                hashCode = hashCode * 8191 + authError.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
            if (isSetIo()) {
                hashCode = hashCode * 8191 + io.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(getFileInfo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetAuthError(), other.isSetAuthError());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAuthError()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authError, other.authError);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetIo(), other.isSetIo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getFileInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("authError:");
            if (this.authError == null) {
                sb.append("null");
            } else {
                sb.append(this.authError);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("io:");
            if (this.io == null) {
                sb.append("null");
            } else {
                sb.append(this.io);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            AUTH_ERROR((short) 1, "authError"),
            IO((short) 2, "io");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // AUTH_ERROR
                    return AUTH_ERROR;
                case 2: // IO
                    return IO;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class getFileInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getFileInfo_resultStandardScheme getScheme() {
                return new getFileInfo_resultStandardScheme();
            }
        }

        private static class getFileInfo_resultStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<getFileInfo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getFileInfo_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.success = new FileInfo();
                            struct.success.read(iprot);
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // AUTH_ERROR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.authError = new AuthorizationError();
                            struct.authError.read(iprot);
                            struct.setAuthErrorIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // IO
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.io = new IOError();
                            struct.io.read(iprot);
                            struct.setIoIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getFileInfo_result struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.authError != null) {
                    oprot.writeFieldBegin(AUTH_ERROR_FIELD_DESC);
                    struct.authError.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.io != null) {
                    oprot.writeFieldBegin(IO_FIELD_DESC);
                    struct.io.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getFileInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getFileInfo_resultTupleScheme getScheme() {
                return new getFileInfo_resultTupleScheme();
            }
        }

        private static class getFileInfo_resultTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<getFileInfo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getFileInfo_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAuthError()) {
                    optionals.set(1);
                }
                if (struct.isSetIo()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetAuthError()) {
                    struct.authError.write(oprot);
                }
                if (struct.isSetIo()) {
                    struct.io.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getFileInfo_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.success = new FileInfo();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.authError = new AuthorizationError();
                    struct.authError.read(iprot);
                    struct.setAuthErrorIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.io = new IOError();
                    struct.io.read(iprot);
                    struct.setIoIsSet(true);
                }
            }
        }
    }

    public static class listFileInfos_args
        implements org.apache.thrift.TBase<listFileInfos_args, listFileInfos_args._Fields>, java.io.Serializable,
        Cloneable, Comparable<listFileInfos_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("listFileInfos_args");
        private static final org.apache.thrift.protocol.TField LIST_FILE_INFOS_REQUEST_FIELD_DESC =
            new org.apache.thrift.protocol.TField("listFileInfosRequest", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new listFileInfos_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new listFileInfos_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIST_FILE_INFOS_REQUEST,
                new org.apache.thrift.meta_data.FieldMetaData("listFileInfosRequest",
                    org.apache.thrift.TFieldRequirementType.REQUIRED,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        ListFileInfosRequest.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listFileInfos_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        ListFileInfosRequest listFileInfosRequest; // required

        public listFileInfos_args() {
        }

        public listFileInfos_args(
            ListFileInfosRequest listFileInfosRequest) {
            this();
            this.listFileInfosRequest = listFileInfosRequest;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public listFileInfos_args(listFileInfos_args other) {
            if (other.isSetListFileInfosRequest()) {
                this.listFileInfosRequest = new ListFileInfosRequest(other.listFileInfosRequest);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public listFileInfos_args deepCopy() {
            return new listFileInfos_args(this);
        }

        @Override
        public void clear() {
            this.listFileInfosRequest = null;
        }

        @org.apache.thrift.annotation.Nullable
        public ListFileInfosRequest getListFileInfosRequest() {
            return this.listFileInfosRequest;
        }

        public listFileInfos_args setListFileInfosRequest(
            @org.apache.thrift.annotation.Nullable ListFileInfosRequest listFileInfosRequest) {
            this.listFileInfosRequest = listFileInfosRequest;
            return this;
        }

        public void unsetListFileInfosRequest() {
            this.listFileInfosRequest = null;
        }

        /**
         * Returns true if field listFileInfosRequest is set (has been assigned a value) and false otherwise
         */
        public boolean isSetListFileInfosRequest() {
            return this.listFileInfosRequest != null;
        }

        public void setListFileInfosRequestIsSet(boolean value) {
            if (!value) {
                this.listFileInfosRequest = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case LIST_FILE_INFOS_REQUEST:
                if (value == null) {
                    unsetListFileInfosRequest();
                } else {
                    setListFileInfosRequest((ListFileInfosRequest) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case LIST_FILE_INFOS_REQUEST:
                return getListFileInfosRequest();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case LIST_FILE_INFOS_REQUEST:
                return isSetListFileInfosRequest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof listFileInfos_args) {
                return this.equals((listFileInfos_args) that);
            }
            return false;
        }

        public boolean equals(listFileInfos_args that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_listFileInfosRequest = true && this.isSetListFileInfosRequest();
            boolean that_present_listFileInfosRequest = true && that.isSetListFileInfosRequest();
            if (this_present_listFileInfosRequest || that_present_listFileInfosRequest) {
                if (!(this_present_listFileInfosRequest && that_present_listFileInfosRequest)) {
                    return false;
                }
                if (!this.listFileInfosRequest.equals(that.listFileInfosRequest)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetListFileInfosRequest()) ? 131071 : 524287);
            if (isSetListFileInfosRequest()) {
                hashCode = hashCode * 8191 + listFileInfosRequest.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(listFileInfos_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetListFileInfosRequest(), other.isSetListFileInfosRequest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetListFileInfosRequest()) {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.listFileInfosRequest, other.listFileInfosRequest);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("listFileInfos_args(");
            boolean first = true;

            sb.append("listFileInfosRequest:");
            if (this.listFileInfosRequest == null) {
                sb.append("null");
            } else {
                sb.append(this.listFileInfosRequest);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            if (listFileInfosRequest == null) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'listFileInfosRequest' was not present! Struct: " + toString());
            }
            // check for sub-struct validity
            if (listFileInfosRequest != null) {
                listFileInfosRequest.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            LIST_FILE_INFOS_REQUEST((short) 1, "listFileInfosRequest");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // LIST_FILE_INFOS_REQUEST
                    return LIST_FILE_INFOS_REQUEST;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class listFileInfos_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public listFileInfos_argsStandardScheme getScheme() {
                return new listFileInfos_argsStandardScheme();
            }
        }

        private static class listFileInfos_argsStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<listFileInfos_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, listFileInfos_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // LIST_FILE_INFOS_REQUEST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.listFileInfosRequest = new ListFileInfosRequest();
                            struct.listFileInfosRequest.read(iprot);
                            struct.setListFileInfosRequestIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, listFileInfos_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.listFileInfosRequest != null) {
                    oprot.writeFieldBegin(LIST_FILE_INFOS_REQUEST_FIELD_DESC);
                    struct.listFileInfosRequest.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class listFileInfos_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public listFileInfos_argsTupleScheme getScheme() {
                return new listFileInfos_argsTupleScheme();
            }
        }

        private static class listFileInfos_argsTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<listFileInfos_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, listFileInfos_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.listFileInfosRequest.write(oprot);
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, listFileInfos_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                struct.listFileInfosRequest = new ListFileInfosRequest();
                struct.listFileInfosRequest.read(iprot);
                struct.setListFileInfosRequestIsSet(true);
            }
        }
    }

    public static class listFileInfos_result
        implements org.apache.thrift.TBase<listFileInfos_result, listFileInfos_result._Fields>, java.io.Serializable,
        Cloneable, Comparable<listFileInfos_result> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("listFileInfos_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);
        private static final org.apache.thrift.protocol.TField AUTH_ERROR_FIELD_DESC =
            new org.apache.thrift.protocol.TField("authError", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField IO_FIELD_DESC =
            new org.apache.thrift.protocol.TField("io", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new listFileInfos_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
            new listFileInfos_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                            FileInfo.class))));
            tmpMap.put(_Fields.AUTH_ERROR,
                new org.apache.thrift.meta_data.FieldMetaData("authError",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        AuthorizationError.class)));
            tmpMap.put(_Fields.IO,
                new org.apache.thrift.meta_data.FieldMetaData("io", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                        IOError.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listFileInfos_result.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        java.util.List<FileInfo> success; // required
        public @org.apache.thrift.annotation.Nullable
        AuthorizationError authError; // required
        public @org.apache.thrift.annotation.Nullable
        IOError io; // required

        public listFileInfos_result() {
        }

        public listFileInfos_result(
            java.util.List<FileInfo> success,
            AuthorizationError authError,
            IOError io) {
            this();
            this.success = success;
            this.authError = authError;
            this.io = io;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public listFileInfos_result(listFileInfos_result other) {
            if (other.isSetSuccess()) {
                java.util.List<FileInfo> __this__success = new java.util.ArrayList<FileInfo>(other.success.size());
                for (FileInfo other_element : other.success) {
                    __this__success.add(new FileInfo(other_element));
                }
                this.success = __this__success;
            }
            if (other.isSetAuthError()) {
                this.authError = new AuthorizationError(other.authError);
            }
            if (other.isSetIo()) {
                this.io = new IOError(other.io);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
                TUPLE_SCHEME_FACTORY).getScheme();
        }

        public listFileInfos_result deepCopy() {
            return new listFileInfos_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.authError = null;
            this.io = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.Iterator<FileInfo> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(FileInfo elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<FileInfo>();
            }
            this.success.add(elem);
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.List<FileInfo> getSuccess() {
            return this.success;
        }

        public listFileInfos_result setSuccess(
            @org.apache.thrift.annotation.Nullable java.util.List<FileInfo> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public AuthorizationError getAuthError() {
            return this.authError;
        }

        public listFileInfos_result setAuthError(@org.apache.thrift.annotation.Nullable AuthorizationError authError) {
            this.authError = authError;
            return this;
        }

        public void unsetAuthError() {
            this.authError = null;
        }

        /**
         * Returns true if field authError is set (has been assigned a value) and false otherwise
         */
        public boolean isSetAuthError() {
            return this.authError != null;
        }

        public void setAuthErrorIsSet(boolean value) {
            if (!value) {
                this.authError = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public IOError getIo() {
            return this.io;
        }

        public listFileInfos_result setIo(@org.apache.thrift.annotation.Nullable IOError io) {
            this.io = io;
            return this;
        }

        public void unsetIo() {
            this.io = null;
        }

        /**
         * Returns true if field io is set (has been assigned a value) and false otherwise
         */
        public boolean isSetIo() {
            return this.io != null;
        }

        public void setIoIsSet(boolean value) {
            if (!value) {
                this.io = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((java.util.List<FileInfo>) value);
                }
                break;

            case AUTH_ERROR:
                if (value == null) {
                    unsetAuthError();
                } else {
                    setAuthError((AuthorizationError) value);
                }
                break;

            case IO:
                if (value == null) {
                    unsetIo();
                } else {
                    setIo((IOError) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case AUTH_ERROR:
                return getAuthError();

            case IO:
                return getIo();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case AUTH_ERROR:
                return isSetAuthError();
            case IO:
                return isSetIo();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that instanceof listFileInfos_result) {
                return this.equals((listFileInfos_result) that);
            }
            return false;
        }

        public boolean equals(listFileInfos_result that) {
            if (that == null) {
                return false;
            }
            if (this == that) {
                return true;
            }

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success)) {
                    return false;
                }
                if (!this.success.equals(that.success)) {
                    return false;
                }
            }

            boolean this_present_authError = true && this.isSetAuthError();
            boolean that_present_authError = true && that.isSetAuthError();
            if (this_present_authError || that_present_authError) {
                if (!(this_present_authError && that_present_authError)) {
                    return false;
                }
                if (!this.authError.equals(that.authError)) {
                    return false;
                }
            }

            boolean this_present_io = true && this.isSetIo();
            boolean that_present_io = true && that.isSetIo();
            if (this_present_io || that_present_io) {
                if (!(this_present_io && that_present_io)) {
                    return false;
                }
                if (!this.io.equals(that.io)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess()) {
                hashCode = hashCode * 8191 + success.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetAuthError()) ? 131071 : 524287);
            if (isSetAuthError()) {
                hashCode = hashCode * 8191 + authError.hashCode();
            }

            hashCode = hashCode * 8191 + ((isSetIo()) ? 131071 : 524287);
            if (isSetIo()) {
                hashCode = hashCode * 8191 + io.hashCode();
            }

            return hashCode;
        }

        @Override
        public int compareTo(listFileInfos_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetAuthError(), other.isSetAuthError());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAuthError()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authError, other.authError);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.compare(isSetIo(), other.isSetIo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io, other.io);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("listFileInfos_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("authError:");
            if (this.authError == null) {
                sb.append("null");
            } else {
                sb.append(this.authError);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("io:");
            if (this.io == null) {
                sb.append("null");
            } else {
                sb.append(this.io);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            AUTH_ERROR((short) 1, "authError"),
            IO((short) 2, "io");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // AUTH_ERROR
                    return AUTH_ERROR;
                case 2: // IO
                    return IO;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class listFileInfos_resultStandardSchemeFactory
            implements org.apache.thrift.scheme.SchemeFactory {
            public listFileInfos_resultStandardScheme getScheme() {
                return new listFileInfos_resultStandardScheme();
            }
        }

        private static class listFileInfos_resultStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<listFileInfos_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, listFileInfos_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                                struct.success = new java.util.ArrayList<FileInfo>(_list76.size);
                                @org.apache.thrift.annotation.Nullable FileInfo _elem77;
                                for (int _i78 = 0; _i78 < _list76.size; ++_i78) {
                                    _elem77 = new FileInfo();
                                    _elem77.read(iprot);
                                    struct.success.add(_elem77);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // AUTH_ERROR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.authError = new AuthorizationError();
                            struct.authError.read(iprot);
                            struct.setAuthErrorIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // IO
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.io = new IOError();
                            struct.io.read(iprot);
                            struct.setIoIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, listFileInfos_result struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(
                            new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,
                                struct.success.size()));
                        for (FileInfo _iter79 : struct.success) {
                            _iter79.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.authError != null) {
                    oprot.writeFieldBegin(AUTH_ERROR_FIELD_DESC);
                    struct.authError.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.io != null) {
                    oprot.writeFieldBegin(IO_FIELD_DESC);
                    struct.io.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class listFileInfos_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public listFileInfos_resultTupleScheme getScheme() {
                return new listFileInfos_resultTupleScheme();
            }
        }

        private static class listFileInfos_resultTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<listFileInfos_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, listFileInfos_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetAuthError()) {
                    optionals.set(1);
                }
                if (struct.isSetIo()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (FileInfo _iter80 : struct.success) {
                            _iter80.write(oprot);
                        }
                    }
                }
                if (struct.isSetAuthError()) {
                    struct.authError.write(oprot);
                }
                if (struct.isSetIo()) {
                    struct.io.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, listFileInfos_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list81 =
                            iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
                        struct.success = new java.util.ArrayList<FileInfo>(_list81.size);
                        @org.apache.thrift.annotation.Nullable FileInfo _elem82;
                        for (int _i83 = 0; _i83 < _list81.size; ++_i83) {
                            _elem82 = new FileInfo();
                            _elem82.read(iprot);
                            struct.success.add(_elem82);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.authError = new AuthorizationError();
                    struct.authError.read(iprot);
                    struct.setAuthErrorIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.io = new IOError();
                    struct.io.read(iprot);
                    struct.setIoIsSet(true);
                }
            }
        }
    }

}
