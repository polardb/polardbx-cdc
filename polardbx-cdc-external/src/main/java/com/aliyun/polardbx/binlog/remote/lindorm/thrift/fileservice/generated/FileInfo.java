/**
 * Copyright (c) 2013-Present, Alibaba Group Holding Limited.
 * All rights reserved.
 *
 * Licensed under the Server Side Public License v1 (SSPLv1).
 */
/**
 * Autogenerated by Thrift Compiler (0.14.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.aliyun.polardbx.binlog.remote.lindorm.thrift.fileservice.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-05-26")
public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fields>, java.io.Serializable, Cloneable,
    Comparable<FileInfo> {
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("FileInfo");
    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC =
        new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField BUCKET_FIELD_DESC =
        new org.apache.thrift.protocol.TField("bucket", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC =
        new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I64, (short) 3);
    private static final org.apache.thrift.protocol.TField MODIFY_TIME_FIELD_DESC =
        new org.apache.thrift.protocol.TField("modifyTime", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField CRC64_FIELD_DESC =
        new org.apache.thrift.protocol.TField("crc64", org.apache.thrift.protocol.TType.I64, (short) 5);
    private static final org.apache.thrift.protocol.TField CUSTOMIZE_METAS_FIELD_DESC =
        new org.apache.thrift.protocol.TField("customizeMetas", org.apache.thrift.protocol.TType.MAP, (short) 6);
    private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC =
        new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.MAP, (short) 7);
    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new FileInfoStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FileInfoTupleSchemeFactory();
    // isset id assignments
    private static final int __SIZE_ISSET_ID = 0;
    private static final int __CRC64_ISSET_ID = 1;
    private static final _Fields optionals[] = {
        _Fields.PATH, _Fields.BUCKET, _Fields.SIZE, _Fields.MODIFY_TIME, _Fields.CRC64, _Fields.CUSTOMIZE_METAS,
        _Fields.TAGS};

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
            new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.PATH,
            new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.BUCKET,
            new org.apache.thrift.meta_data.FieldMetaData("bucket", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SIZE,
            new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.MODIFY_TIME,
            new org.apache.thrift.meta_data.FieldMetaData("modifyTime",
                org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CRC64,
            new org.apache.thrift.meta_data.FieldMetaData("crc64", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.CUSTOMIZE_METAS, new org.apache.thrift.meta_data.FieldMetaData("customizeMetas",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true))));
        tmpMap.put(_Fields.TAGS,
            new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING,
                        true))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileInfo.class, metaDataMap);
    }

    public @org.apache.thrift.annotation.Nullable
    String path; // optional
    public @org.apache.thrift.annotation.Nullable
    String bucket; // optional
    public long size; // optional
    public @org.apache.thrift.annotation.Nullable
    String modifyTime; // optional
    public long crc64; // optional
    public @org.apache.thrift.annotation.Nullable
    java.util.Map<String, java.nio.ByteBuffer> customizeMetas; // optional
    public @org.apache.thrift.annotation.Nullable
    java.util.Map<String, java.nio.ByteBuffer> tags; // optional
    private byte __isset_bitfield = 0;

    public FileInfo() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FileInfo(FileInfo other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetPath()) {
            this.path = other.path;
        }
        if (other.isSetBucket()) {
            this.bucket = other.bucket;
        }
        this.size = other.size;
        if (other.isSetModifyTime()) {
            this.modifyTime = other.modifyTime;
        }
        this.crc64 = other.crc64;
        if (other.isSetCustomizeMetas()) {
            java.util.Map<String, java.nio.ByteBuffer> __this__customizeMetas =
                new java.util.HashMap<String, java.nio.ByteBuffer>(other.customizeMetas);
            this.customizeMetas = __this__customizeMetas;
        }
        if (other.isSetTags()) {
            java.util.Map<String, java.nio.ByteBuffer> __this__tags =
                new java.util.HashMap<String, java.nio.ByteBuffer>(other.tags);
            this.tags = __this__tags;
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
            TUPLE_SCHEME_FACTORY).getScheme();
    }

    public FileInfo deepCopy() {
        return new FileInfo(this);
    }

    @Override
    public void clear() {
        this.path = null;
        this.bucket = null;
        setSizeIsSet(false);
        this.size = 0;
        this.modifyTime = null;
        setCrc64IsSet(false);
        this.crc64 = 0;
        this.customizeMetas = null;
        this.tags = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getPath() {
        return this.path;
    }

    public FileInfo setPath(@org.apache.thrift.annotation.Nullable String path) {
        this.path = path;
        return this;
    }

    public void unsetPath() {
        this.path = null;
    }

    /**
     * Returns true if field path is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPath() {
        return this.path != null;
    }

    public void setPathIsSet(boolean value) {
        if (!value) {
            this.path = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public String getBucket() {
        return this.bucket;
    }

    public FileInfo setBucket(@org.apache.thrift.annotation.Nullable String bucket) {
        this.bucket = bucket;
        return this;
    }

    public void unsetBucket() {
        this.bucket = null;
    }

    /**
     * Returns true if field bucket is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBucket() {
        return this.bucket != null;
    }

    public void setBucketIsSet(boolean value) {
        if (!value) {
            this.bucket = null;
        }
    }

    public long getSize() {
        return this.size;
    }

    public FileInfo setSize(long size) {
        this.size = size;
        setSizeIsSet(true);
        return this;
    }

    public void unsetSize() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /**
     * Returns true if field size is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSize() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public String getModifyTime() {
        return this.modifyTime;
    }

    public FileInfo setModifyTime(@org.apache.thrift.annotation.Nullable String modifyTime) {
        this.modifyTime = modifyTime;
        return this;
    }

    public void unsetModifyTime() {
        this.modifyTime = null;
    }

    /**
     * Returns true if field modifyTime is set (has been assigned a value) and false otherwise
     */
    public boolean isSetModifyTime() {
        return this.modifyTime != null;
    }

    public void setModifyTimeIsSet(boolean value) {
        if (!value) {
            this.modifyTime = null;
        }
    }

    public long getCrc64() {
        return this.crc64;
    }

    public FileInfo setCrc64(long crc64) {
        this.crc64 = crc64;
        setCrc64IsSet(true);
        return this;
    }

    public void unsetCrc64() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CRC64_ISSET_ID);
    }

    /**
     * Returns true if field crc64 is set (has been assigned a value) and false otherwise
     */
    public boolean isSetCrc64() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CRC64_ISSET_ID);
    }

    public void setCrc64IsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CRC64_ISSET_ID, value);
    }

    public int getCustomizeMetasSize() {
        return (this.customizeMetas == null) ? 0 : this.customizeMetas.size();
    }

    public void putToCustomizeMetas(String key, java.nio.ByteBuffer val) {
        if (this.customizeMetas == null) {
            this.customizeMetas = new java.util.HashMap<String, java.nio.ByteBuffer>();
        }
        this.customizeMetas.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<String, java.nio.ByteBuffer> getCustomizeMetas() {
        return this.customizeMetas;
    }

    public FileInfo setCustomizeMetas(
        @org.apache.thrift.annotation.Nullable java.util.Map<String, java.nio.ByteBuffer> customizeMetas) {
        this.customizeMetas = customizeMetas;
        return this;
    }

    public void unsetCustomizeMetas() {
        this.customizeMetas = null;
    }

    /**
     * Returns true if field customizeMetas is set (has been assigned a value) and false otherwise
     */
    public boolean isSetCustomizeMetas() {
        return this.customizeMetas != null;
    }

    public void setCustomizeMetasIsSet(boolean value) {
        if (!value) {
            this.customizeMetas = null;
        }
    }

    public int getTagsSize() {
        return (this.tags == null) ? 0 : this.tags.size();
    }

    public void putToTags(String key, java.nio.ByteBuffer val) {
        if (this.tags == null) {
            this.tags = new java.util.HashMap<String, java.nio.ByteBuffer>();
        }
        this.tags.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<String, java.nio.ByteBuffer> getTags() {
        return this.tags;
    }

    public FileInfo setTags(@org.apache.thrift.annotation.Nullable java.util.Map<String, java.nio.ByteBuffer> tags) {
        this.tags = tags;
        return this;
    }

    public void unsetTags() {
        this.tags = null;
    }

    /**
     * Returns true if field tags is set (has been assigned a value) and false otherwise
     */
    public boolean isSetTags() {
        return this.tags != null;
    }

    public void setTagsIsSet(boolean value) {
        if (!value) {
            this.tags = null;
        }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
        switch (field) {
        case PATH:
            if (value == null) {
                unsetPath();
            } else {
                setPath((String) value);
            }
            break;

        case BUCKET:
            if (value == null) {
                unsetBucket();
            } else {
                setBucket((String) value);
            }
            break;

        case SIZE:
            if (value == null) {
                unsetSize();
            } else {
                setSize((Long) value);
            }
            break;

        case MODIFY_TIME:
            if (value == null) {
                unsetModifyTime();
            } else {
                setModifyTime((String) value);
            }
            break;

        case CRC64:
            if (value == null) {
                unsetCrc64();
            } else {
                setCrc64((Long) value);
            }
            break;

        case CUSTOMIZE_METAS:
            if (value == null) {
                unsetCustomizeMetas();
            } else {
                setCustomizeMetas((java.util.Map<String, java.nio.ByteBuffer>) value);
            }
            break;

        case TAGS:
            if (value == null) {
                unsetTags();
            } else {
                setTags((java.util.Map<String, java.nio.ByteBuffer>) value);
            }
            break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
        switch (field) {
        case PATH:
            return getPath();

        case BUCKET:
            return getBucket();

        case SIZE:
            return getSize();

        case MODIFY_TIME:
            return getModifyTime();

        case CRC64:
            return getCrc64();

        case CUSTOMIZE_METAS:
            return getCustomizeMetas();

        case TAGS:
            return getTags();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case PATH:
            return isSetPath();
        case BUCKET:
            return isSetBucket();
        case SIZE:
            return isSetSize();
        case MODIFY_TIME:
            return isSetModifyTime();
        case CRC64:
            return isSetCrc64();
        case CUSTOMIZE_METAS:
            return isSetCustomizeMetas();
        case TAGS:
            return isSetTags();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that instanceof FileInfo) {
            return this.equals((FileInfo) that);
        }
        return false;
    }

    public boolean equals(FileInfo that) {
        if (that == null) {
            return false;
        }
        if (this == that) {
            return true;
        }

        boolean this_present_path = true && this.isSetPath();
        boolean that_present_path = true && that.isSetPath();
        if (this_present_path || that_present_path) {
            if (!(this_present_path && that_present_path)) {
                return false;
            }
            if (!this.path.equals(that.path)) {
                return false;
            }
        }

        boolean this_present_bucket = true && this.isSetBucket();
        boolean that_present_bucket = true && that.isSetBucket();
        if (this_present_bucket || that_present_bucket) {
            if (!(this_present_bucket && that_present_bucket)) {
                return false;
            }
            if (!this.bucket.equals(that.bucket)) {
                return false;
            }
        }

        boolean this_present_size = true && this.isSetSize();
        boolean that_present_size = true && that.isSetSize();
        if (this_present_size || that_present_size) {
            if (!(this_present_size && that_present_size)) {
                return false;
            }
            if (this.size != that.size) {
                return false;
            }
        }

        boolean this_present_modifyTime = true && this.isSetModifyTime();
        boolean that_present_modifyTime = true && that.isSetModifyTime();
        if (this_present_modifyTime || that_present_modifyTime) {
            if (!(this_present_modifyTime && that_present_modifyTime)) {
                return false;
            }
            if (!this.modifyTime.equals(that.modifyTime)) {
                return false;
            }
        }

        boolean this_present_crc64 = true && this.isSetCrc64();
        boolean that_present_crc64 = true && that.isSetCrc64();
        if (this_present_crc64 || that_present_crc64) {
            if (!(this_present_crc64 && that_present_crc64)) {
                return false;
            }
            if (this.crc64 != that.crc64) {
                return false;
            }
        }

        boolean this_present_customizeMetas = true && this.isSetCustomizeMetas();
        boolean that_present_customizeMetas = true && that.isSetCustomizeMetas();
        if (this_present_customizeMetas || that_present_customizeMetas) {
            if (!(this_present_customizeMetas && that_present_customizeMetas)) {
                return false;
            }
            if (!this.customizeMetas.equals(that.customizeMetas)) {
                return false;
            }
        }

        boolean this_present_tags = true && this.isSetTags();
        boolean that_present_tags = true && that.isSetTags();
        if (this_present_tags || that_present_tags) {
            if (!(this_present_tags && that_present_tags)) {
                return false;
            }
            if (!this.tags.equals(that.tags)) {
                return false;
            }
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
        if (isSetPath()) {
            hashCode = hashCode * 8191 + path.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetBucket()) ? 131071 : 524287);
        if (isSetBucket()) {
            hashCode = hashCode * 8191 + bucket.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetSize()) ? 131071 : 524287);
        if (isSetSize()) {
            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(size);
        }

        hashCode = hashCode * 8191 + ((isSetModifyTime()) ? 131071 : 524287);
        if (isSetModifyTime()) {
            hashCode = hashCode * 8191 + modifyTime.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetCrc64()) ? 131071 : 524287);
        if (isSetCrc64()) {
            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(crc64);
        }

        hashCode = hashCode * 8191 + ((isSetCustomizeMetas()) ? 131071 : 524287);
        if (isSetCustomizeMetas()) {
            hashCode = hashCode * 8191 + customizeMetas.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetTags()) ? 131071 : 524287);
        if (isSetTags()) {
            hashCode = hashCode * 8191 + tags.hashCode();
        }

        return hashCode;
    }

    @Override
    public int compareTo(FileInfo other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.compare(isSetPath(), other.isSetPath());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPath()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetBucket(), other.isSetBucket());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBucket()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucket, other.bucket);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetSize(), other.isSetSize());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSize()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetModifyTime(), other.isSetModifyTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetModifyTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyTime, other.modifyTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetCrc64(), other.isSetCrc64());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCrc64()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crc64, other.crc64);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetCustomizeMetas(), other.isSetCustomizeMetas());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCustomizeMetas()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customizeMetas, other.customizeMetas);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetTags(), other.isSetTags());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTags()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("FileInfo(");
        boolean first = true;

        if (isSetPath()) {
            sb.append("path:");
            if (this.path == null) {
                sb.append("null");
            } else {
                sb.append(this.path);
            }
            first = false;
        }
        if (isSetBucket()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("bucket:");
            if (this.bucket == null) {
                sb.append("null");
            } else {
                sb.append(this.bucket);
            }
            first = false;
        }
        if (isSetSize()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("size:");
            sb.append(this.size);
            first = false;
        }
        if (isSetModifyTime()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("modifyTime:");
            if (this.modifyTime == null) {
                sb.append("null");
            } else {
                sb.append(this.modifyTime);
            }
            first = false;
        }
        if (isSetCrc64()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("crc64:");
            sb.append(this.crc64);
            first = false;
        }
        if (isSetCustomizeMetas()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("customizeMetas:");
            if (this.customizeMetas == null) {
                sb.append("null");
            } else {
                sb.append(this.customizeMetas);
            }
            first = false;
        }
        if (isSetTags()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("tags:");
            if (this.tags == null) {
                sb.append("null");
            } else {
                sb.append(this.tags);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        PATH((short) 1, "path"),
        BUCKET((short) 2, "bucket"),
        SIZE((short) 3, "size"),
        MODIFY_TIME((short) 4, "modifyTime"),
        CRC64((short) 5, "crc64"),
        CUSTOMIZE_METAS((short) 6, "customizeMetas"),
        TAGS((short) 7, "tags");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // PATH
                return PATH;
            case 2: // BUCKET
                return BUCKET;
            case 3: // SIZE
                return SIZE;
            case 4: // MODIFY_TIME
                return MODIFY_TIME;
            case 5: // CRC64
                return CRC64;
            case 6: // CUSTOMIZE_METAS
                return CUSTOMIZE_METAS;
            case 7: // TAGS
                return TAGS;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) {
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class FileInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public FileInfoStandardScheme getScheme() {
            return new FileInfoStandardScheme();
        }
    }

    private static class FileInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<FileInfo> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, FileInfo struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                case 1: // PATH
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.path = iprot.readString();
                        struct.setPathIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 2: // BUCKET
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.bucket = iprot.readString();
                        struct.setBucketIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 3: // SIZE
                    if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                        struct.size = iprot.readI64();
                        struct.setSizeIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 4: // MODIFY_TIME
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.modifyTime = iprot.readString();
                        struct.setModifyTimeIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 5: // CRC64
                    if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                        struct.crc64 = iprot.readI64();
                        struct.setCrc64IsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 6: // CUSTOMIZE_METAS
                    if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                        {
                            org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                            struct.customizeMetas = new java.util.HashMap<String, java.nio.ByteBuffer>(2 * _map0.size);
                            @org.apache.thrift.annotation.Nullable String _key1;
                            @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val2;
                            for (int _i3 = 0; _i3 < _map0.size; ++_i3) {
                                _key1 = iprot.readString();
                                _val2 = iprot.readBinary();
                                struct.customizeMetas.put(_key1, _val2);
                            }
                            iprot.readMapEnd();
                        }
                        struct.setCustomizeMetasIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 7: // TAGS
                    if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                        {
                            org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                            struct.tags = new java.util.HashMap<String, java.nio.ByteBuffer>(2 * _map4.size);
                            @org.apache.thrift.annotation.Nullable String _key5;
                            @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val6;
                            for (int _i7 = 0; _i7 < _map4.size; ++_i7) {
                                _key5 = iprot.readString();
                                _val6 = iprot.readBinary();
                                struct.tags.put(_key5, _val6);
                            }
                            iprot.readMapEnd();
                        }
                        struct.setTagsIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, FileInfo struct)
            throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.path != null) {
                if (struct.isSetPath()) {
                    oprot.writeFieldBegin(PATH_FIELD_DESC);
                    oprot.writeString(struct.path);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.bucket != null) {
                if (struct.isSetBucket()) {
                    oprot.writeFieldBegin(BUCKET_FIELD_DESC);
                    oprot.writeString(struct.bucket);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetSize()) {
                oprot.writeFieldBegin(SIZE_FIELD_DESC);
                oprot.writeI64(struct.size);
                oprot.writeFieldEnd();
            }
            if (struct.modifyTime != null) {
                if (struct.isSetModifyTime()) {
                    oprot.writeFieldBegin(MODIFY_TIME_FIELD_DESC);
                    oprot.writeString(struct.modifyTime);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetCrc64()) {
                oprot.writeFieldBegin(CRC64_FIELD_DESC);
                oprot.writeI64(struct.crc64);
                oprot.writeFieldEnd();
            }
            if (struct.customizeMetas != null) {
                if (struct.isSetCustomizeMetas()) {
                    oprot.writeFieldBegin(CUSTOMIZE_METAS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
                            org.apache.thrift.protocol.TType.STRING, struct.customizeMetas.size()));
                        for (java.util.Map.Entry<String, java.nio.ByteBuffer> _iter8 : struct.customizeMetas
                            .entrySet()) {
                            oprot.writeString(_iter8.getKey());
                            oprot.writeBinary(_iter8.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.tags != null) {
                if (struct.isSetTags()) {
                    oprot.writeFieldBegin(TAGS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
                            org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
                        for (java.util.Map.Entry<String, java.nio.ByteBuffer> _iter9 : struct.tags.entrySet()) {
                            oprot.writeString(_iter9.getKey());
                            oprot.writeBinary(_iter9.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class FileInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public FileInfoTupleScheme getScheme() {
            return new FileInfoTupleScheme();
        }
    }

    private static class FileInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<FileInfo> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, FileInfo struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetPath()) {
                optionals.set(0);
            }
            if (struct.isSetBucket()) {
                optionals.set(1);
            }
            if (struct.isSetSize()) {
                optionals.set(2);
            }
            if (struct.isSetModifyTime()) {
                optionals.set(3);
            }
            if (struct.isSetCrc64()) {
                optionals.set(4);
            }
            if (struct.isSetCustomizeMetas()) {
                optionals.set(5);
            }
            if (struct.isSetTags()) {
                optionals.set(6);
            }
            oprot.writeBitSet(optionals, 7);
            if (struct.isSetPath()) {
                oprot.writeString(struct.path);
            }
            if (struct.isSetBucket()) {
                oprot.writeString(struct.bucket);
            }
            if (struct.isSetSize()) {
                oprot.writeI64(struct.size);
            }
            if (struct.isSetModifyTime()) {
                oprot.writeString(struct.modifyTime);
            }
            if (struct.isSetCrc64()) {
                oprot.writeI64(struct.crc64);
            }
            if (struct.isSetCustomizeMetas()) {
                {
                    oprot.writeI32(struct.customizeMetas.size());
                    for (java.util.Map.Entry<String, java.nio.ByteBuffer> _iter10 : struct.customizeMetas.entrySet()) {
                        oprot.writeString(_iter10.getKey());
                        oprot.writeBinary(_iter10.getValue());
                    }
                }
            }
            if (struct.isSetTags()) {
                {
                    oprot.writeI32(struct.tags.size());
                    for (java.util.Map.Entry<String, java.nio.ByteBuffer> _iter11 : struct.tags.entrySet()) {
                        oprot.writeString(_iter11.getKey());
                        oprot.writeBinary(_iter11.getValue());
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, FileInfo struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(7);
            if (incoming.get(0)) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
            }
            if (incoming.get(1)) {
                struct.bucket = iprot.readString();
                struct.setBucketIsSet(true);
            }
            if (incoming.get(2)) {
                struct.size = iprot.readI64();
                struct.setSizeIsSet(true);
            }
            if (incoming.get(3)) {
                struct.modifyTime = iprot.readString();
                struct.setModifyTimeIsSet(true);
            }
            if (incoming.get(4)) {
                struct.crc64 = iprot.readI64();
                struct.setCrc64IsSet(true);
            }
            if (incoming.get(5)) {
                {
                    org.apache.thrift.protocol.TMap _map12 =
                        iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING,
                            org.apache.thrift.protocol.TType.STRING);
                    struct.customizeMetas = new java.util.HashMap<String, java.nio.ByteBuffer>(2 * _map12.size);
                    @org.apache.thrift.annotation.Nullable String _key13;
                    @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val14;
                    for (int _i15 = 0; _i15 < _map12.size; ++_i15) {
                        _key13 = iprot.readString();
                        _val14 = iprot.readBinary();
                        struct.customizeMetas.put(_key13, _val14);
                    }
                }
                struct.setCustomizeMetasIsSet(true);
            }
            if (incoming.get(6)) {
                {
                    org.apache.thrift.protocol.TMap _map16 =
                        iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING,
                            org.apache.thrift.protocol.TType.STRING);
                    struct.tags = new java.util.HashMap<String, java.nio.ByteBuffer>(2 * _map16.size);
                    @org.apache.thrift.annotation.Nullable String _key17;
                    @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val18;
                    for (int _i19 = 0; _i19 < _map16.size; ++_i19) {
                        _key17 = iprot.readString();
                        _val18 = iprot.readBinary();
                        struct.tags.put(_key17, _val18);
                    }
                }
                struct.setTagsIsSet(true);
            }
        }
    }
}

