/**
 * Copyright (c) 2013-Present, Alibaba Group Holding Limited.
 * All rights reserved.
 *
 * Licensed under the Server Side Public License v1 (SSPLv1).
 */
/**
 * Autogenerated by Thrift Compiler (0.14.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.aliyun.polardbx.binlog.remote.lindorm.thrift.fileservice.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-05-26")
public class WriteFileResponse
    implements org.apache.thrift.TBase<WriteFileResponse, WriteFileResponse._Fields>, java.io.Serializable, Cloneable,
    Comparable<WriteFileResponse> {
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("WriteFileResponse");
    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC =
        new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField BUCKET_FIELD_DESC =
        new org.apache.thrift.protocol.TField("bucket", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField OUTPUT_STREAM_ID_FIELD_DESC =
        new org.apache.thrift.protocol.TField("outputStreamId", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField NEXT_OFFSET_FIELD_DESC =
        new org.apache.thrift.protocol.TField("nextOffset", org.apache.thrift.protocol.TType.I64, (short) 4);
    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new WriteFileResponseStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new WriteFileResponseTupleSchemeFactory();
    // isset id assignments
    private static final int __NEXTOFFSET_ISSET_ID = 0;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
            new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.PATH,
            new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.BUCKET,
            new org.apache.thrift.meta_data.FieldMetaData("bucket", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.OUTPUT_STREAM_ID, new org.apache.thrift.meta_data.FieldMetaData("outputStreamId",
            org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.NEXT_OFFSET,
            new org.apache.thrift.meta_data.FieldMetaData("nextOffset",
                org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WriteFileResponse.class, metaDataMap);
    }

    public @org.apache.thrift.annotation.Nullable
    String path; // required
    public @org.apache.thrift.annotation.Nullable
    String bucket; // required
    public @org.apache.thrift.annotation.Nullable
    String outputStreamId; // required
    public long nextOffset; // required
    private byte __isset_bitfield = 0;

    public WriteFileResponse() {
    }

    public WriteFileResponse(
        String path,
        String bucket,
        String outputStreamId,
        long nextOffset) {
        this();
        this.path = path;
        this.bucket = bucket;
        this.outputStreamId = outputStreamId;
        this.nextOffset = nextOffset;
        setNextOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public WriteFileResponse(WriteFileResponse other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetPath()) {
            this.path = other.path;
        }
        if (other.isSetBucket()) {
            this.bucket = other.bucket;
        }
        if (other.isSetOutputStreamId()) {
            this.outputStreamId = other.outputStreamId;
        }
        this.nextOffset = other.nextOffset;
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
            TUPLE_SCHEME_FACTORY).getScheme();
    }

    public WriteFileResponse deepCopy() {
        return new WriteFileResponse(this);
    }

    @Override
    public void clear() {
        this.path = null;
        this.bucket = null;
        this.outputStreamId = null;
        setNextOffsetIsSet(false);
        this.nextOffset = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public String getPath() {
        return this.path;
    }

    public WriteFileResponse setPath(@org.apache.thrift.annotation.Nullable String path) {
        this.path = path;
        return this;
    }

    public void unsetPath() {
        this.path = null;
    }

    /**
     * Returns true if field path is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPath() {
        return this.path != null;
    }

    public void setPathIsSet(boolean value) {
        if (!value) {
            this.path = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public String getBucket() {
        return this.bucket;
    }

    public WriteFileResponse setBucket(@org.apache.thrift.annotation.Nullable String bucket) {
        this.bucket = bucket;
        return this;
    }

    public void unsetBucket() {
        this.bucket = null;
    }

    /**
     * Returns true if field bucket is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBucket() {
        return this.bucket != null;
    }

    public void setBucketIsSet(boolean value) {
        if (!value) {
            this.bucket = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public String getOutputStreamId() {
        return this.outputStreamId;
    }

    public WriteFileResponse setOutputStreamId(@org.apache.thrift.annotation.Nullable String outputStreamId) {
        this.outputStreamId = outputStreamId;
        return this;
    }

    public void unsetOutputStreamId() {
        this.outputStreamId = null;
    }

    /**
     * Returns true if field outputStreamId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetOutputStreamId() {
        return this.outputStreamId != null;
    }

    public void setOutputStreamIdIsSet(boolean value) {
        if (!value) {
            this.outputStreamId = null;
        }
    }

    public long getNextOffset() {
        return this.nextOffset;
    }

    public WriteFileResponse setNextOffset(long nextOffset) {
        this.nextOffset = nextOffset;
        setNextOffsetIsSet(true);
        return this;
    }

    public void unsetNextOffset() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEXTOFFSET_ISSET_ID);
    }

    /**
     * Returns true if field nextOffset is set (has been assigned a value) and false otherwise
     */
    public boolean isSetNextOffset() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEXTOFFSET_ISSET_ID);
    }

    public void setNextOffsetIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEXTOFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
        switch (field) {
        case PATH:
            if (value == null) {
                unsetPath();
            } else {
                setPath((String) value);
            }
            break;

        case BUCKET:
            if (value == null) {
                unsetBucket();
            } else {
                setBucket((String) value);
            }
            break;

        case OUTPUT_STREAM_ID:
            if (value == null) {
                unsetOutputStreamId();
            } else {
                setOutputStreamId((String) value);
            }
            break;

        case NEXT_OFFSET:
            if (value == null) {
                unsetNextOffset();
            } else {
                setNextOffset((Long) value);
            }
            break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
        switch (field) {
        case PATH:
            return getPath();

        case BUCKET:
            return getBucket();

        case OUTPUT_STREAM_ID:
            return getOutputStreamId();

        case NEXT_OFFSET:
            return getNextOffset();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case PATH:
            return isSetPath();
        case BUCKET:
            return isSetBucket();
        case OUTPUT_STREAM_ID:
            return isSetOutputStreamId();
        case NEXT_OFFSET:
            return isSetNextOffset();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that instanceof WriteFileResponse) {
            return this.equals((WriteFileResponse) that);
        }
        return false;
    }

    public boolean equals(WriteFileResponse that) {
        if (that == null) {
            return false;
        }
        if (this == that) {
            return true;
        }

        boolean this_present_path = true && this.isSetPath();
        boolean that_present_path = true && that.isSetPath();
        if (this_present_path || that_present_path) {
            if (!(this_present_path && that_present_path)) {
                return false;
            }
            if (!this.path.equals(that.path)) {
                return false;
            }
        }

        boolean this_present_bucket = true && this.isSetBucket();
        boolean that_present_bucket = true && that.isSetBucket();
        if (this_present_bucket || that_present_bucket) {
            if (!(this_present_bucket && that_present_bucket)) {
                return false;
            }
            if (!this.bucket.equals(that.bucket)) {
                return false;
            }
        }

        boolean this_present_outputStreamId = true && this.isSetOutputStreamId();
        boolean that_present_outputStreamId = true && that.isSetOutputStreamId();
        if (this_present_outputStreamId || that_present_outputStreamId) {
            if (!(this_present_outputStreamId && that_present_outputStreamId)) {
                return false;
            }
            if (!this.outputStreamId.equals(that.outputStreamId)) {
                return false;
            }
        }

        boolean this_present_nextOffset = true;
        boolean that_present_nextOffset = true;
        if (this_present_nextOffset || that_present_nextOffset) {
            if (!(this_present_nextOffset && that_present_nextOffset)) {
                return false;
            }
            if (this.nextOffset != that.nextOffset) {
                return false;
            }
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
        if (isSetPath()) {
            hashCode = hashCode * 8191 + path.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetBucket()) ? 131071 : 524287);
        if (isSetBucket()) {
            hashCode = hashCode * 8191 + bucket.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetOutputStreamId()) ? 131071 : 524287);
        if (isSetOutputStreamId()) {
            hashCode = hashCode * 8191 + outputStreamId.hashCode();
        }

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(nextOffset);

        return hashCode;
    }

    @Override
    public int compareTo(WriteFileResponse other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.compare(isSetPath(), other.isSetPath());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPath()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetBucket(), other.isSetBucket());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBucket()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucket, other.bucket);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetOutputStreamId(), other.isSetOutputStreamId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOutputStreamId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputStreamId, other.outputStreamId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetNextOffset(), other.isSetNextOffset());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNextOffset()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextOffset, other.nextOffset);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("WriteFileResponse(");
        boolean first = true;

        sb.append("path:");
        if (this.path == null) {
            sb.append("null");
        } else {
            sb.append(this.path);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("bucket:");
        if (this.bucket == null) {
            sb.append("null");
        } else {
            sb.append(this.bucket);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("outputStreamId:");
        if (this.outputStreamId == null) {
            sb.append("null");
        } else {
            sb.append(this.outputStreamId);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("nextOffset:");
        sb.append(this.nextOffset);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (path == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'path' was not present! Struct: " + toString());
        }
        if (bucket == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'bucket' was not present! Struct: " + toString());
        }
        if (outputStreamId == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'outputStreamId' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'nextOffset' because it's a primitive and you chose the non-beans generator.
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        PATH((short) 1, "path"),
        BUCKET((short) 2, "bucket"),
        OUTPUT_STREAM_ID((short) 3, "outputStreamId"),
        NEXT_OFFSET((short) 4, "nextOffset");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // PATH
                return PATH;
            case 2: // BUCKET
                return BUCKET;
            case 3: // OUTPUT_STREAM_ID
                return OUTPUT_STREAM_ID;
            case 4: // NEXT_OFFSET
                return NEXT_OFFSET;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) {
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class WriteFileResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public WriteFileResponseStandardScheme getScheme() {
            return new WriteFileResponseStandardScheme();
        }
    }

    private static class WriteFileResponseStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<WriteFileResponse> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, WriteFileResponse struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                case 1: // PATH
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.path = iprot.readString();
                        struct.setPathIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 2: // BUCKET
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.bucket = iprot.readString();
                        struct.setBucketIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 3: // OUTPUT_STREAM_ID
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.outputStreamId = iprot.readString();
                        struct.setOutputStreamIdIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 4: // NEXT_OFFSET
                    if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                        struct.nextOffset = iprot.readI64();
                        struct.setNextOffsetIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetNextOffset()) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'nextOffset' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, WriteFileResponse struct)
            throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.path != null) {
                oprot.writeFieldBegin(PATH_FIELD_DESC);
                oprot.writeString(struct.path);
                oprot.writeFieldEnd();
            }
            if (struct.bucket != null) {
                oprot.writeFieldBegin(BUCKET_FIELD_DESC);
                oprot.writeString(struct.bucket);
                oprot.writeFieldEnd();
            }
            if (struct.outputStreamId != null) {
                oprot.writeFieldBegin(OUTPUT_STREAM_ID_FIELD_DESC);
                oprot.writeString(struct.outputStreamId);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(NEXT_OFFSET_FIELD_DESC);
            oprot.writeI64(struct.nextOffset);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class WriteFileResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public WriteFileResponseTupleScheme getScheme() {
            return new WriteFileResponseTupleScheme();
        }
    }

    private static class WriteFileResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<WriteFileResponse> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, WriteFileResponse struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            oprot.writeString(struct.path);
            oprot.writeString(struct.bucket);
            oprot.writeString(struct.outputStreamId);
            oprot.writeI64(struct.nextOffset);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, WriteFileResponse struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            struct.path = iprot.readString();
            struct.setPathIsSet(true);
            struct.bucket = iprot.readString();
            struct.setBucketIsSet(true);
            struct.outputStreamId = iprot.readString();
            struct.setOutputStreamIdIsSet(true);
            struct.nextOffset = iprot.readI64();
            struct.setNextOffsetIsSet(true);
        }
    }
}

