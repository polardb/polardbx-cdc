/**
 * Copyright (c) 2013-Present, Alibaba Group Holding Limited.
 * All rights reserved.
 *
 * Licensed under the Server Side Public License v1 (SSPLv1).
 */
/**
 * Autogenerated by Thrift Compiler (0.14.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.aliyun.polardbx.binlog.remote.lindorm.thrift.fileservice.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-05-26")
public class ReadFileResponse
    implements org.apache.thrift.TBase<ReadFileResponse, ReadFileResponse._Fields>, java.io.Serializable, Cloneable,
    Comparable<ReadFileResponse> {
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("ReadFileResponse");
    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC =
        new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField BUCKET_FIELD_DESC =
        new org.apache.thrift.protocol.TField("bucket", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC =
        new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC =
        new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I64, (short) 4);
    private static final org.apache.thrift.protocol.TField CRC64_FIELD_DESC =
        new org.apache.thrift.protocol.TField("crc64", org.apache.thrift.protocol.TType.I64, (short) 5);
    private static final org.apache.thrift.protocol.TField HAS_MORE_FIELD_DESC =
        new org.apache.thrift.protocol.TField("hasMore", org.apache.thrift.protocol.TType.BOOL, (short) 6);
    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new ReadFileResponseStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new ReadFileResponseTupleSchemeFactory();
    // isset id assignments
    private static final int __SIZE_ISSET_ID = 0;
    private static final int __CRC64_ISSET_ID = 1;
    private static final int __HASMORE_ISSET_ID = 2;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
            new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.PATH,
            new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.BUCKET,
            new org.apache.thrift.meta_data.FieldMetaData("bucket", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.RESULT,
            new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
        tmpMap.put(_Fields.SIZE,
            new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.CRC64,
            new org.apache.thrift.meta_data.FieldMetaData("crc64", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.HAS_MORE,
            new org.apache.thrift.meta_data.FieldMetaData("hasMore", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadFileResponse.class, metaDataMap);
    }

    public @org.apache.thrift.annotation.Nullable
    String path; // required
    public @org.apache.thrift.annotation.Nullable
    String bucket; // required
    public @org.apache.thrift.annotation.Nullable
    java.nio.ByteBuffer result; // required
    public long size; // required
    public long crc64; // required
    public boolean hasMore; // required
    private byte __isset_bitfield = 0;

    public ReadFileResponse() {
    }

    public ReadFileResponse(
        String path,
        String bucket,
        java.nio.ByteBuffer result,
        long size,
        long crc64,
        boolean hasMore) {
        this();
        this.path = path;
        this.bucket = bucket;
        this.result = org.apache.thrift.TBaseHelper.copyBinary(result);
        this.size = size;
        setSizeIsSet(true);
        this.crc64 = crc64;
        setCrc64IsSet(true);
        this.hasMore = hasMore;
        setHasMoreIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadFileResponse(ReadFileResponse other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetPath()) {
            this.path = other.path;
        }
        if (other.isSetBucket()) {
            this.bucket = other.bucket;
        }
        if (other.isSetResult()) {
            this.result = org.apache.thrift.TBaseHelper.copyBinary(other.result);
        }
        this.size = other.size;
        this.crc64 = other.crc64;
        this.hasMore = other.hasMore;
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
            TUPLE_SCHEME_FACTORY).getScheme();
    }

    public ReadFileResponse deepCopy() {
        return new ReadFileResponse(this);
    }

    @Override
    public void clear() {
        this.path = null;
        this.bucket = null;
        this.result = null;
        setSizeIsSet(false);
        this.size = 0;
        setCrc64IsSet(false);
        this.crc64 = 0;
        setHasMoreIsSet(false);
        this.hasMore = false;
    }

    @org.apache.thrift.annotation.Nullable
    public String getPath() {
        return this.path;
    }

    public ReadFileResponse setPath(@org.apache.thrift.annotation.Nullable String path) {
        this.path = path;
        return this;
    }

    public void unsetPath() {
        this.path = null;
    }

    /**
     * Returns true if field path is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPath() {
        return this.path != null;
    }

    public void setPathIsSet(boolean value) {
        if (!value) {
            this.path = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public String getBucket() {
        return this.bucket;
    }

    public ReadFileResponse setBucket(@org.apache.thrift.annotation.Nullable String bucket) {
        this.bucket = bucket;
        return this;
    }

    public void unsetBucket() {
        this.bucket = null;
    }

    /**
     * Returns true if field bucket is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBucket() {
        return this.bucket != null;
    }

    public void setBucketIsSet(boolean value) {
        if (!value) {
            this.bucket = null;
        }
    }

    public byte[] getResult() {
        setResult(org.apache.thrift.TBaseHelper.rightSize(result));
        return result == null ? null : result.array();
    }

    public ReadFileResponse setResult(byte[] result) {
        this.result = result == null ? (java.nio.ByteBuffer) null : java.nio.ByteBuffer.wrap(result.clone());
        return this;
    }

    public ReadFileResponse setResult(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer result) {
        this.result = org.apache.thrift.TBaseHelper.copyBinary(result);
        return this;
    }

    public java.nio.ByteBuffer bufferForResult() {
        return org.apache.thrift.TBaseHelper.copyBinary(result);
    }

    public void unsetResult() {
        this.result = null;
    }

    /**
     * Returns true if field result is set (has been assigned a value) and false otherwise
     */
    public boolean isSetResult() {
        return this.result != null;
    }

    public void setResultIsSet(boolean value) {
        if (!value) {
            this.result = null;
        }
    }

    public long getSize() {
        return this.size;
    }

    public ReadFileResponse setSize(long size) {
        this.size = size;
        setSizeIsSet(true);
        return this;
    }

    public void unsetSize() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /**
     * Returns true if field size is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSize() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    public long getCrc64() {
        return this.crc64;
    }

    public ReadFileResponse setCrc64(long crc64) {
        this.crc64 = crc64;
        setCrc64IsSet(true);
        return this;
    }

    public void unsetCrc64() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CRC64_ISSET_ID);
    }

    /**
     * Returns true if field crc64 is set (has been assigned a value) and false otherwise
     */
    public boolean isSetCrc64() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CRC64_ISSET_ID);
    }

    public void setCrc64IsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CRC64_ISSET_ID, value);
    }

    public boolean isHasMore() {
        return this.hasMore;
    }

    public ReadFileResponse setHasMore(boolean hasMore) {
        this.hasMore = hasMore;
        setHasMoreIsSet(true);
        return this;
    }

    public void unsetHasMore() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASMORE_ISSET_ID);
    }

    /**
     * Returns true if field hasMore is set (has been assigned a value) and false otherwise
     */
    public boolean isSetHasMore() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASMORE_ISSET_ID);
    }

    public void setHasMoreIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASMORE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
        switch (field) {
        case PATH:
            if (value == null) {
                unsetPath();
            } else {
                setPath((String) value);
            }
            break;

        case BUCKET:
            if (value == null) {
                unsetBucket();
            } else {
                setBucket((String) value);
            }
            break;

        case RESULT:
            if (value == null) {
                unsetResult();
            } else {
                if (value instanceof byte[]) {
                    setResult((byte[]) value);
                } else {
                    setResult((java.nio.ByteBuffer) value);
                }
            }
            break;

        case SIZE:
            if (value == null) {
                unsetSize();
            } else {
                setSize((Long) value);
            }
            break;

        case CRC64:
            if (value == null) {
                unsetCrc64();
            } else {
                setCrc64((Long) value);
            }
            break;

        case HAS_MORE:
            if (value == null) {
                unsetHasMore();
            } else {
                setHasMore((Boolean) value);
            }
            break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
        switch (field) {
        case PATH:
            return getPath();

        case BUCKET:
            return getBucket();

        case RESULT:
            return getResult();

        case SIZE:
            return getSize();

        case CRC64:
            return getCrc64();

        case HAS_MORE:
            return isHasMore();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case PATH:
            return isSetPath();
        case BUCKET:
            return isSetBucket();
        case RESULT:
            return isSetResult();
        case SIZE:
            return isSetSize();
        case CRC64:
            return isSetCrc64();
        case HAS_MORE:
            return isSetHasMore();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that instanceof ReadFileResponse) {
            return this.equals((ReadFileResponse) that);
        }
        return false;
    }

    public boolean equals(ReadFileResponse that) {
        if (that == null) {
            return false;
        }
        if (this == that) {
            return true;
        }

        boolean this_present_path = true && this.isSetPath();
        boolean that_present_path = true && that.isSetPath();
        if (this_present_path || that_present_path) {
            if (!(this_present_path && that_present_path)) {
                return false;
            }
            if (!this.path.equals(that.path)) {
                return false;
            }
        }

        boolean this_present_bucket = true && this.isSetBucket();
        boolean that_present_bucket = true && that.isSetBucket();
        if (this_present_bucket || that_present_bucket) {
            if (!(this_present_bucket && that_present_bucket)) {
                return false;
            }
            if (!this.bucket.equals(that.bucket)) {
                return false;
            }
        }

        boolean this_present_result = true && this.isSetResult();
        boolean that_present_result = true && that.isSetResult();
        if (this_present_result || that_present_result) {
            if (!(this_present_result && that_present_result)) {
                return false;
            }
            if (!this.result.equals(that.result)) {
                return false;
            }
        }

        boolean this_present_size = true;
        boolean that_present_size = true;
        if (this_present_size || that_present_size) {
            if (!(this_present_size && that_present_size)) {
                return false;
            }
            if (this.size != that.size) {
                return false;
            }
        }

        boolean this_present_crc64 = true;
        boolean that_present_crc64 = true;
        if (this_present_crc64 || that_present_crc64) {
            if (!(this_present_crc64 && that_present_crc64)) {
                return false;
            }
            if (this.crc64 != that.crc64) {
                return false;
            }
        }

        boolean this_present_hasMore = true;
        boolean that_present_hasMore = true;
        if (this_present_hasMore || that_present_hasMore) {
            if (!(this_present_hasMore && that_present_hasMore)) {
                return false;
            }
            if (this.hasMore != that.hasMore) {
                return false;
            }
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
        if (isSetPath()) {
            hashCode = hashCode * 8191 + path.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetBucket()) ? 131071 : 524287);
        if (isSetBucket()) {
            hashCode = hashCode * 8191 + bucket.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetResult()) ? 131071 : 524287);
        if (isSetResult()) {
            hashCode = hashCode * 8191 + result.hashCode();
        }

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(size);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(crc64);

        hashCode = hashCode * 8191 + ((hasMore) ? 131071 : 524287);

        return hashCode;
    }

    @Override
    public int compareTo(ReadFileResponse other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.compare(isSetPath(), other.isSetPath());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPath()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetBucket(), other.isSetBucket());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBucket()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucket, other.bucket);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetResult(), other.isSetResult());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetResult()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetSize(), other.isSetSize());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSize()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetCrc64(), other.isSetCrc64());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCrc64()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crc64, other.crc64);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetHasMore(), other.isSetHasMore());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHasMore()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasMore, other.hasMore);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ReadFileResponse(");
        boolean first = true;

        sb.append("path:");
        if (this.path == null) {
            sb.append("null");
        } else {
            sb.append(this.path);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("bucket:");
        if (this.bucket == null) {
            sb.append("null");
        } else {
            sb.append(this.bucket);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("result:");
        if (this.result == null) {
            sb.append("null");
        } else {
            org.apache.thrift.TBaseHelper.toString(this.result, sb);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("size:");
        sb.append(this.size);
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("crc64:");
        sb.append(this.crc64);
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("hasMore:");
        sb.append(this.hasMore);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (path == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'path' was not present! Struct: " + toString());
        }
        if (bucket == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'bucket' was not present! Struct: " + toString());
        }
        if (result == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'result' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'size' because it's a primitive and you chose the non-beans generator.
        // alas, we cannot check 'crc64' because it's a primitive and you chose the non-beans generator.
        // alas, we cannot check 'hasMore' because it's a primitive and you chose the non-beans generator.
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        PATH((short) 1, "path"),
        BUCKET((short) 2, "bucket"),
        RESULT((short) 3, "result"),
        SIZE((short) 4, "size"),
        CRC64((short) 5, "crc64"),
        HAS_MORE((short) 6, "hasMore");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // PATH
                return PATH;
            case 2: // BUCKET
                return BUCKET;
            case 3: // RESULT
                return RESULT;
            case 4: // SIZE
                return SIZE;
            case 5: // CRC64
                return CRC64;
            case 6: // HAS_MORE
                return HAS_MORE;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) {
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class ReadFileResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ReadFileResponseStandardScheme getScheme() {
            return new ReadFileResponseStandardScheme();
        }
    }

    private static class ReadFileResponseStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<ReadFileResponse> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ReadFileResponse struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                case 1: // PATH
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.path = iprot.readString();
                        struct.setPathIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 2: // BUCKET
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.bucket = iprot.readString();
                        struct.setBucketIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 3: // RESULT
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.result = iprot.readBinary();
                        struct.setResultIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 4: // SIZE
                    if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                        struct.size = iprot.readI64();
                        struct.setSizeIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 5: // CRC64
                    if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                        struct.crc64 = iprot.readI64();
                        struct.setCrc64IsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 6: // HAS_MORE
                    if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                        struct.hasMore = iprot.readBool();
                        struct.setHasMoreIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetSize()) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'size' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetCrc64()) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'crc64' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetHasMore()) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'hasMore' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ReadFileResponse struct)
            throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.path != null) {
                oprot.writeFieldBegin(PATH_FIELD_DESC);
                oprot.writeString(struct.path);
                oprot.writeFieldEnd();
            }
            if (struct.bucket != null) {
                oprot.writeFieldBegin(BUCKET_FIELD_DESC);
                oprot.writeString(struct.bucket);
                oprot.writeFieldEnd();
            }
            if (struct.result != null) {
                oprot.writeFieldBegin(RESULT_FIELD_DESC);
                oprot.writeBinary(struct.result);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(SIZE_FIELD_DESC);
            oprot.writeI64(struct.size);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(CRC64_FIELD_DESC);
            oprot.writeI64(struct.crc64);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(HAS_MORE_FIELD_DESC);
            oprot.writeBool(struct.hasMore);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ReadFileResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ReadFileResponseTupleScheme getScheme() {
            return new ReadFileResponseTupleScheme();
        }
    }

    private static class ReadFileResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReadFileResponse> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ReadFileResponse struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            oprot.writeString(struct.path);
            oprot.writeString(struct.bucket);
            oprot.writeBinary(struct.result);
            oprot.writeI64(struct.size);
            oprot.writeI64(struct.crc64);
            oprot.writeBool(struct.hasMore);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ReadFileResponse struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            struct.path = iprot.readString();
            struct.setPathIsSet(true);
            struct.bucket = iprot.readString();
            struct.setBucketIsSet(true);
            struct.result = iprot.readBinary();
            struct.setResultIsSet(true);
            struct.size = iprot.readI64();
            struct.setSizeIsSet(true);
            struct.crc64 = iprot.readI64();
            struct.setCrc64IsSet(true);
            struct.hasMore = iprot.readBool();
            struct.setHasMoreIsSet(true);
        }
    }
}

