/**
 * Copyright (c) 2013-Present, Alibaba Group Holding Limited.
 * All rights reserved.
 *
 * Licensed under the Server Side Public License v1 (SSPLv1).
 */
/**
 * Autogenerated by Thrift Compiler (0.14.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.aliyun.polardbx.binlog.remote.lindorm.thrift.fileservice.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-05-26")
public class Bucket
    implements org.apache.thrift.TBase<Bucket, Bucket._Fields>, java.io.Serializable, Cloneable, Comparable<Bucket> {
    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("Bucket");
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC =
        new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC =
        new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField BUCKET_TYPE_FIELD_DESC =
        new org.apache.thrift.protocol.TField("bucketType", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new BucketStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BucketTupleSchemeFactory();

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
            new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.NAME,
            new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CREATE_TIME,
            new org.apache.thrift.meta_data.FieldMetaData("createTime",
                org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.BUCKET_TYPE,
            new org.apache.thrift.meta_data.FieldMetaData("bucketType",
                org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Bucket.class, metaDataMap);
    }

    public @org.apache.thrift.annotation.Nullable
    String name; // required
    public @org.apache.thrift.annotation.Nullable
    String createTime; // required
    public @org.apache.thrift.annotation.Nullable
    String bucketType; // required

    public Bucket() {
    }

    public Bucket(
        String name,
        String createTime,
        String bucketType) {
        this();
        this.name = name;
        this.createTime = createTime;
        this.bucketType = bucketType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Bucket(Bucket other) {
        if (other.isSetName()) {
            this.name = other.name;
        }
        if (other.isSetCreateTime()) {
            this.createTime = other.createTime;
        }
        if (other.isSetBucketType()) {
            this.bucketType = other.bucketType;
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
            TUPLE_SCHEME_FACTORY).getScheme();
    }

    public Bucket deepCopy() {
        return new Bucket(this);
    }

    @Override
    public void clear() {
        this.name = null;
        this.createTime = null;
        this.bucketType = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getName() {
        return this.name;
    }

    public Bucket setName(@org.apache.thrift.annotation.Nullable String name) {
        this.name = name;
        return this;
    }

    public void unsetName() {
        this.name = null;
    }

    /**
     * Returns true if field name is set (has been assigned a value) and false otherwise
     */
    public boolean isSetName() {
        return this.name != null;
    }

    public void setNameIsSet(boolean value) {
        if (!value) {
            this.name = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public String getCreateTime() {
        return this.createTime;
    }

    public Bucket setCreateTime(@org.apache.thrift.annotation.Nullable String createTime) {
        this.createTime = createTime;
        return this;
    }

    public void unsetCreateTime() {
        this.createTime = null;
    }

    /**
     * Returns true if field createTime is set (has been assigned a value) and false otherwise
     */
    public boolean isSetCreateTime() {
        return this.createTime != null;
    }

    public void setCreateTimeIsSet(boolean value) {
        if (!value) {
            this.createTime = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public String getBucketType() {
        return this.bucketType;
    }

    public Bucket setBucketType(@org.apache.thrift.annotation.Nullable String bucketType) {
        this.bucketType = bucketType;
        return this;
    }

    public void unsetBucketType() {
        this.bucketType = null;
    }

    /**
     * Returns true if field bucketType is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBucketType() {
        return this.bucketType != null;
    }

    public void setBucketTypeIsSet(boolean value) {
        if (!value) {
            this.bucketType = null;
        }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
        switch (field) {
        case NAME:
            if (value == null) {
                unsetName();
            } else {
                setName((String) value);
            }
            break;

        case CREATE_TIME:
            if (value == null) {
                unsetCreateTime();
            } else {
                setCreateTime((String) value);
            }
            break;

        case BUCKET_TYPE:
            if (value == null) {
                unsetBucketType();
            } else {
                setBucketType((String) value);
            }
            break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
        switch (field) {
        case NAME:
            return getName();

        case CREATE_TIME:
            return getCreateTime();

        case BUCKET_TYPE:
            return getBucketType();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case NAME:
            return isSetName();
        case CREATE_TIME:
            return isSetCreateTime();
        case BUCKET_TYPE:
            return isSetBucketType();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that instanceof Bucket) {
            return this.equals((Bucket) that);
        }
        return false;
    }

    public boolean equals(Bucket that) {
        if (that == null) {
            return false;
        }
        if (this == that) {
            return true;
        }

        boolean this_present_name = true && this.isSetName();
        boolean that_present_name = true && that.isSetName();
        if (this_present_name || that_present_name) {
            if (!(this_present_name && that_present_name)) {
                return false;
            }
            if (!this.name.equals(that.name)) {
                return false;
            }
        }

        boolean this_present_createTime = true && this.isSetCreateTime();
        boolean that_present_createTime = true && that.isSetCreateTime();
        if (this_present_createTime || that_present_createTime) {
            if (!(this_present_createTime && that_present_createTime)) {
                return false;
            }
            if (!this.createTime.equals(that.createTime)) {
                return false;
            }
        }

        boolean this_present_bucketType = true && this.isSetBucketType();
        boolean that_present_bucketType = true && that.isSetBucketType();
        if (this_present_bucketType || that_present_bucketType) {
            if (!(this_present_bucketType && that_present_bucketType)) {
                return false;
            }
            if (!this.bucketType.equals(that.bucketType)) {
                return false;
            }
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
        if (isSetName()) {
            hashCode = hashCode * 8191 + name.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
        if (isSetCreateTime()) {
            hashCode = hashCode * 8191 + createTime.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetBucketType()) ? 131071 : 524287);
        if (isSetBucketType()) {
            hashCode = hashCode * 8191 + bucketType.hashCode();
        }

        return hashCode;
    }

    @Override
    public int compareTo(Bucket other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.compare(isSetName(), other.isSetName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetCreateTime(), other.isSetCreateTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCreateTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetBucketType(), other.isSetBucketType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBucketType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketType, other.bucketType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Bucket(");
        boolean first = true;

        sb.append("name:");
        if (this.name == null) {
            sb.append("null");
        } else {
            sb.append(this.name);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("createTime:");
        if (this.createTime == null) {
            sb.append("null");
        } else {
            sb.append(this.createTime);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("bucketType:");
        if (this.bucketType == null) {
            sb.append("null");
        } else {
            sb.append(this.bucketType);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (name == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'name' was not present! Struct: " + toString());
        }
        if (createTime == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'createTime' was not present! Struct: " + toString());
        }
        if (bucketType == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'bucketType' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        NAME((short) 1, "name"),
        CREATE_TIME((short) 2, "createTime"),
        BUCKET_TYPE((short) 3, "bucketType");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // NAME
                return NAME;
            case 2: // CREATE_TIME
                return CREATE_TIME;
            case 3: // BUCKET_TYPE
                return BUCKET_TYPE;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) {
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class BucketStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public BucketStandardScheme getScheme() {
            return new BucketStandardScheme();
        }
    }

    private static class BucketStandardScheme extends org.apache.thrift.scheme.StandardScheme<Bucket> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Bucket struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                case 1: // NAME
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.name = iprot.readString();
                        struct.setNameIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 2: // CREATE_TIME
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.createTime = iprot.readString();
                        struct.setCreateTimeIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 3: // BUCKET_TYPE
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.bucketType = iprot.readString();
                        struct.setBucketTypeIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Bucket struct)
            throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.name != null) {
                oprot.writeFieldBegin(NAME_FIELD_DESC);
                oprot.writeString(struct.name);
                oprot.writeFieldEnd();
            }
            if (struct.createTime != null) {
                oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
                oprot.writeString(struct.createTime);
                oprot.writeFieldEnd();
            }
            if (struct.bucketType != null) {
                oprot.writeFieldBegin(BUCKET_TYPE_FIELD_DESC);
                oprot.writeString(struct.bucketType);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class BucketTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public BucketTupleScheme getScheme() {
            return new BucketTupleScheme();
        }
    }

    private static class BucketTupleScheme extends org.apache.thrift.scheme.TupleScheme<Bucket> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Bucket struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            oprot.writeString(struct.name);
            oprot.writeString(struct.createTime);
            oprot.writeString(struct.bucketType);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Bucket struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            struct.name = iprot.readString();
            struct.setNameIsSet(true);
            struct.createTime = iprot.readString();
            struct.setCreateTimeIsSet(true);
            struct.bucketType = iprot.readString();
            struct.setBucketTypeIsSet(true);
        }
    }
}

