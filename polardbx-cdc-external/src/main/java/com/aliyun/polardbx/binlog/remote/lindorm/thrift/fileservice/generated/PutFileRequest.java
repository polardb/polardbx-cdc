/**
 * Copyright (c) 2013-Present, Alibaba Group Holding Limited.
 * All rights reserved.
 *
 * Licensed under the Server Side Public License v1 (SSPLv1).
 */
/**
 * Autogenerated by Thrift Compiler (0.14.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.aliyun.polardbx.binlog.remote.lindorm.thrift.fileservice.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-05-26")
public class PutFileRequest
    implements org.apache.thrift.TBase<PutFileRequest, PutFileRequest._Fields>, java.io.Serializable, Cloneable,
    Comparable<PutFileRequest> {
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("PutFileRequest");
    private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC =
        new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC =
        new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField FILE_CONTENT_FIELD_DESC =
        new org.apache.thrift.protocol.TField("fileContent", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField CRC64_FIELD_DESC =
        new org.apache.thrift.protocol.TField("crc64", org.apache.thrift.protocol.TType.I64, (short) 4);
    private static final org.apache.thrift.protocol.TField CUSTOMIZE_METAS_FIELD_DESC =
        new org.apache.thrift.protocol.TField("customizeMetas", org.apache.thrift.protocol.TType.MAP, (short) 5);
    private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC =
        new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.MAP, (short) 6);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC =
        new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short) 7);
    private static final org.apache.thrift.protocol.TField APPEND_FIELD_DESC =
        new org.apache.thrift.protocol.TField("append", org.apache.thrift.protocol.TType.BOOL, (short) 8);
    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new PutFileRequestStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new PutFileRequestTupleSchemeFactory();
    // isset id assignments
    private static final int __CRC64_ISSET_ID = 0;
    private static final int __APPEND_ISSET_ID = 1;
    private static final _Fields optionals[] = {_Fields.CUSTOMIZE_METAS, _Fields.TAGS, _Fields.APPEND};

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
            new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.BUCKET_NAME,
            new org.apache.thrift.meta_data.FieldMetaData("bucketName",
                org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PATH,
            new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.FILE_CONTENT,
            new org.apache.thrift.meta_data.FieldMetaData("fileContent",
                org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
        tmpMap.put(_Fields.CRC64,
            new org.apache.thrift.meta_data.FieldMetaData("crc64", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.CUSTOMIZE_METAS, new org.apache.thrift.meta_data.FieldMetaData("customizeMetas",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true))));
        tmpMap.put(_Fields.TAGS,
            new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING,
                        true))));
        tmpMap.put(_Fields.AUTH,
            new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
                    Authorization.class)));
        tmpMap.put(_Fields.APPEND,
            new org.apache.thrift.meta_data.FieldMetaData("append", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PutFileRequest.class, metaDataMap);
    }

    public @org.apache.thrift.annotation.Nullable
    String bucketName; // required
    public @org.apache.thrift.annotation.Nullable
    String path; // required
    public @org.apache.thrift.annotation.Nullable
    java.nio.ByteBuffer fileContent; // required
    public long crc64; // required
    public @org.apache.thrift.annotation.Nullable
    java.util.Map<String, java.nio.ByteBuffer> customizeMetas; // optional
    public @org.apache.thrift.annotation.Nullable
    java.util.Map<String, java.nio.ByteBuffer> tags; // optional
    public @org.apache.thrift.annotation.Nullable
    Authorization auth; // required
    public boolean append; // optional
    private byte __isset_bitfield = 0;

    public PutFileRequest() {
    }

    public PutFileRequest(
        String bucketName,
        String path,
        java.nio.ByteBuffer fileContent,
        long crc64,
        Authorization auth) {
        this();
        this.bucketName = bucketName;
        this.path = path;
        this.fileContent = org.apache.thrift.TBaseHelper.copyBinary(fileContent);
        this.crc64 = crc64;
        setCrc64IsSet(true);
        this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PutFileRequest(PutFileRequest other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetBucketName()) {
            this.bucketName = other.bucketName;
        }
        if (other.isSetPath()) {
            this.path = other.path;
        }
        if (other.isSetFileContent()) {
            this.fileContent = org.apache.thrift.TBaseHelper.copyBinary(other.fileContent);
        }
        this.crc64 = other.crc64;
        if (other.isSetCustomizeMetas()) {
            java.util.Map<String, java.nio.ByteBuffer> __this__customizeMetas =
                new java.util.HashMap<String, java.nio.ByteBuffer>(other.customizeMetas);
            this.customizeMetas = __this__customizeMetas;
        }
        if (other.isSetTags()) {
            java.util.Map<String, java.nio.ByteBuffer> __this__tags =
                new java.util.HashMap<String, java.nio.ByteBuffer>(other.tags);
            this.tags = __this__tags;
        }
        if (other.isSetAuth()) {
            this.auth = new Authorization(other.auth);
        }
        this.append = other.append;
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY :
            TUPLE_SCHEME_FACTORY).getScheme();
    }

    public PutFileRequest deepCopy() {
        return new PutFileRequest(this);
    }

    @Override
    public void clear() {
        this.bucketName = null;
        this.path = null;
        this.fileContent = null;
        setCrc64IsSet(false);
        this.crc64 = 0;
        this.customizeMetas = null;
        this.tags = null;
        this.auth = null;
        setAppendIsSet(false);
        this.append = false;
    }

    @org.apache.thrift.annotation.Nullable
    public String getBucketName() {
        return this.bucketName;
    }

    public PutFileRequest setBucketName(@org.apache.thrift.annotation.Nullable String bucketName) {
        this.bucketName = bucketName;
        return this;
    }

    public void unsetBucketName() {
        this.bucketName = null;
    }

    /**
     * Returns true if field bucketName is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBucketName() {
        return this.bucketName != null;
    }

    public void setBucketNameIsSet(boolean value) {
        if (!value) {
            this.bucketName = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public String getPath() {
        return this.path;
    }

    public PutFileRequest setPath(@org.apache.thrift.annotation.Nullable String path) {
        this.path = path;
        return this;
    }

    public void unsetPath() {
        this.path = null;
    }

    /**
     * Returns true if field path is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPath() {
        return this.path != null;
    }

    public void setPathIsSet(boolean value) {
        if (!value) {
            this.path = null;
        }
    }

    public byte[] getFileContent() {
        setFileContent(org.apache.thrift.TBaseHelper.rightSize(fileContent));
        return fileContent == null ? null : fileContent.array();
    }

    public PutFileRequest setFileContent(byte[] fileContent) {
        this.fileContent =
            fileContent == null ? (java.nio.ByteBuffer) null : java.nio.ByteBuffer.wrap(fileContent.clone());
        return this;
    }

    public PutFileRequest setFileContent(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer fileContent) {
        this.fileContent = org.apache.thrift.TBaseHelper.copyBinary(fileContent);
        return this;
    }

    public java.nio.ByteBuffer bufferForFileContent() {
        return org.apache.thrift.TBaseHelper.copyBinary(fileContent);
    }

    public void unsetFileContent() {
        this.fileContent = null;
    }

    /**
     * Returns true if field fileContent is set (has been assigned a value) and false otherwise
     */
    public boolean isSetFileContent() {
        return this.fileContent != null;
    }

    public void setFileContentIsSet(boolean value) {
        if (!value) {
            this.fileContent = null;
        }
    }

    public long getCrc64() {
        return this.crc64;
    }

    public PutFileRequest setCrc64(long crc64) {
        this.crc64 = crc64;
        setCrc64IsSet(true);
        return this;
    }

    public void unsetCrc64() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CRC64_ISSET_ID);
    }

    /**
     * Returns true if field crc64 is set (has been assigned a value) and false otherwise
     */
    public boolean isSetCrc64() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CRC64_ISSET_ID);
    }

    public void setCrc64IsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CRC64_ISSET_ID, value);
    }

    public int getCustomizeMetasSize() {
        return (this.customizeMetas == null) ? 0 : this.customizeMetas.size();
    }

    public void putToCustomizeMetas(String key, java.nio.ByteBuffer val) {
        if (this.customizeMetas == null) {
            this.customizeMetas = new java.util.HashMap<String, java.nio.ByteBuffer>();
        }
        this.customizeMetas.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<String, java.nio.ByteBuffer> getCustomizeMetas() {
        return this.customizeMetas;
    }

    public PutFileRequest setCustomizeMetas(
        @org.apache.thrift.annotation.Nullable java.util.Map<String, java.nio.ByteBuffer> customizeMetas) {
        this.customizeMetas = customizeMetas;
        return this;
    }

    public void unsetCustomizeMetas() {
        this.customizeMetas = null;
    }

    /**
     * Returns true if field customizeMetas is set (has been assigned a value) and false otherwise
     */
    public boolean isSetCustomizeMetas() {
        return this.customizeMetas != null;
    }

    public void setCustomizeMetasIsSet(boolean value) {
        if (!value) {
            this.customizeMetas = null;
        }
    }

    public int getTagsSize() {
        return (this.tags == null) ? 0 : this.tags.size();
    }

    public void putToTags(String key, java.nio.ByteBuffer val) {
        if (this.tags == null) {
            this.tags = new java.util.HashMap<String, java.nio.ByteBuffer>();
        }
        this.tags.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<String, java.nio.ByteBuffer> getTags() {
        return this.tags;
    }

    public PutFileRequest setTags(
        @org.apache.thrift.annotation.Nullable java.util.Map<String, java.nio.ByteBuffer> tags) {
        this.tags = tags;
        return this;
    }

    public void unsetTags() {
        this.tags = null;
    }

    /**
     * Returns true if field tags is set (has been assigned a value) and false otherwise
     */
    public boolean isSetTags() {
        return this.tags != null;
    }

    public void setTagsIsSet(boolean value) {
        if (!value) {
            this.tags = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public Authorization getAuth() {
        return this.auth;
    }

    public PutFileRequest setAuth(@org.apache.thrift.annotation.Nullable Authorization auth) {
        this.auth = auth;
        return this;
    }

    public void unsetAuth() {
        this.auth = null;
    }

    /**
     * Returns true if field auth is set (has been assigned a value) and false otherwise
     */
    public boolean isSetAuth() {
        return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
        if (!value) {
            this.auth = null;
        }
    }

    public boolean isAppend() {
        return this.append;
    }

    public PutFileRequest setAppend(boolean append) {
        this.append = append;
        setAppendIsSet(true);
        return this;
    }

    public void unsetAppend() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPEND_ISSET_ID);
    }

    /**
     * Returns true if field append is set (has been assigned a value) and false otherwise
     */
    public boolean isSetAppend() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPEND_ISSET_ID);
    }

    public void setAppendIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPEND_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
        switch (field) {
        case BUCKET_NAME:
            if (value == null) {
                unsetBucketName();
            } else {
                setBucketName((String) value);
            }
            break;

        case PATH:
            if (value == null) {
                unsetPath();
            } else {
                setPath((String) value);
            }
            break;

        case FILE_CONTENT:
            if (value == null) {
                unsetFileContent();
            } else {
                if (value instanceof byte[]) {
                    setFileContent((byte[]) value);
                } else {
                    setFileContent((java.nio.ByteBuffer) value);
                }
            }
            break;

        case CRC64:
            if (value == null) {
                unsetCrc64();
            } else {
                setCrc64((Long) value);
            }
            break;

        case CUSTOMIZE_METAS:
            if (value == null) {
                unsetCustomizeMetas();
            } else {
                setCustomizeMetas((java.util.Map<String, java.nio.ByteBuffer>) value);
            }
            break;

        case TAGS:
            if (value == null) {
                unsetTags();
            } else {
                setTags((java.util.Map<String, java.nio.ByteBuffer>) value);
            }
            break;

        case AUTH:
            if (value == null) {
                unsetAuth();
            } else {
                setAuth((Authorization) value);
            }
            break;

        case APPEND:
            if (value == null) {
                unsetAppend();
            } else {
                setAppend((Boolean) value);
            }
            break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
        switch (field) {
        case BUCKET_NAME:
            return getBucketName();

        case PATH:
            return getPath();

        case FILE_CONTENT:
            return getFileContent();

        case CRC64:
            return getCrc64();

        case CUSTOMIZE_METAS:
            return getCustomizeMetas();

        case TAGS:
            return getTags();

        case AUTH:
            return getAuth();

        case APPEND:
            return isAppend();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case BUCKET_NAME:
            return isSetBucketName();
        case PATH:
            return isSetPath();
        case FILE_CONTENT:
            return isSetFileContent();
        case CRC64:
            return isSetCrc64();
        case CUSTOMIZE_METAS:
            return isSetCustomizeMetas();
        case TAGS:
            return isSetTags();
        case AUTH:
            return isSetAuth();
        case APPEND:
            return isSetAppend();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that instanceof PutFileRequest) {
            return this.equals((PutFileRequest) that);
        }
        return false;
    }

    public boolean equals(PutFileRequest that) {
        if (that == null) {
            return false;
        }
        if (this == that) {
            return true;
        }

        boolean this_present_bucketName = true && this.isSetBucketName();
        boolean that_present_bucketName = true && that.isSetBucketName();
        if (this_present_bucketName || that_present_bucketName) {
            if (!(this_present_bucketName && that_present_bucketName)) {
                return false;
            }
            if (!this.bucketName.equals(that.bucketName)) {
                return false;
            }
        }

        boolean this_present_path = true && this.isSetPath();
        boolean that_present_path = true && that.isSetPath();
        if (this_present_path || that_present_path) {
            if (!(this_present_path && that_present_path)) {
                return false;
            }
            if (!this.path.equals(that.path)) {
                return false;
            }
        }

        boolean this_present_fileContent = true && this.isSetFileContent();
        boolean that_present_fileContent = true && that.isSetFileContent();
        if (this_present_fileContent || that_present_fileContent) {
            if (!(this_present_fileContent && that_present_fileContent)) {
                return false;
            }
            if (!this.fileContent.equals(that.fileContent)) {
                return false;
            }
        }

        boolean this_present_crc64 = true;
        boolean that_present_crc64 = true;
        if (this_present_crc64 || that_present_crc64) {
            if (!(this_present_crc64 && that_present_crc64)) {
                return false;
            }
            if (this.crc64 != that.crc64) {
                return false;
            }
        }

        boolean this_present_customizeMetas = true && this.isSetCustomizeMetas();
        boolean that_present_customizeMetas = true && that.isSetCustomizeMetas();
        if (this_present_customizeMetas || that_present_customizeMetas) {
            if (!(this_present_customizeMetas && that_present_customizeMetas)) {
                return false;
            }
            if (!this.customizeMetas.equals(that.customizeMetas)) {
                return false;
            }
        }

        boolean this_present_tags = true && this.isSetTags();
        boolean that_present_tags = true && that.isSetTags();
        if (this_present_tags || that_present_tags) {
            if (!(this_present_tags && that_present_tags)) {
                return false;
            }
            if (!this.tags.equals(that.tags)) {
                return false;
            }
        }

        boolean this_present_auth = true && this.isSetAuth();
        boolean that_present_auth = true && that.isSetAuth();
        if (this_present_auth || that_present_auth) {
            if (!(this_present_auth && that_present_auth)) {
                return false;
            }
            if (!this.auth.equals(that.auth)) {
                return false;
            }
        }

        boolean this_present_append = true && this.isSetAppend();
        boolean that_present_append = true && that.isSetAppend();
        if (this_present_append || that_present_append) {
            if (!(this_present_append && that_present_append)) {
                return false;
            }
            if (this.append != that.append) {
                return false;
            }
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetBucketName()) ? 131071 : 524287);
        if (isSetBucketName()) {
            hashCode = hashCode * 8191 + bucketName.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
        if (isSetPath()) {
            hashCode = hashCode * 8191 + path.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetFileContent()) ? 131071 : 524287);
        if (isSetFileContent()) {
            hashCode = hashCode * 8191 + fileContent.hashCode();
        }

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(crc64);

        hashCode = hashCode * 8191 + ((isSetCustomizeMetas()) ? 131071 : 524287);
        if (isSetCustomizeMetas()) {
            hashCode = hashCode * 8191 + customizeMetas.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetTags()) ? 131071 : 524287);
        if (isSetTags()) {
            hashCode = hashCode * 8191 + tags.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
        if (isSetAuth()) {
            hashCode = hashCode * 8191 + auth.hashCode();
        }

        hashCode = hashCode * 8191 + ((isSetAppend()) ? 131071 : 524287);
        if (isSetAppend()) {
            hashCode = hashCode * 8191 + ((append) ? 131071 : 524287);
        }

        return hashCode;
    }

    @Override
    public int compareTo(PutFileRequest other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.compare(isSetBucketName(), other.isSetBucketName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBucketName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetPath(), other.isSetPath());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPath()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetFileContent(), other.isSetFileContent());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFileContent()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileContent, other.fileContent);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetCrc64(), other.isSetCrc64());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCrc64()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crc64, other.crc64);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetCustomizeMetas(), other.isSetCustomizeMetas());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCustomizeMetas()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customizeMetas, other.customizeMetas);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetTags(), other.isSetTags());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTags()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetAuth(), other.isSetAuth());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAuth()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetAppend(), other.isSetAppend());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAppend()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.append, other.append);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PutFileRequest(");
        boolean first = true;

        sb.append("bucketName:");
        if (this.bucketName == null) {
            sb.append("null");
        } else {
            sb.append(this.bucketName);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("path:");
        if (this.path == null) {
            sb.append("null");
        } else {
            sb.append(this.path);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("fileContent:");
        if (this.fileContent == null) {
            sb.append("null");
        } else {
            org.apache.thrift.TBaseHelper.toString(this.fileContent, sb);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("crc64:");
        sb.append(this.crc64);
        first = false;
        if (isSetCustomizeMetas()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("customizeMetas:");
            if (this.customizeMetas == null) {
                sb.append("null");
            } else {
                sb.append(this.customizeMetas);
            }
            first = false;
        }
        if (isSetTags()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("tags:");
            if (this.tags == null) {
                sb.append("null");
            } else {
                sb.append(this.tags);
            }
            first = false;
        }
        if (!first) {
            sb.append(", ");
        }
        sb.append("auth:");
        if (this.auth == null) {
            sb.append("null");
        } else {
            sb.append(this.auth);
        }
        first = false;
        if (isSetAppend()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("append:");
            sb.append(this.append);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (bucketName == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'bucketName' was not present! Struct: " + toString());
        }
        if (path == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'path' was not present! Struct: " + toString());
        }
        if (fileContent == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'fileContent' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'crc64' because it's a primitive and you chose the non-beans generator.
        if (auth == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'auth' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
        if (auth != null) {
            auth.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        BUCKET_NAME((short) 1, "bucketName"),
        PATH((short) 2, "path"),
        FILE_CONTENT((short) 3, "fileContent"),
        CRC64((short) 4, "crc64"),
        CUSTOMIZE_METAS((short) 5, "customizeMetas"),
        TAGS((short) 6, "tags"),
        AUTH((short) 7, "auth"),
        APPEND((short) 8, "append");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // BUCKET_NAME
                return BUCKET_NAME;
            case 2: // PATH
                return PATH;
            case 3: // FILE_CONTENT
                return FILE_CONTENT;
            case 4: // CRC64
                return CRC64;
            case 5: // CUSTOMIZE_METAS
                return CUSTOMIZE_METAS;
            case 6: // TAGS
                return TAGS;
            case 7: // AUTH
                return AUTH;
            case 8: // APPEND
                return APPEND;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) {
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class PutFileRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public PutFileRequestStandardScheme getScheme() {
            return new PutFileRequestStandardScheme();
        }
    }

    private static class PutFileRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<PutFileRequest> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, PutFileRequest struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                case 1: // BUCKET_NAME
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.bucketName = iprot.readString();
                        struct.setBucketNameIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 2: // PATH
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.path = iprot.readString();
                        struct.setPathIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 3: // FILE_CONTENT
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.fileContent = iprot.readBinary();
                        struct.setFileContentIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 4: // CRC64
                    if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                        struct.crc64 = iprot.readI64();
                        struct.setCrc64IsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 5: // CUSTOMIZE_METAS
                    if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                        {
                            org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                            struct.customizeMetas = new java.util.HashMap<String, java.nio.ByteBuffer>(2 * _map40.size);
                            @org.apache.thrift.annotation.Nullable String _key41;
                            @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val42;
                            for (int _i43 = 0; _i43 < _map40.size; ++_i43) {
                                _key41 = iprot.readString();
                                _val42 = iprot.readBinary();
                                struct.customizeMetas.put(_key41, _val42);
                            }
                            iprot.readMapEnd();
                        }
                        struct.setCustomizeMetasIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 6: // TAGS
                    if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                        {
                            org.apache.thrift.protocol.TMap _map44 = iprot.readMapBegin();
                            struct.tags = new java.util.HashMap<String, java.nio.ByteBuffer>(2 * _map44.size);
                            @org.apache.thrift.annotation.Nullable String _key45;
                            @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val46;
                            for (int _i47 = 0; _i47 < _map44.size; ++_i47) {
                                _key45 = iprot.readString();
                                _val46 = iprot.readBinary();
                                struct.tags.put(_key45, _val46);
                            }
                            iprot.readMapEnd();
                        }
                        struct.setTagsIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 7: // AUTH
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                        struct.auth = new Authorization();
                        struct.auth.read(iprot);
                        struct.setAuthIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 8: // APPEND
                    if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                        struct.append = iprot.readBool();
                        struct.setAppendIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetCrc64()) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'crc64' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, PutFileRequest struct)
            throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.bucketName != null) {
                oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
                oprot.writeString(struct.bucketName);
                oprot.writeFieldEnd();
            }
            if (struct.path != null) {
                oprot.writeFieldBegin(PATH_FIELD_DESC);
                oprot.writeString(struct.path);
                oprot.writeFieldEnd();
            }
            if (struct.fileContent != null) {
                oprot.writeFieldBegin(FILE_CONTENT_FIELD_DESC);
                oprot.writeBinary(struct.fileContent);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(CRC64_FIELD_DESC);
            oprot.writeI64(struct.crc64);
            oprot.writeFieldEnd();
            if (struct.customizeMetas != null) {
                if (struct.isSetCustomizeMetas()) {
                    oprot.writeFieldBegin(CUSTOMIZE_METAS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
                            org.apache.thrift.protocol.TType.STRING, struct.customizeMetas.size()));
                        for (java.util.Map.Entry<String, java.nio.ByteBuffer> _iter48 : struct.customizeMetas
                            .entrySet()) {
                            oprot.writeString(_iter48.getKey());
                            oprot.writeBinary(_iter48.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.tags != null) {
                if (struct.isSetTags()) {
                    oprot.writeFieldBegin(TAGS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
                            org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
                        for (java.util.Map.Entry<String, java.nio.ByteBuffer> _iter49 : struct.tags.entrySet()) {
                            oprot.writeString(_iter49.getKey());
                            oprot.writeBinary(_iter49.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.auth != null) {
                oprot.writeFieldBegin(AUTH_FIELD_DESC);
                struct.auth.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.isSetAppend()) {
                oprot.writeFieldBegin(APPEND_FIELD_DESC);
                oprot.writeBool(struct.append);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class PutFileRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public PutFileRequestTupleScheme getScheme() {
            return new PutFileRequestTupleScheme();
        }
    }

    private static class PutFileRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<PutFileRequest> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, PutFileRequest struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            oprot.writeString(struct.bucketName);
            oprot.writeString(struct.path);
            oprot.writeBinary(struct.fileContent);
            oprot.writeI64(struct.crc64);
            struct.auth.write(oprot);
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetCustomizeMetas()) {
                optionals.set(0);
            }
            if (struct.isSetTags()) {
                optionals.set(1);
            }
            if (struct.isSetAppend()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetCustomizeMetas()) {
                {
                    oprot.writeI32(struct.customizeMetas.size());
                    for (java.util.Map.Entry<String, java.nio.ByteBuffer> _iter50 : struct.customizeMetas.entrySet()) {
                        oprot.writeString(_iter50.getKey());
                        oprot.writeBinary(_iter50.getValue());
                    }
                }
            }
            if (struct.isSetTags()) {
                {
                    oprot.writeI32(struct.tags.size());
                    for (java.util.Map.Entry<String, java.nio.ByteBuffer> _iter51 : struct.tags.entrySet()) {
                        oprot.writeString(_iter51.getKey());
                        oprot.writeBinary(_iter51.getValue());
                    }
                }
            }
            if (struct.isSetAppend()) {
                oprot.writeBool(struct.append);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, PutFileRequest struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            struct.bucketName = iprot.readString();
            struct.setBucketNameIsSet(true);
            struct.path = iprot.readString();
            struct.setPathIsSet(true);
            struct.fileContent = iprot.readBinary();
            struct.setFileContentIsSet(true);
            struct.crc64 = iprot.readI64();
            struct.setCrc64IsSet(true);
            struct.auth = new Authorization();
            struct.auth.read(iprot);
            struct.setAuthIsSet(true);
            java.util.BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                {
                    org.apache.thrift.protocol.TMap _map52 =
                        iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING,
                            org.apache.thrift.protocol.TType.STRING);
                    struct.customizeMetas = new java.util.HashMap<String, java.nio.ByteBuffer>(2 * _map52.size);
                    @org.apache.thrift.annotation.Nullable String _key53;
                    @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val54;
                    for (int _i55 = 0; _i55 < _map52.size; ++_i55) {
                        _key53 = iprot.readString();
                        _val54 = iprot.readBinary();
                        struct.customizeMetas.put(_key53, _val54);
                    }
                }
                struct.setCustomizeMetasIsSet(true);
            }
            if (incoming.get(1)) {
                {
                    org.apache.thrift.protocol.TMap _map56 =
                        iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING,
                            org.apache.thrift.protocol.TType.STRING);
                    struct.tags = new java.util.HashMap<String, java.nio.ByteBuffer>(2 * _map56.size);
                    @org.apache.thrift.annotation.Nullable String _key57;
                    @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val58;
                    for (int _i59 = 0; _i59 < _map56.size; ++_i59) {
                        _key57 = iprot.readString();
                        _val58 = iprot.readBinary();
                        struct.tags.put(_key57, _val58);
                    }
                }
                struct.setTagsIsSet(true);
            }
            if (incoming.get(2)) {
                struct.append = iprot.readBool();
                struct.setAppendIsSet(true);
            }
        }
    }
}

