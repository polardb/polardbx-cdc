/**
 * Copyright (c) 2013-Present, Alibaba Group Holding Limited.
 * All rights reserved.
 *
 * Licensed under the Server Side Public License v1 (SSPLv1).
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TxnStream.proto

package com.aliyun.polardbx.binlog.protocol;

/**
 * Protobuf enum {@code com.aliyun.polardbx.binlog.protocol.TxnFlag}
 */
public enum TxnFlag
    implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NORMAL = 0;</code>
     */
    NORMAL(0),
    /**
     * <code>ARCHIVE = 1;</code>
     */
    ARCHIVE(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>NORMAL = 0;</code>
     */
    public static final int NORMAL_VALUE = 0;
    /**
     * <code>ARCHIVE = 1;</code>
     */
    public static final int ARCHIVE_VALUE = 1;

    public final int getNumber() {
        if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
        }
        return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TxnFlag valueOf(int value) {
        return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TxnFlag forNumber(int value) {
        switch (value) {
        case 0:
            return NORMAL;
        case 1:
            return ARCHIVE;
        default:
            return null;
        }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TxnFlag>
    internalGetValueMap() {
        return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<
        TxnFlag> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TxnFlag>() {
            public TxnFlag findValueByNumber(int number) {
                return TxnFlag.forNumber(number);
            }
        };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
    getValueDescriptor() {
        if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalStateException(
                "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor
    getDescriptorForType() {
        return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor
    getDescriptor() {
        return com.aliyun.polardbx.binlog.protocol.TxnStream.getDescriptor().getEnumTypes().get(1);
    }

    private static final TxnFlag[] VALUES = values();

    public static TxnFlag valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
                "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
    }

    private final int value;

    private TxnFlag(int value) {
        this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.aliyun.polardbx.binlog.protocol.TxnFlag)
}

